{"posts":[{"title":"RIDDLE JOKER レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2018年に発売された「RIDDLE JOKER（リドルジョーカー）」を全ルート攻略完了したので、レビューしていきます。 作品概要 あらすじ ここは、かつて「超能力」と呼ばれていた、不思議な力「アストラル」能力が存在する世界。 主人公【在原ありはら 暁さとる】はアストラル能力者であり、その力を使って暗躍する非合法国家諜報組織【情報局特別班とっぱん】のエージェントである。 とある任務のため、義妹の【在原ありはら 七海ななみ】と共に、アストラル能力研究が盛んな【橘花学院きっかがくいん】へ転校生として潜入することに。 潜入先の学院では、【三司みつかさ あやせ】【二条院にじょういん 羽月はづき】【式部しきべ 茉優まゆ】と出会い、順調に仲を深めていく。 しかし、学院での任務中、予期せぬ事態に巻き込まれ、【三司 あやせ】に正体がバレてしまっただけでなく、彼女がみんなに隠していた秘密も知ってしまう。 この出来事をきっかけに、学園に潜む闇、そして、日本に潜む闇に、暁は巻き込まれていく。 登場キャラクター メインヒロイン 三司みつかさ あやせ（CV：沢澤さわさわ 砂羽さわ） 在原ありはら 七海ななみ（CV：くすはらゆい） 式部しきべ 茉優まゆ（CV：西園にしぞの 純夏すみか） 二条院にじょういん 羽月はづき（CV：遥はるか そら） サブヒロイン 壬生みぶ 千咲ちさき（CV：夏和小かなこ） シナリオ評論 共通ルート 学院に転校生として潜入して特班の任務をこなしながら、発表祭に向けてみんなと仲良くなっていく流れになっている。 そのため、何かの問題が発生してその原因を解決するような展開は無い。 基本的に各個別ルートへの導入と言った感じで、プレイヤーに世界観などを馴染ませるための内容が中心である。 なお、発表祭前夜のアナザービューと、それが発生しなかった場合は発表祭当日の内容によって、誰の個別ルートに進むか分かる親切設計になっている。 個別ルート攻略推奨順 羽月、千咲、七海、茉優、あやせの順で攻略を推奨する。 茉優ルート及びあやせルートは、本作におけるメインストーリーの位置付けである。 茉優を先に攻略すると、あやせ攻略時に納得感が出やすいため、あやせを後にするのがベスト。 また、七海ルートも本筋に掠っている話が少し出てくるため、メインストーリー寄りのサブストーリーポジションである。 ゆえに、上記のメインストーリールート前に攻略すれば、ネタバレ感を持ちながらプレイする必要がなくなる。 なお、羽月ルート及び千咲ルートは、ストーリーの本筋と一切関係なく、掠りもしないため、実質サブストーリーである。 そして、千咲は、誰か一人を攻略した後でないと、攻略対象とはならない。 そのため、羽月、千咲、七海、茉優、あやせの順で攻略すれば、消化試合感がなく没入できるだろう。 メインヒロイン評論 三司 あやせ 暁とは同学年のクラスメイトで、学生会長を務める。 空間を対象にして斥力・引力を操作するアストラル能力を持つ。 みんなの前では、どんな時でも猫をかぶっていて、上品で清楚なキャラを演じている。 しかし、秘密を知っている暁の前では、ひねくれたり、やさぐれたり、ガンを飛ばしたり、と粗野な振る舞いをする。 このことから分かる通り、全ヒロイン中、ギャップが最も激しいキャラである。 そのため、付き合い初めてからデレが入ると、暁視点で見る普段の彼女とのギャップも相まって、凄まじい破壊力を伴う。 彼女を攻略中に、そのギャップによって脳が破壊され、新しい扉を開いた紳士淑女は少なくないであろう。かくいう私もそうである。 公私で表裏が激しいヒロインを好きな人に、是非推したい。 では、彼女の魅力をより理解できるように至高の激カワシーンを二つ紹介しよう。 一つは、共通ルートで、猫の気持ちを知るために、猫になりきるプレイ（猫耳あり）をした時。 もう一つは、個別ルートで、ホラーゲームプレイ中に怖がりながら腕をつかんできた時。 どちらも筆舌に尽くしがたい程の可愛さである。それを具体的に説明をするのは野暮というもの。 ちなみに、彼女は本作の根幹となる秘密を抱えているので、そこも意識しながら攻略すると良いだろう。 猫耳を装着した激カワあやせさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 在原 七海 暁とは一つ年下で血縁関係のない兄妹であり、特班における相棒役でもある。 外傷を治癒できるアストラル能力の持ち主。 家事全般を卒なく熟すだけでなく、PC関連の知識も持ち合わせており、クラッキングもお手の物。 性格面においても、面倒見が良く、優しく、気遣い上手なので、文句の付け所がない。 そのうえ、スタイルも良い、という圧倒的高スペックを誇る。 ただし、過去のとある出来事によって極度の人見知りとなっており、所謂コミュ力と呼ばれるものは、最底辺のポンコツである。 そんな彼女であるが、個別ルートでは、Sッ気のある小悪魔気質であることが明らかになる。 ストーリー中に詳らかになる彼女の想いに触れると、どうしてその気質が齎されたかをより実感できよう。 これまでの説明をまとめると、世話焼き＋Sッ気＋小悪魔＋義妹の複合属性である。 これらの属性が好きな紳士淑女には、彼女をおすすめせざるを得ない。 特に、共通ルートの「はい、あーん」で食べさせてくれるシーンが至高。 彼女の「可愛い」要素がここに全て詰まっている。 彼女はこのような勘所で可愛さを魅せてくるので、暁が無意識に「だだ甘」なシスコンになるのも致し方なかろう。 あと、個別ルートにて、彼女が作る餃子の話は、面白くて可愛くてほっこりするので必見。 七海ちゃんに頼られて拒否できる兄など居ない © YUZUSOFT / JUNOS INC. All Rights Reserved. 式部 茉優 暁とは二つ年上の先輩（二度留年している）であり、学院に雇われている研究員でもある。 アストラルを空間中に固定する能力を持つ。 普段は、落ち着いた雰囲気のお姉さん然としていて、類い稀な才媛である。 他人からはどう見ても魅力溢れる彼女だが、自尊心が異常に低く、甘えん坊で自信がないところがある。 個別ルートは、暁が特班の任務中に失態を犯して正体バレするが、彼女の都合もあり難を逃れるという展開から始まる。 プレイヤー視点からは、暁の一連の行動に感情移入しにくいため、批判的な感情を持つかもしれない。 なので、攻略を途中でやめようと思った方もいるかもしれないが、何とか耐えてほしい。 ここを乗り越えられたなら、全ヒロイン中最も純情可憐な彼女が拝めるのである。 さて、彼女は、年上＋才女＋甘えん坊＋姉の複合属性持ちである。 しっかりしたお姉さんが時折弱さを見せるのが好きな紳士淑女の方には、間違いなくクリティカルヒットするであろう。 彼女はとても優秀であるにも関わらず、なぜ二度も留年したのか。 三司あやせ同様に本作の根幹をなす理由が存在するため、是非攻略してみてほしい。 茉優先輩にヨシヨシされたい人生であった © YUZUSOFT / JUNOS INC. All Rights Reserved. 二条院 羽月 暁とは同学年のクラスメイトで、主人公が住む学院寮の寮長を務める。 水を自在に操るアストラル能力の持ち主。 真面目で責任感が強く、とても真摯な性格で、むっつりスケベである。 自分を犠牲にしても誰かの為になることを厭わない献身性の気質も持ち合わせており、まるで聖女のようである。 時代劇が好きであり、口調や思想、信条など様々な面で多大な影響を受けている。 個別ルートは、暁とひたすら初々しくイチャつく高糖度のシナリオである。 ストーリーの本筋に関係ないことは残念だが、その代わりに不安になる要素は存在せず、無心で楽しめる。 とはいえ、全く何もないということはなく、山あり谷ありの普通のラブコメなので、安心して欲しい。 そして、全ヒロイン中唯一、膝枕及び壁ドン（※茉優にもあるがSDなので除外）のシチュエーションCGが存在する。 また、彼女だけが手作り弁当を持ってきてくれる。有難いことにそのCGもある。 他のヒロインは、そういったことをしてくれないため、特筆に値する。 さて、彼女については、シチュエーションCGが多いため、どのシーンを至高とするかは非常に悩ましいところではある。 強いて挙げるのであれば、個別ルートに入ってからの犬なりきりプレイであろう。 このシーンで、彼女のあまりの可愛さに紳士淑女諸君らが、ハートを撃ち抜かれることは想像に難くない。 異能力モノには興味ないが、ラブコメは好きという方に、攻略を推したいヒロインである。 ショッピングモールで犬真似を晒す羽月さん © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 シナリオ 項目 点数 採点基準 世界観 8/10点 設定を上手く活用できているか 構成 7/10点 エピソードやシーンが効果的で破綻ないか 演出 6/10点 読み手を惹きつける表現を演出しているか 合計 21/30点 シナリオには、課題が見られた。 まずは、良かった点を二つ挙げよう。 一つは、どの個別ルートにおいても、一定の水準以上の質は維持できていたこと。 もう一方は、叙述トリックなど、ある程度の読解力を読み手に要するテクニックを使用せず、素直に展開が描かれるため、邪推なしで読めること。 さて、課題となる悪かった点は、三つある。 一つ目は、往年の名作のように作品の世界に引き込む程のパワーは見られなかったこと。 二つ目は、隠しヒロインの存在価値を生み出せておらず、実質的にサブヒロインになっていたこと。 最後は、一部のヒロインがメインストーリーとほぼ関与せず、付け足し感が否めなかったこと。 グラフィック 項目 点数 採点基準 クオリティ 10/10点 CG及びSDの画力が安定しているか ボリューム 10/10点 CG及びSDの枚数・差分がどれだけあるか 合計 20/20点 むりりん先生及びこぶいち先生を原画とするイベントCGは、非常に高品質で安定しており、文句なしの満点。 もちろん、こもわた遙華先生のSDも、可愛く、面白く、格好良く、と三拍子揃った一級品。 また、立ち絵そのものの差分や表情差分も相当あるので、会話中のヒロインも表情豊かであり、満足感が高い。 キャラクター 項目 点数 採点基準 作り込み 9/10点 新奇性や個性の強さがどれくらいか ボイス 9/10点 キャラデザとの主観的な一致度があるか 合計 18/20点 キャラクターの作り込みが素晴らしく、どのヒロインも被らない個性があって可愛らしさもあり、とても魅力的である。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム 項目 点数 採点基準 音楽 8/10点 良いOP、ED、BGMか 動画 9/10点 OP、EDの出来の良さ システム 9/10点 システムの快適性 合計 26/30点 音楽は、素晴らしいOP曲「astral ability」を筆頭に、ED曲もヒロインごとにきちんと彼女たちらしさが溢れたものが用意されており、いずれも良曲である。 システムは、フローチャート機能が素晴らしい。フローチャート画面上で選択肢を選ぶと、どのルートに進むか確認できる。 総論 評点 85点（優/Aランク） コメント どこかの要素が極端に偏重しておらず、バランス感覚に非常に優れた作品に仕上がっている。 本作もゆずソフトの前評判通りに、全評価項目が平均点以上の優作であると言えよう。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 RIDDLE JOKER【こちらの商品は修正パッチ Ver.1.14aを適用済です】※2/17 15時以降に適用されています。━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…かつては【超能力】と呼... Steam 全年齢版 Riddle Joker on SteamFor decades, superpowers and psychic abilities were thought to be mere science fiction, but the discovery of a certain particle called the &...","link":"/articles/riddle-joker-review/"},{"title":"hexo-tag-ogp-link-previewの公開に纏わる閑話","text":"2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。 本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛もない話題を中心に書き綴ります。 何のためのプラグインか hexo-tag-ogp-link-previewは、OpenGraph プロトコル対応のページから取得したデータを用いてリンクプレビューを生成し、Hexo のブログ記事に埋め込むためのプラグインです。 hexo-tag-ogp-link-previewA Hexo tag plugin for embedding link preview by OpenGraph on article.. Latest version: 1.1.0, last published: a month ago. Start using hexo-... FaceBook を始め X(Twitter) 等の SNS でリンク共有時に表示されるようなカードを、Hexo でも上記のような感じで再現できます。 開発に至った経緯 元々は、書いた「RIDDLE JOKER」のレビューに、Fanza Games や Steam へのビジュアルリッチなリンクを欲したことが発端です。 レビューを投稿するにあたり、作中のスクショを張りたかったことと、ゲームそのものが R18 指定だったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。 結果、GitHub Pages + Hexo.js + Icarus の組み合わせで、ブログの作成と相成りました。 ですが、Hexo 並びに Icarus にはデフォルトでリンクプレビュー機能が存在しません。 まずは、どうすれば実現できるのかをググりました。 すると、「Hexo+Icarus リンクカードを設定するという、まさに正鵠を射る記事を発見。 そこに書かれていたhexo-tag-link-previewをnpm installして使うことにしました。 しかし、レビュー記事をプレビュー表示してみると、生成したページに問題が発生しています。 なんと、Fanza Games 版のリンクが、&quot;undefined&quot;ではありませんか。 そこで、該当のプラグインは OSS なので、Bug issue を立てて修正していただく考えに至りました。 とはいえ、プラグインの最終更新日は、今から2年以上前で止まっています。 加えて、作者のブログ記事の「hexo-tag-link-previewをnpmで公開しました。」で、現在は Hexo を使用していない、との記述を発見。 ゆえに、このプラグインがメンテナンスされることは今後ないだろうと判断し、参考にしてゼロから作り直すことを決意しました。 それから、数日で自作プラグインが完成し、無事にレビュー記事にも反映。 作り始めた頃は公開しようとは思っていなかったのですが、もしかして同じ問題にぶち当たってリンクプレビューを諦めた人がいるのではないかと思いました。 なので、しっかりとコードリファクタしたうえで、テストも整備して、プラグインを公開させていただきました。 皆様に使っていただければ幸いです。 参考プラグインとの違い Hexoは、snake_caseで記載するのが一般的であるようです。 そのため、hexo-tag-link-previewがlowerCamelCase表記であったところを、hexo-tag-ogp-link-previewではsnake_caseに変えています。 これは、タグ名と設定項目の両方に適用されます（タグ名は&quot;linkPreview&quot;から&quot;link_preview&quot;に、設定項目は例えば、&quot;className&quot;が&quot;class_name&quot;へ変更）。 この違いさえ忘れずに、正しく修正すれば、プラグインそのものを差し替えても、そのまま動作する仕様となっています。 また、hexo-tag-link-previewと異なり、hexo-tag-ogp-link-previewでは、タグのパラメータの記載順を入れ替えても正しく認識します。 とはいえ、現バージョンで出来るようにしているだけ（※注：動作未保証です）で、将来的には変更する可能性があるので、この仕様については参考程度にして頂ければと思います。 Icarusテーマ利用者向け このセクションは、Icarus テーマ利用者向けに「RIDDLE JOKER」のレビューで表示している FaceBook 風なリンクプレビューデザインを設定するための解説をします。 デザイン設定 記事のスタイル定義ファイルに、リンクプレビューで使用する変数定義と各種クラスを追加します。 2024年01月16日更新 変数の記載場所を一か所に集約 1.91:1 のアスペクト比でリンクプレビュー画像を表示できるように修正 角半径を親要素で調整するように修正 画像の下部に余白ができないように修正 descriptions クラスの padding 設定を修正 link-preview クラスの一部の設定値を変数宣言に変更 themes/icarus/include/style/article.styl$link-preview-card-border ?= 1px solid #cbd0d3 $link-preview-card-radius ?= 8px $link-preview-card-margin ?= 1rem 0 $link-preview-card-bg-color ?= #f2f3f5 $link-preview-card-og-description-color ?= #525252 article /* ... 省略 ... */ &amp;.article /* ... 省略 ... */ .content /* ... 省略 ... */ .link-preview display: block overflow: hidden border: $link-preview-card-border border-radius: $link-preview-card-radius margin: $link-preview-card-margin font-size: 1rem background-color: $link-preview-card-bg-color .og-image img display: block object-fit: cover object-position: center aspect-ratio: 40 / 21 width: 100% height: auto .descriptions padding: 0.5rem 1rem .og-title font-size: 1.25rem font-weight: 600 margin-bottom: 0.25rem .og-description color: $link-preview-card-og-description-color 以上で、デザインの設定は完了です。 Hexo設定 続いて、Hexo 設定ファイルで、hexo-tag-ogp-link-previewの設定調整を行います。 デフォルト設定状態では、FaceBook 風なデザインの再現を阻む不都合が二つ発生します。 それは、リンクの文字色が目立つということと、画像がギャラリーにアイテムとして追加されてしまうということです。 一つ目は、class_name.anchor_linkにlink-muted link-previewを設定することで防ぎます。 二つ目は、class_name.imageにnot-gallery-itemを設定することで対策できます。 設定ファイルは、以下のように記載してください。 _config.yml# ... ファイルの上の部分は、省略 ... link_preview: class_name: anchor_link: link-muted link-preview image: not-gallery-item 他の設定値はデザインに影響しませんので、皆様のご自由にしていただいて大丈夫です。 今後のアップデート予定 今後は、v1.1.0のマイナーアップデートリリースを予定しており、ソースコードのメンテナビリティ強化のためのリファクタがメインとなります。 機能の強化としては、プラグインが生成する HTML タグの固定クラス（&quot;og-image&quot;や&quot;descriptions&quot;など）に対して、リンクプレビューごとに同一の接尾辞をつけられるようにして、シーンに応じてデザインを調整できるようにする予定です。 このサイトでは、レビュー記事にラージサイズ画像のリンクプレビュー、それ以外の記事に細長なリンクプレビューといった使い分けをする想定です。 ここまでご覧いただきありがとうございました。 次回のマイナーアップデート後も、今回のような閑話記事を投稿予定なので、その時は良しなに。","link":"/articles/hexo-link-preview-npm-publish/"},{"title":"サノバウィッチ レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2015年に発売された「サノバウィッチ SABBAT OF THE WITCH」を全ルート攻略完了しましたので、レビューを書いていきます。 作品概要 あらすじ 主人公【保科ほしな 柊史しゅうじ】は、先天的に「他人の自分に対する感情の発露を五感で受け取れる」不思議な能力がある。 その力に苦しんだ結果、【姫松学院ひめまつがくいん】に入学する頃には、本心よりも場の空気や雰囲気を重視して、他人の頼みを断れない悪癖を持っていた。 とある日のこと、図書委員のクラスメイトのお願いを断れず、放課後に代理の作業をした柊史。 図書室の奥でひとり居残りしていると、【綾地あやち 寧々ねね】が異様な様子で入室してきたかと思いきや、清楚な彼女の思いがけない姿を目撃する。 それから始まる一連の出来事をきっかけに、彼女が「魔女」であることを知る。 魔女は、人から溢れ出た心の欠片を一定量回収し、対価に釣り合う代償を支払うことで、自分の願いを一つだけどんな事でも叶える魔法を発動できる。 先日の彼女の痴態は、対価となる重い代償によるものだったのである。 彼女が、それほどの代償を払ってまで魔女になった理由は何なのか？ なぜ彼が、苦しみを味わうような不思議な力を持って生まれてきたのか？ ――交わることのなかった二人が出会った時、物語の歯車が回り始める。 登場キャラクター メインヒロイン 綾地あやち 寧々ねね（桐谷きりたに 華はな） 因幡いなば めぐる（遥はるか そら） 椎葉しいば 紬つむぎ（黒咲くろさき そら） 戸隠とがくし 憧子とうこ（明科あけしな まなさ） サブヒロイン 仮屋かりや 和奏わかな（小鳥居ことりい 夕花ゆうか） シナリオ評論 共通ルート 本作は、最初から全てのヒロインが登場するわけではなく、時間を置いて一人ずつ邂逅していく。 始まりは、寧々が所属するオカルト研究部への入部で、次に、部員不足問題で憧子と出会う。 それから、お悩み相談でめぐると知り合い、最後に、紬が姫松学院に転校してくる。 といったように、オカルト研究部を軸としてストーリーが進む。 そして、ハロウィンパーティまでは、オカルト研究部に所属した各ヒロインの掘り下げが中心となる。 なお、ハロウィンパーティ後にルート分岐するが、だれのルートになるか事前に知る方法はない。 したがって、後述の攻略推奨順の注意事項を読んでおくと、上手く進められよう。 個別ルート攻略推奨順 紬、和奏、憧子、めぐる、寧々の順で攻略を推奨する。 本作は、誰から攻略をしても問題ないつくりになっている。 しかし、寧々ルートは、内容も濃く、エンディングまで多くの時間を消費するため、最初に攻略するとお腹一杯になる可能性が高い。 全てのヒロインを攻略したいなら、最後まで残したほうが良いだろう。 また、最初の方にある、めぐるが相談に来た時の選択肢の選び方によって、同学年（紬・和奏・寧々）と他学年（憧子・めぐる）の二つのルートに分岐する。 つまり、同学年ルートに入ったセーブデータだと、憧子とめぐるを攻略できない。もちろん、逆も然りである。 こういったビジュアルノベルは、選択肢の直前でセーブして楽しむプレイをする人が大多数であろうから、知っておくべき仕様である。 ただし、本作もサブヒロインは、誰か一人を攻略した後でないと攻略対象とならない。 よって、上述した事項を考慮すると、紬、和奏、憧子、めぐる、寧々の順で攻略する流れを組むと、効率的に楽しめるであろう。 メインヒロイン評論 綾地 寧々 柊史のクラスメイトで、オカルト研究部所属。アルプと契約した魔女。 温厚篤実で堅忍質直、そして才色兼備であり、オカルト研究部で人助けやお悩み相談を行っている。 学院では、二年生のアイドル的存在で、学生会長の戸隠憧子と人気を二分すると評される。 本人曰く「人付き合いは良くないし、友達もいない」。 その発言の通り、大人っぽいクールな美少女と他人から認識されているが、前述のこともあってか、男女問わず慕われている様子が柊史視点で描かれる。 なぜ、彼女が他人と一線を引くのか。それは、魔女契約の代償となる「発情」がいつ起こるか分からないからであろう。 彼女がこういった態度を積み重ねた結果、周囲が彼女をクールだと認識するようになった。 しかし、彼女の印象は、個別ルートに入るとガラリと変わる。 大人っぽいクールさは張りぼてで、その実、子供っぽくて積極的である。そのギャップが、彼女の魅力を最大限に引き立てる味わい深いものにしている。 また、個別ルートは、家族の形と寧々の成長の二つに焦点を当てるストーリーとなっている。 他ヒロインルートと比して、色々と重い内容となっており、彼女がひとりで暮らしている理由等も徐々に語られていく。 何でも願いを叶えられる都合の良い存在である「魔法」ですら、願い方を少しでも間違えば都合が良くなるわけではない。 しかし、彼女は、都合の良いそれが無くても、様々な艱難辛苦を自分の力で乗り越えて成長していくのである。 彼女の個別ルートは、それだけで一つの作品として完成しているので、しっかりと時間をとって攻略してみて欲しい。 嫉妬する寧々ちゃんにマーキングされたい © YUZUSOFT / JUNOS INC. All Rights Reserved. 因幡 めぐる 柊史の一つ年下の後輩で、作中でオカルト研究部に所属する一般人。 普段からおしゃれで派手な身なりのために遊んでいる印象だが、内面は天衣無縫の乙女である。 また、ゲームを始め、料理や読書など、インドアで一人でも完結できることを趣味として好む。 事の発端は、入学直後に数日間病欠し、クラスメイトと打ち解ける好機を逃したことにある。 夏休み後も変わらず、オカルト研究部に助けを求めたことで、寧々や柊史と知り合う。 結果的に、柊史が彼女の趣味を知り、ゲームを活用してクラスメイトと打ち解けられた。 しかし、彼女の悩みの根本要因は、人付き合いが下手で、相手との距離の詰め方が分からないことによるものだったのだ。 どうしてこのようになったのかは、個別ルートにて彼女の過去が明かされることで判明する。 また、彼女は、たくさんの友達よりも、親友が一人いれば良い、というスタンスである。 なので、柊史と寧々が、部室で二人だけで会話していたり、アイコンタクトで会話をしていたりすると、嫉妬するのである。 二人から除け者にされたと自分勝手に考えて嫉妬する彼女は、可愛くて微笑ましいので必見。 加えて、慕っている相手には、好きな感情を最大限に振り撒いてべったりな態度を取る子犬系な彼女でもある。 ゆえに、めぐるのような子が彼女だったらなぁ、と夢想してしまう紳士は少なくないであろう。ちなみに、私はそうである。 そして、彼女は、伝説のあいさつ「ちゃろー」を世に生み出した奇才であることを忘れてはいけない。 私も大好きです、めぐるさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 椎葉 紬 作中で柊史と同じクラスに転入して、その後オカルト研究部に所属する魔女。 春風駘蕩で、争いを好まず、一生懸命に頑張る性格である。 魔女契約の代償により、女の子っぽい服装をすればするほど具合が悪くなるようになったため、普段は男装している。 その一方で、本来は可愛くて女の子らしい恰好を好む。 彼女の魔女服は可愛く、本人にとっても普段は着られない可愛い服であるので、とても気に入っている模様。 個別ルートは、彼女のアルプを中心にストーリーが展開されていくため、彼女自身が脚光を浴びることは極端に少ない。 本作において彼女のルートが、アルプが何者であるかをプレイヤーに説明する重要な役割を果たすストーリーであるとは分かる。 しかし、他のヒロインルートと異なり、メインであるはずの彼女の印象が残りにくくなっているのが残念でならない。 それは、彼女のキャラクタライズが不完全で、個別ルート中に乗り越えるべき重大な課題を彼女自身が持っていなかったことが原因の一つであろう。 苦言を呈するような形となってしまったが、もちろん彼女も他ヒロインと同様にしっかりと可愛さを備えているのでご安心を。 彼女は、本作ヒロインの中で最も母性が強いキャラクターであるので、バブみを感じてみたい紳士は是非攻略してみてほしい。 きっと大満足すること間違いないであろう。 紬ちゃんに看病されたいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 戸隠 憧子 柊史の一つ年上の先輩で、学生会長を努める一般人。 共通ルートの途中で学生会を引退してからは、オカルト研究部に所属する。 三年生のアイドル的存在であり、前述の通り綾地寧々と学院の人気を二分するほどの人望を持つ。 温柔敦厚で、洞察力に優れ、気遣い上手だが、人を揶揄うのを好きなお茶目な面もある。 柊史の不思議な力が効かない唯一の人物であり、声をかける度にいつも彼を驚かせている。 個別ルートは、恋愛をテーマとするストーリーとなっている。 彼女は、柊史を見ると安心感を覚えると言い、親近感が沸くようで、二人で一緒に恋の勉強を始めることになる。 その後の「部活（仕事）と私、どっちが大事か？」というお悩み相談に対する考察や回答は、なるほど、そういう考え方もあるのか、と大いに勉強になった。 実際に同じようなことを問われている方は、参考にしてみるのも良いだろう。 ストーリーが進むと、彼女が、自身をつまらなくて中身のない人間であると思い悩んでいることが徐々に露見していく。 加えて、前述の柊史の不思議な力が効かないことや、安心感や親近感を覚えると発言する理由。 実は、これらは全てつながっているので、それが何であるのかは、あなた自身がプレイすることで確かめて欲しい。 なお、本作ヒロインから最も良い女性を選ぶなら誰かと問われた時、迷わず真っ先に彼女の名前を挙げるであろう。 尻に敷かれていることを感じさせずに、手のひらの上で気持ちよく転がされたい、と思っている紳士には是非推したい。 憧子先輩に毎日料理を作って欲しいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 シナリオ 項目 点数 採点基準 世界観 9/10点 設定を上手く活用できているか 構成 9/10点 エピソードやシーンが効果的で破綻ないか 演出 8/10点 読み手を惹きつける表現を演出しているか 合計 26/30点 本作は、全ての個別ルートで魔女や魔法を軸にしてストーリーが展開されており、非常に完成度の高い仕上がりとなっている。 寧々ルートに対する力の入れ具合もさることながら、他ヒロインルートも涙腺が緩む展開を始め、プレイヤーを満足させる演出がしっかりできていて、読後感が良好である。 しかし、めぐるルートの最後半の展開が間延びしているように感じることや、紬ルートにおける納得感の低いストーリーと演出が、減点要因である。 これらは非常に惜しいと言わざるを得ないが、ゆずソフトの作品の中では、間違いなく最高クラスのシナリオであろう。 グラフィック 項目 点数 採点基準 クオリティ 10/10点 CG及びSDの画力が安定しているか ボリューム 10/10点 CG及びSDの枚数・差分がどれだけあるか 合計 20/20点 本作もいつも通り、むりりん先生・こぶいち先生のCGと、こもわた遙華先生のSDも、文句なしの満点。 キャラクター 項目 点数 採点基準 作り込み 8/10点 新奇性や個性の強さがどれくらいか ボイス 10/10点 キャラデザとの主観的な一致度があるか 合計 18/20点 ボイスに関しては、キャラクターとCVが完全にマッチしていてイメージ通りであった。 一方、キャラクターの作り込みについては、めぐるに関しては完璧である。 しかし、他のヒロインはそうとは言えず、惜しいところがあった。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム 項目 点数 採点基準 音楽 9/10点 良いOP、ED、BGMか 動画 9/10点 OP、EDの出来の良さ システム 8/10点 システムの快適性 合計 26/30点 OP「恋せよ乙女！」は、攻略前でも素晴らしい曲であるが、攻略後に聴きなおすと歌詞も含めて神曲であることが分かるであろう。 しかし、コーラス入りのBGMが、プレイ中に気になり集中を削ぐことがあったので、音楽の減点要素となった。 システムは、フローチャート機能がある近年の作品をプレイしてしまうと、快適性に少々不足を感じるのでこの点数をつけた。 総論 評点 90点（秀/AA-ランク） コメント ゆずソフトの作品の中でもトップクラスの出来であると評しても過言ではなかろう。 キャラゲーよりもシナリオゲーの方が好きな人にも、自信を持っておすすめできる逸品である。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 サノバウィッチ【萌えゲーアワード2015 キャラクターデザイン賞 受賞】【こちらの商品は修正パッチ Ver.1.21を適用済です】━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…保科柊史は、とある秘密を抱えていた。それは『他人の気持ちを感じ取れ... Steam 全年齢版 Sabbat of the Witch on SteamHoshina Shuuji has a secret: He has a mysterious power that allows him to perceive the emotions of others. However, he is soon to find out t...","link":"/articles/sabbat-of-the-witch-review/"},{"title":"Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう","text":"ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今回は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタを提供します。 はじめに この記事は、mediba Advent Calendar 2023 の22日目にエントリーしています。 この記事を書いている人 KDDI の子会社である mediba でテックリードをしている雑食系雑用エンジニア。 インフラ、フロントエンド、バックエンド、SRE、CI/CDなどプロダクトに必要な役割は、何でもやる人です（注：バックエンドが本職）。 この記事が投稿される頃は、忙しすぎて死にそうになっているでしょう。誰か私を救ってくれ。 この記事の存在意義 読者様が、この記事をひと通り読んだ後に Hexo.js + GitHub Pages のブログを作成できるようになっていること。 もしくは、この記事を読みながらブログを作成できること。 この記事を推したい読者様 この記事を読んで嬉しくなる読者様は、以下のような方を想定しています。 一般的なブログサービスを使わずに、自分の力だけでブログを開設したい人 メンテナンスやセキュリティ等の宗教上の理由で、WordPress を採用したくない人 カスタムドメインを使ったり、ブログを自由自在にカスタマイズしたり等、やりこみたい人 この記事が生まれたきっかけ 書いた「RIDDLE JOKER」のレビューを投稿する場所と方法を探していたことがきっかけです。 作中のスクショを張りたかったことと、R18 指定のゲームだったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。 GitHub Pages で静的サイトホスティングができることは知っていたので、場所はすぐに決まりました。 あとは、ブログに必要なウェブページ一式を生成するジェネレーターを探すだけでした。 紆余曲折あって、Hexo.js に辿り着き、これを使うことにしました。 こうして、このブログが Hexo.js + GitHub Pages で爆誕し、さらにこの記事が生み出されることとなったのです。 なお、Hexo と書かれていると、ヘクソと読みがちですが、ヘキソの読みが正しいようです。 ぶっちゃけ、どっちでも伝わるとは思うので、どっちの呼び方でも良いと思います。 手元でブログを作ろう 御託を並べる暇があったら、早く作成手順を見せろ、とそろそろ言われそうなので、構築実践編に移りましょう。 まずは、手元でブログを作って、ローカル環境のパソコン内で動かしてみます。 ローカル環境整備 Node.js のバージョン管理ツールをインストールしておくと楽です。 ・Windows =&gt; nvm-windows をインストール。 ・Mac または Linux =&gt; お好きなツールをインストール。 Git はインストール必須です。 ・Windows =&gt; Git for Windowsを公式サイトからダウンロードし、インストール。 ・Mac =&gt; HomeBrew 等でインストール。 ・Linux =&gt; apt-get や yum でインストール。 (1) Node.js 最新版インストール Node.js のバージョン管理ツールから最新版をインストールします。 大抵のツールは、インストール後にバージョン切り替えをしないので、自分でインストールしたバージョンに変更するコマンドを実行してください。 その後、node -vコマンドで、最新バージョンに切り替わっていることを確認してください。 npm を最新バージョンに更新します。 (2) hexo-cli インストール npm 経由で、hexo-cli をインストールします。 terminalnpm install -g hexo-cli ブログセットアップ (1) ブログ一式を作成 以下のコマンドで、&quot;blog&quot;ディレクトリ配下にブログ一式を作成します。 &quot;blog&quot;は、任意の名前に変えても大丈夫です。 terminalhexo init blog (2) npm install &quot;blog&quot;ディレクトリ(※)に移動し、npm installコマンドを実行します。 (※) 任意の名前で作成した場合、&quot;blog&quot;を読み替えてください。 terminalcd ./blog npm install これだけでブログのセットアップは完了です。ね？簡単でしょ？ では、下記のコマンドを実行してセットアップしたブログを表示してみましょう！ Windows で下記のコマンドを実行するには、&quot;PowerShell 7.x&quot;が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 terminalnpm run clean &amp;&amp; npm run server コマンド実行時にログにも出ますが、Ctrl+C で Hexo サーバーを止められます。 カスタムテーマ導入 初回セットアップ時のデフォルトテーマは、landscape テーマというものです。 最低限のことはできるのですが、見た通りデザインがイケてません。オシャレ感が足りません。 そんな人のために、Hexo公式から有志が作成したテーマを検索できるようになっています。 検索してみるとたくさんあって悩みますが、私の一番のおすすめは Icarus テーマです。 Icarus テーマの公式ドキュメントにインストール手順があるので、導入してみてください。 npm installで導入した場合は、フォントを変更できません（不可能ではないが非推奨）。 git cloneする方法、または、GitHub から Download zip する方法で導入することを推奨します。 Icarus テーマの最新版 v5.x は、Hexo v6.x ベースで作成されています。 そのため、ブログ側の Hexo を最新版の v7.x ではなく v6.x にすると、互換性に関わる問題が発生しにくいでしょう。 私は念のため、Hexo v7.x をnpm uninstallした後に、Hexo v6.x をnpm installしました。 ブログ設定を整える 手元で確認した時に「ブログのタイトルを変えてぇなぁ」等、思った方はいらっしゃると思います。 &quot;blog&quot;ディレクトリ(※)直下に、ブログの設定ファイルがあるので、その中身を良い感じに書き換えていきましょう。 (※) hexo initコマンド実行時に、任意の名前で作成した場合、&quot;blog&quot;をそれに読み替えてください。 _config.yml# Site title: ブログタイトル subtitle: '' # 使われないテーマでは設定不要 description: 'サイトの説明文 は、こんな 感じで書けます。' keywords: 'Key,word' author: author language: ja timezone: Japan # Asia/Tokyo 表記でも可 # URL url: https://username.github.io/ # usernameは、GitHubのユーザー名に書き換える permalink: articles/:title/ # デフォルトでも良い方は変更不要 # Writing new_post_name: :year_:month_:day_:title.md # 日付が接頭辞にあると見やすいです（オススメ） post_asset_folder: true # 記事ごとに画像ファイルを配置したいならtrue 上記に抜粋した設定項目は、必要最低限の変更した方が望ましい箇所です。 他の設定については、Hexo公式ホームページに設定に関する詳細説明がまとめられているので、そちらをご確認ください。 試しに記事を書いてみる ブログは記事がなければ何も始まらないので、さっそく作りましょう。 Hexo で記事を作成するには、以下のコマンドを実行します。 記事名（コマンド中の article-name 部分）は、自由に入力してかまいません。 terminalhexo new post &quot;article-name&quot; 記事は、&quot;source/_posts&quot;ディレクトリ直下に、MarkDown 形式のファイル（コマンド通りに実行した時は、“2023_12_22_article-name.md”）が生成されます。 このファイルを開いてみると、中身はこんな感じになっています。 source/_posts/2023_12_22_article-name.md--- title: article-name date: 2024-12-22 09:00:00 tags: --- ---で囲まれた部分を&quot;Front Matter&quot;と呼び、Hexo では記事のメタ情報を記載する場所です。 &quot;title&quot;は、記事タイトルに使われるので、ここを任意の日本語に変えちゃいましょう。 他にも、テーマによってはカスタムフィールドがあります（例：Icarus テーマなら、&quot;thumbnail&quot;や&quot;cover&quot;等）ので、お好みで設定してください。 そして、ブログの本文は、&quot;Front Matter&quot;の後に記述します。 実際の記事の執筆は、下記のように&quot;Front Matter&quot;に色々と設定したり、本文を書いたりします。 なお、本文中に&lt;!-- more --&gt;を入れると、その位置に「続きを読む」ボタンを差し込めます。 source/_posts/2023_12_22_article-name.md--- title: Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう date: 2023-12-22 09:00:00 updated: 2023-12-22 09:00:00 tags: - フロントエンド - Hexo - GitHub Pages - Advent Calendar category: Technology --- ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今年は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタで提供させていただきます。 &lt;!-- more --&gt; ## はじめに その他カスタマイズする ここまでの手順で、ブログとしてはほぼ完成しています。 Icarus テーマを導入した方は、日本語の表示時フォントが&quot;Microsoft YaHei&quot;になっています。 見慣れているフォントに変えたいなら、フォント設定に関する処理を書き換えると変更できます（※前項「カスタムテーマ導入」の注意事項を読んでください）。 やり方については、「Hexoのicarusテーマのフォントの変え方」や「HEXO の表示フォントを変更」をまねてみると良いでしょう。 あとは、テーマのデザインを弄ったり、プラグインを入れたりなど、皆様のお好みでどうぞ。 リンクプレビュー機能を導入したい方は、私がプラグインを作ってみたので、以下の記事も併せて読んでみてください。 hexo-tag-ogp-link-previewの公開に纏わる閑話2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。 本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛... ブログをお外に公開しよう さて、手元で表示しているブログが満足する出来になって、そろそろお外に公開したくなってきた頃かと思います。 このまま、公開実践編の手順に進みましょう。 公開用レポジトリ作成 GitHub のアカウントはあらかじめ作成してください。 無料で使いたい場合は、パブリックレポジトリにする必要があります。 自分のアカウントを使って、GitHub Pages 用のレポジトリを作成します。 画像付きの作成手順がGitHub公式ドキュメントにまとめられていますので、ご確認ください。 作成後に、Git コマンド等のツールを使用して、そのレポジトリを手元にチェックアウトします。 それから、構築実践編で作成した&quot;blog&quot;ディレクトリ(※)の中身を丸ごと、チェックアウトした公開用レポジトリのディレクトリ直下にコピーしましょう。 (※) hexo initコマンド実行時に、任意の名前で作成した場合、&quot;blog&quot;をそれに読み替えてください。 ちなみに、この手順を行ってから、構築手順を行うこともできます。 デプロイ設定 デプロイの設定は、ブログの設定ファイルにあります。下記のように書き換えましょう。 _config.yml# Include / Exclude file(s) include: - '.nojekyll' exclude: ignore: # ... 途中省略... # Deployment deploy: type: git repo: https://github.com/octocat/octocat.github.io # 「octocat」（2ヶ所）は、ご自身のアカウントIDに変更してください。 branch: gh-pages ignore_hidden: public: false その後は、チェックアウトした公開レポジトリのルートディレクトリ配下の source ディレクトリ直下に&quot;.nojekyll&quot;ファイルを作成しましょう。 これでデプロイの設定は完了です。デプロイする前に、次のセクションの「下書き記事を使いこなす」をよく読んでください。 下書き記事を使いこなす hexo new postコマンドで作った記事は、公開状態の投稿記事になります。 ということは、ブログをお外に公開すると、今後は「書きかけの記事が投稿されちゃった」事故が起こりえます。 非公開状態の下書き記事として作成するコマンドもありますので、それを使えば事故を防げます。 次のコマンドで、下書き記事を作成します。 terminalhexo new draft &quot;article-name&quot; ただし、下書き記事は、手元で Hexo サーバーを起動しても、初期状態のままだとブログの記事として表示できません。 &quot;package.json&quot;にある scripts の&quot;server&quot;コマンドに手を加える必要があります。 package.json（※コピーせず、ご自身の手で修正してください）&quot;scripts&quot;: { &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server --drafts&quot; // 「 --drafts」を後ろに追加 }, このあとは、通常通り Hexo サーバーを起動させるだけです。 terminalnpm run clean &amp;&amp; npm run server さて、上記の手順は、あくまで手元で表示できるようにしただけであって、お外では依然として下書き記事が非公開状態として扱われます。 前述の通り、投稿記事は公開状態として扱われるので、下書き記事を投稿記事に変換しましょう。 下記のコマンドを実行することで実現できます。 terminalhexo publish &quot;article-name&quot; GitHub Pages にデプロイ それでは、準備も整ったと思いますので、GitHub Pages にデプロイしましょう！ デプロイは下記のコマンドを実行するだけで終わります。 Windows で下記のコマンドを実行するには、&quot;PowerShell 7.x&quot;が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 terminalnpm run clean &amp;&amp; npm run deploy カスタムドメイン登録 GitHub Pages のデフォルトドメインは、アカウントID.github.ioとなるため、嫌な人もいるでしょう。 もちろん、カスタムドメインを無料で登録することもできます。 詳細については、GitHub公式ドキュメントの説明にお任せします。 ただし、カスタムドメインの取得自体はご自身でやる必要がありますので、ドメインを取得できるサービスをご利用ください。 ドメインだけ取りたいなら、お名前ドットコムがオススメです。 検索できるようにしよう ここまできたらあと少しで終わりです。お外に公開したブログを検索できるようにしてみましょう。 Google Analytics 登録 所有者確認のみしたい場合は、この手順はスキップしても問題ありません。 お外に公開したブログのアクセス解析と、“Google Search Console”（以下、GSC）の所有者確認のために、“Google Analytics”（以下、GA）にアカウントを作成します。 アカウント作成は、GoogleのAnalyticsページから行ってください。 単語がよくわからなかったり、手順は面倒だったりしますが、作業自体はそれほど難しくはないので、ここでの説明は省きます。 Google 検索すると、詳しく説明してくれている方たちがいますので、彼らのページを見ることをオススメします。 サイトマップ作成 ブログに書いた記事を、GSC に認知してもらうためにサイトマップを作成します。 もちろん手作業で作る必要はなく、Hexo 公式がhexo-generator-sitemapプラグインを用意しているので、それをインストールしましょう。 terminalnpm install hexo-generator-sitemap インストールが終わったら、ブログの設定ファイル&quot;_config.yml&quot;を開いて、サイトマップ作成用の設定を追加します。 _config.yml# Sitemap sitemap: path: - sitemap.xml tags: false categories: false 設定はこれだけでOKです。デプロイコマンドを実行する度に、Hexo がブログのサイトマップを作って、GitHub Pages にデプロイしてくれるようになります。 Google Search Console 登録 GSCにブログの登録（または、プロパティ追加）を行います。 登録を行うことで、Google 検索結果にインデックスを作成できます。 はじめに所有者確認を行う必要がありますので、GA・HTML ファイル・HTML タグ・Google タグマネージャー・ドメインの5つの中から確認方法を選んでください。 前述の手順で GA 登録を行っている方は、GA を選ぶと良いでしょう。それ以外の方は、HTML タグか、ドメインのどちらかで確認を行うのがオススメです。 なお、HTML ファイルでの確認方法は、Hexo が自動でテンプレートを適用して表示してしまい、Google が確認できないため、使用不可能です。 所有者確認が済んだ後に、作成したサイトマップの登録を行います。数日後にクロールしてくれるかもしれません（※私はされなかった）。 ちなみに、後日「検出 - インデックス未登録」とされた場合は、未登録ページの一覧が見られますので、一つずつインデックス登録してあげましょう。 おわりに とても楽にブログを作れるし、カスタマイズも簡単だし、さらに無料でホスティングできるとは、便利な世の中になったものだなぁ（小並感）。 私は、十数年前の学生時代に、さくらインターネット + WordPress でブログを作っていましたが、このようになるとは露程も思っていませんでした。 イマどきホスティングでブログを作ろうなんて酔狂な人は少ないかもしれませんが、機会があれば是非参考にしてみてください。 あぁ、早く仕事片付かないかなぁ。千恋万花プレイしたいなぁ。","link":"/articles/start-hexo-blog-in-github-pages/"},{"title":"hexo-tag-ogp-link-preview v1.1.0 更新内容の解説","text":"2023年12月26日（火）、Hexo 用タグプラグイン hexo-tag-ogp-link-preview v1.1.0 のアップデートを公開しました。 今回は、README.md に書いていないアップデート内容の解説とリリースの小噺を書き綴ります。 プラグインの紹介 hexo-tag-ogp-link-previewについては、前回の初回リリース記事にまとめています。 どんなプラグインか、どうして開発に至ったかを説明していますので、気になった方は是非ご拝読ください。 アップデート内容の解説 今回のアップデートで、以下の3つの新機能を追加しています。 名前付きパラメータ 画像に代替テキスト追加 ネイティブ遅延読み込み 名前付きパラメータを除いて、PageSpeed Insights にてパフォーマンス・アクセシビリティ・SEO の各監査項目に合格するための改良が主体です。 名前付きパラメータ アップデートを今後も重ねていく上で、名前付きパラメータのサポートは必須でした。 なぜなら、この改修が含まれずに現状のままの場合、指定したいパラメータのために他の全てのパラメータもセットで指定するという現象を、将来的に引き起こす可能性があるからです。 これは、プラグインを利用するユーザーにとって大きなストレスとなります。 ゆえに、記事を書く人のためのユーザビリティと、記事のメンテナビリティを高く保つことを目的として導入したのです。 この機能は、プログラミングに慣れ親しんでいる方であればご存じかと思いますが、それ以外の方のためにも簡単に使い方をご紹介します。 できることをとても大雑把に表現すると、必須ではないパラメータを、名前と値をセットで指定すると、任意の順番で配置できるという機能です。 より分かりやすいように実例を示します。 あなたは、自分が設定したリンクプレビューに対して、rel=&quot;noreferrer&quot;とloading=&quot;eager&quot;を指定したいと考えた、としましょう。 その時、この機能があることで、次のような書き方ができるのです。 rel:noreferrer, eager:loading の書き方{% link_preview https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/ loading:eager rel:noreferrer %} hexo-link-preview-npm-publish の記事 {% endlink_preview %} プラグインのパラメータは、url、target、rel、loading の順で書くのが通常です。 なんと、この機能によって、target を省略して、rel や loading の値を指定できるのです（※上記例の場合、target はデフォルト値の _blank になります）。 そして、実際の記事では、以下のようなHTMLが生成されます。 生成されるHTMLのイメージ&lt;a href=&quot;https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; class=&quot;link-preview&quot;&gt; &lt;div class=&quot;og-image&quot;&gt; &lt;img src=&quot;https://blog.chaotic-notes.com/images/technology_programming_title.webp&quot; alt=&quot;hexo-tag-ogp-link-previewの公開に纏わる閑話&quot; loading=&quot;eager&quot;&gt; &lt;/div&gt; &lt;div class=&quot;descriptions&quot;&gt; &lt;div class=&quot;og-title&quot;&gt;hexo-tag-ogp-link-previewの公開に纏わる閑話&lt;/div&gt; &lt;div class=&quot;og-description&quot;&gt;2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛も...&lt;/div&gt; &lt;/div&gt; &lt;/a&gt; 便利な機能ですので、是非ご活用ください。 画像に代替テキスト追加 これを新機能として取り扱っていますが、実質的には不具合修正となります。 プラグイン作成の参考としたhexo-tag-link-previewで、イメージエレメントに対して alt 属性が無かったため、そのまま見落としていました。 このブログを PageSpeed Insights で監査し、アクセシビリティ・SEO の項目で検知されたことで、ようやく気が付いたのです。 修正自体はすぐでしたので、今回のバージョンに取り込ませて頂きました。 この改修により、プラグインを利用している方が、特別な対応をする必要はありません。 プラグインをアップデートしてから記事を再生成すれば、リンクプレビュー画像に代替テキストが付与されるようになります。 PageSpeed Insights のアクセシビリティ・SEO の改善にご利用ください。 ネイティブ遅延読み込み ネイティブ遅延読み込みは、今回のアップデートの目玉機能として位置付けています。 プラグインは、OpenGraph プロトコルの og:image の値から画像の URL を取得します。 取得した URL 先の画像は、圧縮率の悪いフォーマットであったり、横 1200 ピクセルに縦 630 ピクセルの巨大なサイズであったりすることもあります。 その一方で、リンクプレビューは、重要度の高いコンテンツとして取り扱うことは多くありません。 なぜなら、ブログのドキュメント内でビジュアルリッチな引用の用途であることがほとんどだからです。 初期バージョンで生成したリンクプレビューは、上述のようにページに対して、低い重要度にも関わらず、高い影響度を持つという、ギャップを抱えていました。 この状態だと、ページ読み込み時、ブラウザにリンクプレビュー画像のダウンロードとレンダリングを優先させます。そう、すぐに必要でないにも関わらず、です。 これは、リンクプレビューを使用したページの First Contentful Paint や Largest Contentful Paint の速度に悪い影響を齎します。 実際にこのブログでは、「RIDDLE JOKER」のレビューや「サノバウィッチ」のレビューが、その影響を多大に受けました。 これらのページに様々なチューニングを施しても、ついにパフォーマンススコアが90点を超える機会を得ることはできなかったのです。 以上より、優先的に解決するべき課題だと認識したため、今回のアップデートに組み込みました。 この機能も、プラグインアップデート後に特別何かする必要はありません。 記事を再生成すれば、&quot;lazy&quot;の値を持つ loading 属性が、リンクプレビュー画像に自動で付与されます。 もちろん、遅延読み込みをしたくない方もいらっしゃるでしょうから、ブラウザの規定動作となる&quot;eager&quot;も用意してあります。 加えて、初期バージョンとの後方互換性を維持する目的で、loading 属性を消す&quot;none&quot;も利用できます。 ご自身のシーンや状況にあわせて、ご使用いただければ幸いです。 リリース小噺 リリースに四回失敗した プラグインのプロジェクトでは、Markdown 形式でマイルストーンの説明文を記載していて、リリースパブリッシュ時に使用しています。 この時の GitHub Actions ワークフローで、toJSON 関数によりマイルストーンの説明文を取得します。 しかし、この関数は、特殊文字をエスケープ処理しない仕様です（数年間使用していたけど、このパターンに遭遇したことがなかったため、今まで知らなかった）。 そのため、そのトラップに上手く嵌り、リリースできない事件が発生。 とはいえ、ワークフローはアプリケーションのリリースに影響を及ぼすものではないため、今回は手動でリリース発行しました。 GitHub Actions 等の CI/CD ツールってこういうの良くあるんですよねぇ、っていう愚痴でした。 今後のアップデート予定 次のマイナーバージョンであるv1.2.0では、エラーハンドリングとリトライ処理を中心としたアップデートを行う予定です。 また、初回リリース記事でアップデート予定に記載した「固定class名に接頭語を付与」する機能も、新機能として追加します。 これにより、リンクプレビューごとにデザイン調整を行えるようになりますので、次のバージョンまで気長にお待ちいただければと思います。 ここまでご覧いただきありがとうございました。 次回のマイナーアップデート後も今回と同様の解説記事を投稿予定なので、その時はどうぞよろしく。","link":"/articles/update-hexo-link-preview-plugin-v1-1-0/"},{"title":"「目蒲線物語」の歌詞から鉄道の今昔の変遷を見る","text":"「目蒲線物語」という最強の鉄道ネタソングがあります。 世の中にはこんな曲があるのかと、始めて聴いた時の衝撃は、今でも忘れられません。 その曲中に登場する鉄道の今昔の変遷に興味が沸いたので、調べてまとめてみました。 はじめに 「目蒲線物語」は、1983年に発売された、コミックソングと呼ばれるジャンルの曲です。 発売された時期が最近であったら、東急・東武・JR・それらの利用者から苦情が出て、ネットなど方々で炎上しそうな皮肉たっぷりの歌詞です。 とはいえ、昭和後期の鉄道事情を考察するための良い資料に成り得るかもしれません。 なので、今昔の変遷を調べるだけではなく、皮肉たっぷりのコミカルな歌詞と照らし合わせながら、その真偽も確かめてみようと思います。 目蒲線の今昔 東急目蒲線 （せりふ） ぼくの名前は東急目蒲線 父さんは東急東横線 母さんは東急田園都市線 そしてぼくに弟が出来た 東急新玉川線 父さん母さんにそっくりのシルバーメタリックの 綺麗な電車だ！ それに比べてこのぼくは 草色の醜い３両編成・・ （♪） ぼくの名前は目蒲線 さみしい電車だ目蒲線 あっても無くてもどうでもいい目蒲線 だけどプライドはあるんだよ 田園調布を走ってる～ けど 田園調布の人はみんな東横線を使う 東急から～見放～され 今時クーラーも付いてな～い 夏は暑くてサウナ～風呂 そのくせ冬は冷～蔵～庫 出典：ざ・目蒲線物語 東急目蒲線は、目黒駅（東京都品川区）から蒲田駅（東京都蒲田駅）までを結ぶ、過去に存在した東急電鉄の鉄道路線です。 この路線は、東急電鉄の母体であった目黒蒲田電鉄が、洗足田園都市のための交通機関として、最初に開業させた歴史ある路線でした。 それから時を経た昭和後期に、東横線の混雑緩和対策として、目蒲線目黒駅・多摩川駅間のバイパス路線整備計画が立案・実行されます。 これが結実した2000年の夏に、目蒲線は、目黒駅・多摩川駅間の目黒線と、多摩川駅・蒲田駅間の多摩川線の二つに分離されました。 1980年頃は、草色の三両編成の運用だったようです（※本記事のカバー画像）。 その車両に冷暖房装置はなく、車内のアコモデーションレベルは最低クラスでした。 過去にタイムスリップすることがあっても、夏や冬の目蒲線には乗りたくないですね。 ちなみに、夏に冷房がない車内を追体験したいのであれば、山万ユーカリが丘線がおすすめです。 1980年頃の在りし日の目蒲線 東急目黒線 前身である東急目蒲線の目黒駅から多摩川駅までの間を受け継いだ鉄道路線です。 目蒲線の分割時に、武蔵小杉駅（神奈川県川崎市中原区）まで、その後の2008年に、日吉駅（神奈川県横浜市港北区）まで延伸。 現在は、北は東京メトロ南北線・埼玉高速鉄道線と都営地下鉄三田線、南は相鉄線と直通しています。 目黒線は、東横線や田園都市線に次ぐ主力級の路線として大成長を遂げました。 東急の主力級路線として大出世した目黒線 東急多摩川線 前身である東急目蒲線の蒲田駅から多摩川駅までの間を受け継いだ鉄道路線です。 大出世を果たした目黒線とは打って変わって、目蒲線時代の都心のローカル線という性質を色濃く受け継いでいます。 多摩川線は、延伸もなく、他社路線直通もないため、車両が新しくなったことを除けば、今も昔も変わらないままといえましょう。 都心のローカル線であり続ける多摩川線 他の鉄道路線の今昔 このセクションでは、「目蒲線物語」に出演する兄「東急池上線」、父「東武東上線」、母「赤羽線（埼京線）・南武線」を登場順に説明します。 歌詞中に一瞬だけ名前が出る、東急東横線、東急田園都市線、東急新玉川線、東急世田谷線の4路線に関しては触れませんので、ご了承ください。 兄 東急池上線 （兄） おまえの兄貴 東急池上線だ おまえはまだいいぞ 目黒から出ている 俺なんかおまえ 五反田だ五反田（ポヨヨ～ン） 出典：ざ・目蒲線物語 東急池上線は、五反田駅（東京都品川区）から蒲田駅（東京都大田区）までを結ぶ、東急電鉄の鉄道路線です。 この路線は、池上本門寺の参詣客輸送を目的に、目黒から池上を経て大森へ至る計画で、池上電気鉄道が開業させました。 池上線の全線開業までの道のりは、遠く厳しかったようです。 池上電気鉄道は、大森付近での用地取得の難航、資金難による目黒駅からの建設難航、支援者の私物化の問題を、創業時から抱えます。 そうこうしている内に、目黒蒲田電鉄が、目黒駅・蒲田駅間を結ぶ目蒲線を全線開業。 目黒駅から五反田駅へ起点変更を余儀なくされながらも、池上線は全通を果たします。 しかし、その頃には目黒蒲田電鉄に経営地盤で後塵を拝しており、最後は買収と相成りました。 また、戦後の一時期、泉岳寺線（桐ケ谷駅・三田線泉岳寺駅間）を新規開業し、三田線と計画線の東武高島平線を経由し、東上線に直通する計画がありました。 この計画が遂行されていたら、池上線が東急の主力級路線に成長していたかもしれません。 そのまま白紙となり、今では三田線は目黒線と直通し、池上線にとっては泣きっ面に蜂状態です。 歌詞に登場する路線で、目蒲線（目黒線）により数多の困難に見舞われた悲劇の路線です。 東急池上線を目蒲線の兄とした理由は、蒲田駅を始発駅としているからでしょう。 けれども、歴史を紐解けば、なんという皮肉でありましょうか。 現在では、既に今は昔のことなのか、弟の半身の東急多摩川線と新型車両を仲良く共用しています。 数多の困難に見舞われた悲劇の池上線 父 東武東上線 （目） 駅が５つか６つ過ぎると全～部埼玉になってしまう あの東武東上線？ 忘れ物にクワとスコップがいちばん多いという 東武東上線？ 出典：ざ・目蒲線物語 東武東上線は、池袋駅（東京都豊島区）から寄居駅（埼玉県大里郡寄居町）までを結ぶ、東武鉄道の鉄道路線です。 下り始発の池袋駅から見て埼玉県で最初の駅は、和光市駅です。 この駅までは、北池袋、下板橋、大山、中板橋、ときわ台、上板橋、東武練馬、下赤塚、成増と、9駅通過する必要があります。 これらの駅は、第二次大戦前に全て開業済みであり、1980年前後と2024年前後で変わりません。 そのため、だいぶ悪い方に誇張された歌詞であることが分かります。 また、第二次大戦後の食糧不足で、川越地方にあるサツマイモ畑に人々が買い出しに押し寄せたことから、東武東上線は「いも電車」の愛称で呼ばれていました。 これにより、「沿線民は農家」という連想を経て、「忘れ物にクワとスコップがいちばん多い」という歌詞が生み出されたのではないか、と推測できましょう。 バカにされるほどローカルじゃない東上線 母 赤羽線・JR埼京線 （母） 母さん余った電車で繋ぎ合わされているから 赤だの黄色だの緑だのってバランバラン （目） ぼくの本当の母さんって誰なの？ （母） 赤羽線よ （目） えっ あの池袋の駅を出ると板橋 十条 赤羽の たった４つしか走ってないという あの赤羽線 出典：ざ・目蒲線物語 国鉄赤羽線は、JR埼京線の前身となる鉄道路線です。 当初は山手線でしたが、山手線が環状運転を開始し、運行系統が変化したことで誕生します。 池袋、板橋、十条、赤羽の4駅だけの短い路線で、1985年に川越線直通の埼京線が開業するまで、赤羽線と呼ばれました。 この路線は、山手線の支線という立ち位置であり、投資のウェイトが低かったことから、つぎはぎな混色編成が見られたのではないかと思います。 これは今でいうと、色々な路線からお下がりの電車を貰う武蔵野線のようなポジションでしょうか。 現在では、新車が導入されて、混雑率が140%前後となる重要な路線に成長しており、東急目黒線と同じく出世した路線と言っても過言ではありません。 さて、この歌詞の中で今でも変わっていないことがあります。それは「バランバラン」なことです。 どういうことかというと、埼京線は、山手線、赤羽線、そして東北本線を繋ぎ合わせたものだからです。 なので、今は、路線を走る電車ではなく、電車の走る路線が「バランバラン」なのです。 電車の走る路線が「バランバラン」な埼京線 母 南武線 （せりふ） そして継ぎ接ぎだらけの母さんは休みの日 目黒に方に遊びに行ったのですが 道に迷って川崎の方まで行ってしまい 後に母さんは継ぎ接ぎだらけの電車 南武線になってしまったそうです 出典：ざ・目蒲線物語 南武線は、川崎駅（神奈川県川崎市川崎区）から立川駅（東京都立川市）までを結ぶ鉄道路線です。 古くは茶色の旧型国鉄電車が走っていましたが、1980年前後から歌詞にあるように他路線から転入した電車が走るようになります。 それからは同じように他路線から転入した電車をお下がりで使っていましたが、2014年秋頃から新車が導入されました。 もう他路線のお下がり電車ではない南武線 おわりに ひとこと ひと昔前に「あっても無くてもどうでもいい」と歌われた目蒲線は、今では「なくてはならない重要な」目黒線に大成長しました。 参考文献 本記事は、下記の文献を参考に作成しています。 東急目蒲線 東急目蒲線 - Wikipedia 目黒蒲田電鉄 - Wikipedia 洗足田園都市 - Wikipedia 東急目黒線 目黒線路線情報｜東急電鉄 東急目黒線 - Wikipedia 東急多摩川線 東急多摩川線路線情報｜東急電鉄 東急多摩川線 - Wikipedia 東急池上線 池上線路線情報｜東急電鉄 東急池上線 - Wikipedia 池上電気鉄道 - Wikipedia 東武東上線 東武東上線｜東武鉄道公式サイト 東武東上本線 - Wikipedia 国鉄赤羽線（JR埼京線） 赤羽線 - Wikipedia 埼京線 - Wikipedia 国鉄南武線（JR南武線） 南武線 - Wikipedia","link":"/articles/look-past-and-present-from-mekamasen-story/"}],"tags":[{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"解説","slug":"解説","link":"/tags/%E8%A7%A3%E8%AA%AC/"},{"name":"PCゲーム","slug":"PCゲーム","link":"/tags/PC%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"美少女ゲーム","slug":"美少女ゲーム","link":"/tags/%E7%BE%8E%E5%B0%91%E5%A5%B3%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"ゆずソフト","slug":"ゆずソフト","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","link":"/tags/GitHub-Pages/"},{"name":"レビュー","slug":"レビュー","link":"/tags/%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"},{"name":"小ネタ","slug":"小ネタ","link":"/tags/%E5%B0%8F%E3%83%8D%E3%82%BF/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Link Preview","slug":"Link-Preview","link":"/tags/Link-Preview/"},{"name":"Advent Calendar","slug":"Advent-Calendar","link":"/tags/Advent-Calendar/"},{"name":"鉄道","slug":"鉄道","link":"/tags/%E9%89%84%E9%81%93/"},{"name":"歴史","slug":"歴史","link":"/tags/%E6%AD%B4%E5%8F%B2/"}],"categories":[{"name":"Technology","slug":"Technology","link":"/categories/Technology/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Miscellany","slug":"Miscellany","link":"/categories/Miscellany/"},{"name":"Frontend","slug":"Technology/Frontend","link":"/categories/Technology/Frontend/"},{"name":"Review","slug":"Game/Review","link":"/categories/Game/Review/"}],"pages":[]}