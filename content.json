{"posts":[{"title":"「目蒲線物語」の歌詞から鉄道の今昔の変遷を見る","text":"「目蒲線物語」という最強の鉄道ネタソングがあります。 世の中にはこんな曲があるのかと、始めて聴いた時の衝撃は、今でも忘れられません。 その曲中に登場する鉄道の今昔の変遷に興味が沸いたので、調べてまとめてみました。 はじめに 「目蒲線物語」は、1983年に発売された、コミックソングと呼ばれるジャンルの曲です。 発売された時期が最近であったら、東急・東武・JR・それらの利用者から苦情が出て、ネットなど方々で炎上しそうな皮肉たっぷりの歌詞です。 とはいえ、昭和後期の鉄道事情を考察するための良い資料に成り得るかもしれません。 なので、今昔の変遷を調べるだけではなく、皮肉たっぷりのコミカルな歌詞と照らし合わせながら、その真偽も確かめてみようと思います。 目蒲線の今昔 東急目蒲線 （せりふ） ぼくの名前は東急目蒲線 父さんは東急東横線 母さんは東急田園都市線 そしてぼくに弟が出来た 東急新玉川線 父さん母さんにそっくりのシルバーメタリックの 綺麗な電車だ！ それに比べてこのぼくは 草色の醜い３両編成・・ （♪） ぼくの名前は目蒲線 さみしい電車だ目蒲線 あっても無くてもどうでもいい目蒲線 だけどプライドはあるんだよ 田園調布を走ってる～ けど 田園調布の人はみんな東横線を使う 東急から～見放～され 今時クーラーも付いてな～い 夏は暑くてサウナ～風呂 そのくせ冬は冷～蔵～庫 出典：ざ・目蒲線物語 東急目蒲線は、目黒駅（東京都品川区）から蒲田駅（東京都蒲田駅）までを結ぶ、過去に存在した東急電鉄の鉄道路線です。 この路線は、東急電鉄の母体であった目黒蒲田電鉄が、洗足田園都市のための交通機関として、最初に開業させた歴史ある路線でした。 それから時を経た昭和後期に、東横線の混雑緩和対策として、目蒲線目黒駅・多摩川駅間のバイパス路線整備計画が立案・実行されます。 これが結実した2000年の夏に、目蒲線は、目黒駅・多摩川駅間の目黒線と、多摩川駅・蒲田駅間の多摩川線の二つに分離されました。 1980年頃は、草色の三両編成の運用だったようです。 その車両に冷暖房装置はなく、車内のアコモデーションレベルは最低クラスでした。 過去にタイムスリップすることがあっても、夏や冬の目蒲線には乗りたくないですね。 ちなみに、夏に冷房がない車内を追体験したいのであれば、山万ユーカリが丘線がおすすめです。 在りし日の冷暖房なし草色三両編成の目蒲線 東急目黒線 前身である東急目蒲線の目黒駅から多摩川駅までの間を受け継いだ鉄道路線です。 目蒲線の分割時に、武蔵小杉駅（神奈川県川崎市中原区）まで、その後の2008年に、日吉駅（神奈川県横浜市港北区）まで延伸。 現在は、北は東京メトロ南北線・埼玉高速鉄道線と都営地下鉄三田線、南は相鉄線と直通しています。 目黒線は、東横線や田園都市線に次ぐ主力級の路線として大成長を遂げました。 東急の主力級路線として大出世した目黒線 東急多摩川線 前身である東急目蒲線の蒲田駅から多摩川駅までの間を受け継いだ鉄道路線です。 大出世を果たした目黒線とは打って変わって、目蒲線時代の都心のローカル線という性質を色濃く受け継いでいます。 多摩川線は、延伸もなく、他社路線直通もないため、車両が新しくなったことを除けば、今も昔も変わらないままといえましょう。 都心のローカル線であり続ける多摩川線 他の鉄道路線の今昔 このセクションでは、「目蒲線物語」に出演する兄「東急池上線」、父「東武東上線」、母「赤羽線（埼京線）・南武線」を登場順に説明します。 歌詞中に一瞬だけ名前が出る、東急東横線、東急田園都市線、東急新玉川線、東急世田谷線の4路線に関しては触れませんので、ご了承ください。 兄 東急池上線 （兄） おまえの兄貴 東急池上線だ おまえはまだいいぞ 目黒から出ている 俺なんかおまえ 五反田だ五反田（ポヨヨ～ン） 出典：ざ・目蒲線物語 東急池上線は、五反田駅（東京都品川区）から蒲田駅（東京都大田区）までを結ぶ、東急電鉄の鉄道路線です。 この路線は、池上本門寺の参詣客輸送を目的に、目黒から池上を経て大森へ至る計画で、池上電気鉄道が開業させました。 池上線の全線開業までの道のりは、遠く厳しかったようです。 池上電気鉄道は、大森付近での用地取得の難航、資金難による目黒駅からの建設難航、支援者の私物化の問題を、創業時から抱えます。 そうこうしている内に、目黒蒲田電鉄が、目黒駅・蒲田駅間を結ぶ目蒲線を全線開業。 目黒駅から五反田駅へ起点変更を余儀なくされながらも、池上線は全通を果たします。 しかし、その頃には目黒蒲田電鉄に経営地盤で後塵を拝しており、最後は買収と相成りました。 また、戦後の一時期、泉岳寺線（桐ケ谷駅・三田線泉岳寺駅間）を新規開業し、三田線と計画線の東武高島平線を経由し、東上線に直通する計画がありました。 この計画が遂行されていたら、池上線が東急の主力級路線に成長していたかもしれません。 そのまま白紙となり、今では三田線は目黒線と直通し、池上線にとっては泣きっ面に蜂状態です。 歌詞に登場する路線で、目蒲線（目黒線）により数多の困難に見舞われた悲劇の路線です。 東急池上線を目蒲線の兄とした理由は、蒲田駅を始発駅としているからでしょう。 けれども、歴史を紐解けば、なんという皮肉でありましょうか。 現在では、既に今は昔のことなのか、弟の半身の東急多摩川線と新型車両を仲良く共用しています。 数多の困難に見舞われた悲劇の池上線 父 東武東上線 （目） 駅が５つか６つ過ぎると全～部埼玉になってしまう あの東武東上線？ 忘れ物にクワとスコップがいちばん多いという 東武東上線？ 出典：ざ・目蒲線物語 東武東上線は、池袋駅（東京都豊島区）から寄居駅（埼玉県大里郡寄居町）までを結ぶ、東武鉄道の鉄道路線です。 下り始発の池袋駅から見て埼玉県で最初の駅は、和光市駅です。 この駅までは、北池袋、下板橋、大山、中板橋、ときわ台、上板橋、東武練馬、下赤塚、成増と、9駅通過する必要があります。 これらの駅は、第二次大戦前に全て開業済みであり、1980年前後と2024年前後で変わりません。 そのため、だいぶ悪い方に誇張された歌詞であることが分かります。 また、第二次大戦後の食糧不足で、川越地方にあるサツマイモ畑に人々が買い出しに押し寄せたことから、東武東上線は「いも電車」の愛称で呼ばれていました。 これにより、「沿線民は農家」という連想を経て、「忘れ物にクワとスコップがいちばん多い」という歌詞が生み出されたのではないか、と推測できましょう。 バカにされるほどローカルじゃない東上線 母 赤羽線・JR埼京線 （母） 母さん余った電車で繋ぎ合わされているから 赤だの黄色だの緑だのってバランバラン （目） ぼくの本当の母さんって誰なの？ （母） 赤羽線よ （目） えっ あの池袋の駅を出ると板橋 十条 赤羽の たった４つしか走ってないという あの赤羽線 出典：ざ・目蒲線物語 国鉄赤羽線は、JR埼京線の前身となる鉄道路線です。 当初は山手線でしたが、山手線が環状運転を開始し、運行系統が変化したことで誕生します。 池袋、板橋、十条、赤羽の4駅だけの短い路線で、1985年に川越線直通の埼京線が開業するまで、赤羽線と呼ばれました。 この路線は、山手線の支線という立ち位置であり、投資のウェイトが低かったことから、つぎはぎな混色編成が見られたのではないかと思います。 これは今でいうと、色々な路線からお下がりの電車を貰う武蔵野線のようなポジションでしょうか。 現在では、新車が導入されて、混雑率が140%前後となる重要な路線に成長しており、東急目黒線と同じく出世した路線と言っても過言ではありません。 さて、この歌詞の中で今でも変わっていないことがあります。それは「バランバラン」なことです。 どういうことかというと、埼京線は、山手線、赤羽線、そして東北本線を繋ぎ合わせたものだからです。 なので、今は、路線を走る電車ではなく、電車の走る路線が「バランバラン」なのです。 電車の走る路線が「バランバラン」な埼京線 母 南武線 （せりふ） そして継ぎ接ぎだらけの母さんは休みの日 目黒に方に遊びに行ったのですが 道に迷って川崎の方まで行ってしまい 後に母さんは継ぎ接ぎだらけの電車 南武線になってしまったそうです 出典：ざ・目蒲線物語 南武線は、川崎駅（神奈川県川崎市川崎区）から立川駅（東京都立川市）までを結ぶ鉄道路線です。 古くは茶色の旧型国鉄電車が走っていましたが、1980年前後から歌詞にあるように他路線から転入した電車が走るようになります。 それからは同じように他路線から転入した電車をお下がりで使っていましたが、2014年秋頃から新車が導入されました。 もう他路線のお下がり電車ではない南武線 おわりに ひとこと ひと昔前に「あっても無くてもどうでもいい」と歌われた目蒲線は、今では「なくてはならない重要な」目黒線に大成長しました。 参考文献 本記事は、下記の文献を参考に作成しています。 東急目蒲線 東急目蒲線 - Wikipedia 目黒蒲田電鉄 - Wikipedia 洗足田園都市 - Wikipedia 東急目黒線 目黒線路線情報｜東急電鉄 東急目黒線 - Wikipedia 東急多摩川線 東急多摩川線路線情報｜東急電鉄 東急多摩川線 - Wikipedia 東急池上線 池上線路線情報｜東急電鉄 東急池上線 - Wikipedia 池上電気鉄道 - Wikipedia 東武東上線 東武東上線｜東武鉄道公式サイト 東武東上本線 - Wikipedia 国鉄赤羽線（JR埼京線） 赤羽線 - Wikipedia 埼京線 - Wikipedia 国鉄南武線（JR南武線） 南武線 - Wikipedia","link":"/articles/look-past-and-present-from-mekamasen-story/"},{"title":"RIDDLE JOKER 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ 本記事では、ゆずソフトより2018年に発売された「RIDDLE JOKER（リドルジョーカー）」の全ルート詳細攻略ガイドを掲載します。 こちらは、「RIDDLE JOKER（リドルジョーカー）」の攻略記事です。 作品の感想や評価は、レビュー記事を投稿していますので、そちらを是非ご覧ください。 おすすめ攻略順 二条院にじょういん 羽月はづき、壬生みぶ 千咲ちさき、在原ありはら 七海ななみ、式部しきべ 茉優まゆ、三司みつかさ あやせの順で攻略を推奨する。 二条院 羽月、在原 七海、壬生 千咲（※二人目以降に攻略可）の三人は、プレイヤーの好みの順番で攻略して構わない。 しかし、本作の根幹となるストーリーである式部 茉優及び三司 あやせは、式部 茉優が先で、三司 あやせが後、という順番でプレイする形を、最後に持ってくるべきである。 ルート分岐データ 分岐確定条件 下表の条件を満せば、他の選択肢の選択内容に関わらず、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 名前 条件 三司 あやせ 学生会室へ相談に行き、いつも通りの寮で食べることを選んでから、模擬店の練習相手を茉優にする。 在原 七海 研究室へ相談に行き、他の全選択肢では七海に関連するものや喜ぶものを選ぶ。 式部 茉優 能力検証時は七海に声をかけず、応援を頼む時は研究室へ行き、模擬店の練習相手として選ぶ。 二条院 羽月 水着姿を見た状態で、模擬店の練習相手に選ぶ。 壬生 千咲 (1) あやせ・七海・茉優・羽月のうちだれか一人のエピローグを見終える。 (2) 七海の水着姿を見てからコンプレックスに切り込み、学生会室へ相談に行き、いつも通りの寮で食べることを選んでから、模擬店の練習相手にする。 要約フローチャート 本作は、茉優及び羽月、または七海及び千咲で、二種類の攻略フローチャートが作れる。 その組み合わせは様々あるが、最高効率に近しいであろうものを掲載する。 前述のおすすめ攻略順に従う場合は、下記の順番でフローチャートを進めること。 ちなみに、図中の青太字の記載（例：セーブ01）がある選択肢は、ルート分岐おける重要なチェックポイントである。 該当のシーンに到達したらセーブを忘れない、を意識しながらプレイしよう。 Aグループの羽月ルートをクリア セーブ01「七海がこちらを見ている」をロードし、Bグループの千咲ルートをクリア セーブ03「どこで食べる？」をロードし、七海ルートをクリア セーブ02「練習は誰から？」をロードし、茉優ルートをクリア セーブ04「練習は誰から？」をロードし、あやせルートをクリア Aグループ（茉優・羽月・あやせ） Bグループ（七海・千咲・あやせ） 共通ルート詳細データ Prologue 選択肢なし Chapter 1 七海がこちらを見ている 【重要】七海か、茉優か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 七海にも声をかける なし 七海の評価+1、七海ルートフラグ=ON このまま検証を続ける なし 茉優の評価+1、茉優ルートフラグ=ON Chapter 2 どちらの水着が？ 【重要】羽月か、七海・千咲か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 二条院さんの水着が気になる なし 羽月の評価+1、羽月ルートフラグ=ON 七海の水着が気になる なし 七海の評価+1 コンプレックス？ 「七海の水着が気になる」を選んだ場合（「羽月ルートフラグ=OFF」の時）に出現する。 ただし、アフターストーリーのプレイアブル人数が 0 人（＝一度もエピローグを見終えていない状態）の時は、選択肢を選べない。この時は、「話題に触れない」が強制的に選択される。 選択肢 前提条件 結果 話題に切り込む Afterプレイアブル人数&gt;0 AND羽月ルートフラグ=OFF 千咲の評価+1、千咲ルートフラグON 話題に触れない なし なし 七海のご機嫌が… 選択肢 前提条件 結果 ちゃんと言い直す なし 七海の評価+1 別にいいか なし なし まずはどちらに？ 【重要】あやせか、茉優か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 まずは、学生会室に相談にいく なし あやせの評価+1、あやせルートフラグ=ON まずは、研究室に相談にいく なし 茉優の評価+1 Chapter 3 どこで食べる？ Chapter 2 のシーン「まずはどちらに？」で、「まずは、学生会室に相談に行く」を選んだ場合（「あやせルートフラグ=ON」の時）に出現する。 もう一方の「まずは、研究室に相談に行く」を選んだ場合（「あやせルートフラグ=OFF」の時）は、選択肢を選べず、「たまには別の寮に」が自動的に選択される。 選択肢 前提条件 結果 いつも通りに あやせルートフラグ=ON あやせの評価+1 たまには別の寮に なし 七海の評価+1 練習は誰から？ 選択肢 前提条件 結果 二条院さん なし 羽月の評価+1 茉優先輩 なし 茉優の評価+1 壬生さん なし 千咲の評価+1 眠れぬ夜の過ごし方 後続シーンによって、羽月、茉優、七海のうち、どのルートに分岐確定かを知ることが可能。 一方、「寝る努力！」シーンであった場合、千咲、あやせ、ノーマルENDのいずれかであることまでしか特定できない。 後続シーン 前提条件 備考 羽月は…？ 羽月ルートフラグ=ON AND 羽月の評価=2 羽月ルート確定 茉優は…？ 茉優ルートフラグ=ON AND 茉優の評価=3 茉優ルート確定 七海は…？ 七海ルートフラグ=ON AND 七海の評価=4 七海ルート確定 寝る努力！ 上記以外 なし 発表祭本番 先手を取るシーンであれば、羽月または千咲の条件を満たしていない限り、あやせルート確定である。 様子を見るシーンであれば、シーン「眠れぬ夜の過ごし方」の後続で「茉優は…？」が発生していた場合、ここで一足先に茉優ルートへ分岐する。 後続シーン 前提条件 備考 先手を取る あやせルートフラグ=ON AND あやせの評価=2 あやせルート確定（例外あり） 様子を見る 茉優ルートフラグ=ON AND 茉優の評価=3 茉優ルート分岐 上記以外 なし 発表祭閉幕 各個別ルートへの分岐優先度は、七海＞羽月＝千咲＞あやせの順である。 なので、七海の条件を満たすと、千咲ルートに分岐できない。同様に、羽月や千咲の条件を満たすと、あやせルートに分岐できない。 後続シーン 前提条件 備考 無事終了 七海ルートフラグ=ON AND 七海の評価=4 七海ルート分岐 襲撃事件の顛末 羽月ルートフラグ=ON AND 羽月の評価=2 羽月ルート分岐 夜空を見上げて 千咲ルートフラグ=ON AND 千咲の評価=2 千咲ルート分岐 一日が終わって… あやせルートフラグ=ON AND あやせの評価=2 あやせルート分岐 平和な日々 上記以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面のメニューに After が増え、該当ヒロインの After と Extra のデータが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの After と Extra のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、Extra の立ち絵鑑賞機能が解禁となる。 あやせ・七海・羽月・千咲 あやせ・七海・羽月・千咲ルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、フローチャートのシーンジャンプ等の機能を使用して、全ての選択肢を選ぼう。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておくこと。 あやせルート Chapter 5「初めての体験」 Chapter 5「パイズリします！」 Chapter 7「我慢できない」 七海ルート Chapter 5「兄妹ではなく男と女へ」 Chapter 6「任務を終えたら…」 Chapter 6「任務を終えたら…続き」 Epilogue「新たな力の使い方？」 羽月ルート Chapter 8「結ばれる二人」 Chapter 9「昼間から…」 Chapter 10「仲直り」 千咲ルート Chapter 6「先輩を癒したい」 Chapter 6「夜はこれから」 茉優 茉優ルートは、攻略途中で選択肢によって眼鏡ありと眼鏡なしの CG 差分が発生するため、詳細データを別途掲載する。 他ヒロインルートと同じく、セーブ＆ロード、選択肢ジャンプ、フローチャートのシーンジャンプ等の機能を駆使することで、CG を全回収できる。 もちろん「Hシーン選択肢固定」機能のこともお忘れなきよう。 Chapter 8「愛の結晶」以外 Chapter 7「初体験」 Chapter 8「愛しい人」 Chapter 8「愛しい人続き」 Chapter 8「愛の結晶」 眼鏡をかける？ 選択肢 前提条件 結果 そのままがいい なし 眼鏡フラグ=OFF 是非、眼鏡で なし 眼鏡フラグ=ON 眼鏡はお好き？ 選択肢 前提条件 結果 このまま！ 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 咥えて！ 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 眼鏡はお好き？続き 選択肢 前提条件 結果 最後も中にたっぷりと 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 最後は抜いてお尻に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。 ここでは、あやせの AFTER STORY 2 のみストッキング有無の CG 差分が発生するため、詳細データを別途掲載する。 あやせ AFTER STORY 2 ストッキングは？ 選択肢 前提条件 結果 あやせに任せて、自分で脱いでもらう なし ストッキングフラグ=OFF あやせが脱ぐ時間すら惜しい なし ストッキングフラグ=ON マッサージして！続き 選択肢 前提条件 結果 中に出すに決まっている ストッキングフラグ=OFF ストッキングなしCG ストッキングフラグ=ON ストッキングありCG ぶっかけに決まっている ストッキングフラグ=OFF ストッキングなしCG ストッキングフラグ=ON ストッキングありCG","link":"/articles/guide-riddle-joker/"},{"title":"Hexo製ブログを公開してGoogle検索できるようにする","text":"手元で作成したHexo.js製ブログを、GitHub Pagesで公開して、Google検索できるようにするまでの手順を、この記事にまとめました。 GitHub Pagesでサイトを公開しようと考えている方の参考になれば幸いです。 はじめに この記事は、「ブログ作成」シリーズの後編です。 前編の記事である「Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう」を未読の方は、この記事を読む前にそちらから拝読ください。 前後編に分割した理由 下記の二つの理由を持って、記事を前後編の二つの記事に分割することにしました。 PageSpeed Insights で、ページ内の DOM 要素数が 800 を超えていると、警告を受けたから。 テンプレートやスタイルのリファクタを頑張ったが、800 を下回れなかった。 技術的な内容にも関わらず、長すぎて可読性が落ちていると思ったから。 いくつか記事を書いた結果、読了時間が 10 分程度だとバランスが良いという結論になった。 この記事の存在意義 読者様が、ブログ作成シリーズの記事をひと通り読んだ後に Hexo.js + GitHub Pages のブログを作成できるようになっていること。 もしくは、これらの記事を読みながらブログを作成できること。 ブログをお外に公開しよう さて、手元で表示しているブログが満足する出来になって、そろそろお外に公開したくなってきた頃かと思います。 このまま、後編（公開編）の手順に進みましょう。 レポジトリ作成 GitHub のアカウントはあらかじめ作成してください。 無料で使いたい場合は、パブリックレポジトリにする必要があります。 (1) レポジトリ作成 自分のアカウントを使って、GitHub Pages 用のレポジトリを作成します。 画像付きの作成手順がGitHub公式ドキュメントにまとめられていますので、ご確認ください。 (2) 手元にチェックアウト 作成後に、Git コマンド等のツールを使用して、そのレポジトリを手元にチェックアウトします。 それから、構築実践編で作成した&quot;blog&quot;ディレクトリ(※)の中身を丸ごと、チェックアウトした公開用レポジトリのディレクトリ直下にコピーしましょう。 (※) hexo initコマンド実行時に、任意の名前で作成した場合、&quot;blog&quot;をそれに読み替えてください。 ちなみに、この手順を行ってから、構築手順を行うこともできます。 デプロイ設定 (1) デプロイ設定を変更 ブログの設定ファイル&quot;_config.yml&quot;にあるデプロイの設定を、下記のように書き換えましょう。 _config.yml# Include / Exclude file(s) include: - '.nojekyll' exclude: ignore: # ... 途中省略... # Deployment deploy: type: git repo: https://github.com/octocat/octocat.github.io # 「octocat」（2ヶ所）は、ご自身のアカウントIDに変更してください。 branch: gh-pages ignore_hidden: public: false (2) .nojekyll ファイルを作成 チェックアウトした公開レポジトリのルートディレクトリ配下の source ディレクトリに移動し、&quot;.nojekyll&quot;ファイルを作成しましょう。 terminalcd ./source touch .nojekyll これでデプロイの設定は完了です。デプロイする前に、次のセクションの「下書き記事を使いこなす」をよく読んでください。 下書き記事を使いこなす hexo new postコマンドで作った記事は、公開状態の投稿記事になります。 ということは、ブログをお外に公開すると、今後は「書きかけの記事が投稿されちゃった」事故が起こりえます。 非公開状態の下書き記事として作成するコマンドもありますので、それを使えば事故を防げます。 このセクションでは、下書き記事の作成方法と、Hexo サーバーでの表示方法、下書き記事の公開方法を紹介します。 (1) 下書き記事を作成 次のコマンドで、下書き記事を作成します。 terminalhexo new draft &quot;article-name&quot; (2) Hexo サーバーの設定を変更 下書き記事は、手元の Hexo サーバーを起動しても、ブログの記事として表示されません。 &quot;package.json&quot;にある scripts の&quot;server&quot;コマンドに手を加えて、表示する記事として認識させる必要があります。 package.json（※コピーせず、ご自身の手で修正してください）&quot;scripts&quot;: { &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server --drafts&quot; // 「 --drafts」を後ろに追加 }, (3) Hexo サーバーの起動 このあとは、通常通り Hexo サーバーを起動させるだけです。 terminalnpm run clean &amp;&amp; npm run server (4) 下書き記事を投稿記事に変換 さて、上記の手順は、あくまで手元で表示できるようにしただけであって、お外では依然として下書き記事が非公開状態として扱われます。 前述の通り、投稿記事は公開状態として扱われるので、下書き記事を投稿記事に変換しましょう。 下記のコマンドを実行することで実現できます。 terminalhexo publish &quot;article-name&quot; GitHub Pages にデプロイ それでは、準備も整ったと思いますので、GitHub Pages にデプロイしましょう！ デプロイは下記のコマンドを実行するだけで終わります。 Windows で下記のコマンドを実行するには、&quot;PowerShell 7.x&quot;が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 terminalnpm run clean &amp;&amp; npm run deploy カスタムドメイン登録 GitHub Pages のデフォルトドメインは、アカウントID.github.ioとなるため、嫌な人もいるでしょう。 もちろん、カスタムドメインを無料で登録することもできます。 詳細については、GitHub公式ドキュメントの説明にお任せします。 ただし、カスタムドメインの取得自体はご自身でやる必要がありますので、ドメインを取得できるサービスをご利用ください。 ドメインだけ取りたいなら、お名前ドットコムがオススメです。 検索できるようにしよう ここまできたらあと少しで終わりです。お外に公開したブログを検索できるようにしてみましょう。 Google Analytics 登録 所有者確認のみしたい場合は、この手順はスキップしても問題ありません。 お外に公開したブログのアクセス解析と、“Google Search Console”（以下、GSC）の所有者確認のために、“Google Analytics”（以下、GA）にアカウントを作成します。 アカウント作成は、GoogleのAnalyticsページから行ってください。 単語がよくわからなかったり、手順は面倒だったりしますが、作業自体はそれほど難しくはないので、ここでの説明は省きます。 Google 検索すると、詳しく説明してくれている方たちがいますので、彼らのページを見ることをオススメします。 サイトマップ作成 ブログに書いた記事を、GSC に認知してもらうためにサイトマップを作成します。 (1) プラグインのインストール もちろんサイトマップは、手作業で作る必要はなく、Hexo 公式がhexo-generator-sitemapプラグインを用意しているので、それをインストールしましょう。 terminalnpm install hexo-generator-sitemap (2) サイトマップ作成設定の追加 インストールが終わったら、ブログの設定ファイル&quot;_config.yml&quot;を開いて、サイトマップ作成用の設定を追加します。 _config.yml# Sitemap sitemap: path: - sitemap.xml tags: false categories: false 設定はこれだけでOKです。デプロイコマンドを実行する度に、Hexo がブログのサイトマップを作って、GitHub Pages にデプロイしてくれるようになります。 Google Search Console 登録 GSCにブログの登録（または、プロパティ追加）を行います。 プロパティ追加を行うことで、Google 検索結果にインデックスを作成できます。 (1) 所有者確認 GA・HTML ファイル・HTML タグ・Google タグマネージャー・ドメインの5つの中から確認方法を選んでください。 前述の手順で GA 登録を行っている方は、GA を選ぶと良いでしょう。それ以外の方は、HTML タグか、ドメインのどちらかで確認を行うのがオススメです。 なお、HTML ファイルでの確認方法は、Hexo が自動でテンプレートを適用して表示してしまい、Google が確認できないため、使用不可能です。 (2) サイトマップ登録 所有者確認が済んだ後に、作成したサイトマップの登録を行います。数日後にクロールしてくれるかもしれません（※私はされなかった）。 ちなみに、後日「検出 - インデックス未登録」とされた場合は、未登録ページの一覧が見られますので、一つずつインデックス登録してあげましょう。 おわりに 後編の記事で紹介した GitHub Pages や、Google Search Console は、ブログでなくても活用できる機会は結構ありそうなので、ご覧になった方の何かしらの一助となれば嬉しいです。 仕事が忙しくて、千恋万花をプレイし始めたにも関わらず、ほとんど出来てない今日この頃。 記事を分割した本当の理由はお察しください。","link":"/articles/open-hexo-blog-up-to-the-public/"},{"title":"PNGやJPEGをWebPに変換してサイトを高速化しよう","text":"ウェブサイトの高速化を目的として、Google が開発した「WebP」と呼ばれる、優秀な次世代の画像フォーマットがあります。 本記事では、JPEG 形式や PNG 形式からこの形式へ変換する方法をまとめました。 はじめに 当ブログでは、当初、JPEG 形式や PNG 形式の画像フォーマットが混在していました。 PNG 形式は品質が良い代わりにサイズが大きく、JPEG 形式はサイズが小さい代わりに品質が悪くと、画像の取り扱いに悩んでいました。 そんな時に、パフォーマンスチューニングで使っていた PageSpeed Insight から次世代フォーマットで画像配信をするように提案されます。 それがきっかけとなり、使用する画像のフォーマットを WebP 形式に統一することにしました。 WebP とは何か？ WebP（読みは「ウェッピー」）は、Google が2010年9月30日に仕様を公開した比較的新しい画像フォーマットです。 特徴は、PNG 形式と同じような可逆圧縮を始め、JPEG 形式と同類の不可逆圧縮、そして、GIF 形式や APNG 形式のようなアニメーションをサポートしています。 また、可逆圧縮であれば PNG 形式の約四分の三のサイズ、不可逆圧縮であれば JPEG 形式の約三分の二のサイズで、同等の品質を再現できます。 これらの特徴からも分かる通り、小さいサイズで豊富な表現力を持つため、ウェブサイトのクオリティを維持しながら高速化を実現できる万能画像フォーマットです。 データ圧縮の種類 データ圧縮は、可逆圧縮と不可逆圧縮の二種類があり、WebP はその両方に対応しています。 それぞれの圧縮方式の特徴について簡単に解説します。 可逆圧縮 可逆圧縮は、ロスレス（Lossless）圧縮とも呼び、「圧縮」後のデータを「逆」の完全な状態へ戻す事が「可」能である性質を持ちます。 この方式は、圧縮前のデータと伸張後のデータが完全に一致するため、テキストに対して用いられます。 例えば、ウェブの世界では、HTML、CSS、JavaScriptなどのリソースに対して適用されます。 なお、画像、音声、動画であれば、編集でデータ損失が発生しないという強みを享受できます。 不可逆圧縮 一方、不可逆圧縮（または、非可逆圧縮）は、ロッシー（Lossy）圧縮とも呼び、「圧縮」したデータを「逆」の完全な状態へ戻す事が「不可」能である性質を持ちます。 この方式は、圧縮前のデータと伸張後のデータが完全に一致しないため、情報が多少欠落しても影響が少ない画像、音声、動画に対して用いられます。 他の画像形式との比較 WebP は、他の画像形式と比べてどれくらいの性能になるでしょうか。 実験として、標準画像データベース SIDBA にある TIFF 形式の画像「4.2.06 Sailboat on lake」を、WebP（不可逆圧縮・可逆圧縮）、PNG、JPEG の四種類の形式へエンコードします。 元画像との比較 WebP（不可逆圧縮）及び JPEG は最高品質の、WebP（可逆圧縮）及び PNG は最高圧縮レベルの条件で試してみたところ、次のような結果になりました。 形式 サイズ 差分 TIFF 786,572 Byte ※元画像のため、「0」 WebP（不可逆圧縮） 170,506 Byte ▲616,066 Byte(▲78.3%) WebP（可逆圧縮） 502,744 Byte ▲283,828 Byte(▲36.1%) PNG 659,813 Byte ▲126,759 Byte(▲16.1%) JPEG 483,250 Byte ▲303,322 Byte(▲38.6%) 圧縮性能は、断然トップの WebP（不可逆圧縮）形式、次点で JPEG 形式、その次点に惜しくも届かなかった WebP（可逆圧縮）形式、最後尾に鎮座する PNG 形式で並びます。 他の画像形式と比較 この結果をもとに WebP（不可逆圧縮・可逆圧縮）に対する PNG 形式及び JPEG 形式の圧縮性能で比較した勝敗を下表にまとめました。 WebP 相手 差分 結果 不可逆圧縮 vs PNG ▲489,307 Byte(▲74.2%) ◎ vs JPEG ▲312,744 Byte(▲64.7%) ◎ 可逆圧縮 vs PNG ▲157,069 Byte(▲23.8%) ○ vs JPEG +19,494 Byte(+0.04%) × 不可逆圧縮の WebP 形式は、サイズがとても小さくなっているにも関わらず、元画像と目視で確認する程度では違いが分からないほど、優秀なパフォーマンスを誇ります。 一方で、可逆圧縮の WebP 形式は、他と比べて抜きん出た強みがなく、何とも中途半端です（※注：可逆圧縮の中だけで考えるのであれば、とてつもなく優秀）。 そのため、ウェブサイトの高速化という目標に適しているものは何かと問われたら、不可逆圧縮の WebP 形式ということになるでしょうか。 断トツの性能を誇る WebP 形式（不可逆圧縮）に変換した「Sailboat on lake」の画像 WebP に変換する ダウンロード手順 WebP 公式ホームページからユーティリティツールをダウンロードする手順を紹介します。 (1) WebP コンバータのダウンロードに移動 WebP 公式ホームページを開いた後、右側にある「このページの内容」の「WebP コンバータのダウンロード」をクリックします。 (2) プリコンパイルされたユーティリティに移動 「WebP コンバータのダウンロード」の「Linux、Windows、macOS」のリンクをクリックします。 (3) ユーティリティツールのダウンロード Windows 11 をご利用の場合 「libwebp-1.3.2-windows-x64.zip」のリンクをクリックします。 Windows 10 以前のバージョンをご利用の場合 64bit版であれば、「libwebp-1.3.2-windows-x64.zip」のリンクをクリックします。 32bit版であれば、「ダウンロード リポジトリ」のリンク先ページから「libwebp-1.0.3-windows-x86.zip」のリンクをクリックします。 ローカル環境の整備 (1) zipファイルを解凍 ダウンロードした「libwebp-1.3.2-windows-x64.zip」を解凍します。 解凍後は、「libwebp-1.3.2-windows-x64」ディレクトリを任意の場所に配置します。 (2) パスを通す パスを通さなくても、ユーティリティツールは実行できます。 ただし、ユーティリティツールのフルパスを指定して実行する必要があります。 ユーティリティツールのディレクトリのパスを通します。 パスの通し方は、外部サイト「Windowsの環境パスを通す(path)」の手順を参考にしてみてください。 ユーティリティツールの実行 ユーティリティツールに様々なコマンドが含まれていますが、良く使われるものの使い方を説明します。 不可逆圧縮 WebP エンコード 不可逆圧縮時の最適な設定を探すために、様々な種類の画像に対するエンコードを試しました。 その結果、オススメの設定は、品質係数「92」、圧縮方式「6(最遅)」です。 品質係数をこの数値にした理由として、「92」以降では目に見えて分かる品質の向上が実感できなくなるからです。そして、品質係数を一つ上げるごとに、サイズがおよそ3KBから4KB程度増えます。 圧縮方式は、高い数字を指定するとサイズを小さくする効果があり、不可逆圧縮で最遅の「6」にしても、可逆圧縮より圧倒的に少ない時間でエンコードできます。 ゆえに、コストパフォーマンスに最も優れた設定がオススメしたものということになります。 cwebp -q 92 -m 6 -o lossy_image.webp image.jpg 可逆圧縮 WebP エンコード 可逆圧縮の WebP は、なるべく高品質でエンコードするように設定しましょう。 そのためには、品質係数「100(最大)」、圧縮方式「6(最遅)」の組み合わせか、圧縮レベル「9(最遅)」か、どちらかを指定するのがオススメです。 なお、不可逆圧縮と可逆圧縮のどちらに変換する場合であっても、同じコマンドを使用します。 エンコーダーは、不可逆圧縮がデフォルト動作のため、可逆圧縮で出力するには「lossless」オプションの設定が必要です。 cwebp -lossless -q 100 -m 6 -progress -o lossless_image.webp image.png アニメーション WebP 変換 GIF（アニメーション含む）形式の画像を WebP 形式に変換できます。 なお、ユーティリティツールでは、APNG 形式から WebP 形式に変換する方法を提供していません。 gif2webp -q 100 -o animation_image.webp image.gif おわりに ウェブサイトの画像を WebP 形式にすると、レンダリングに関する性能が向上します。 実際に、当ブログも PageSpeed Insight のパフォーマンススコアが20点ほど向上しました。 このように、エンコードする小さな労力だけで、大きなリターンを得られることが明白です。 最初にやるべき価値のある改善であることは疑いようもありません。 ウェブサイトのパフォーマンス改善で何から手をつけようか迷っている方は、本記事のように画像を変換するところから始めると良いでしょう。 ちなみに、PageSpeed Insight で次世代フォーマットとして AVIF 形式も挙げられています。 WebP 形式を選んだ理由は、WebP の方が AVIF よりも対応しているブラウザが多く、公式ウェブサイトが整備されているからです。 参考文献 WebP 公式ホームページ Windowsの環境パスを通す(path) 南カリフォルニア大学 信号画像処理研究所 画像データベース WebP 画像フォーマットの Web ブラウザ対応状況 AVIF 画像フォーマットの Web ブラウザ対応状況","link":"/articles/convert-image-format-to-webp/"},{"title":"あなたの住まいは大丈夫？液状化リスクの簡単な調べ方","text":"本記事では、数ある自然災害の中から地震に主眼を置いて、みなさんに最も影響を及ぼすであろう液状化が発生するリスクを、地理院地図で簡単に調べる方法をまとめました。 はじめに 昨今は、大地震が続いており、今年の元旦にもM7.6規模の能登半島地震が発生しました。 その後で、液状化現象のニュースが頻繁に話題になったのは、今もまだ記憶に新しいです。 この現象は、過去の2018年北海道胆振東部地震、2016年熊本地震及び2011年東北地方太平洋沖地震でも、同様に起こりました。 液状化は、ほとんど人命に関わる直接的な被害になりませんが、致命的な二次災害を複合的に引き起こすため、話題に取り上げられる、と考えています。 さて、何となくの知識や理解のままだと、地図を見ただけでは実感が足りず、災害対策におけるリスクマネジメントに支障があります。 そのため、この記事では液状化が何かを理解していくことから始めます。 液状化現象を理解する 液状化とは、地震が発生した時に地盤が液体のような状態になる現象のことを言います。 このセクションでは、その現象が起こりやすい地層及び地形と、発生メカニズム及び影響・二次災害についてまとめたものを説明します。 起こりやすい地層 地下水位が高く、表層まで水で飽和した、深さ15から20メートル以内の締りの緩い砂質層です。 この砂質層の粒径が、細粒から中粒程度の砂で、粒径が揃っているほど可能性が高くなります。 一方で、これより細粒になると、粘着力による抵抗が生じるため、発生しにくくなります。 また、粒径の大きい礫になると、透水性が大きく水が抜け出しやすいため、液状化に至りません。 起こりやすい地形 海岸埋立地や干拓地、旧河川敷・旧池沼・旧河道の埋立地、砂丘の内陸側縁辺部、砂丘間窪地、潟起源低湿地、自然堤防などです。 発生メカニズム 通常時 砂粒子同士が角を接触させる形で突っ張りあい、その隙間を地下水が満たしており、地盤をゆるく支えている状態です。 液状化中 地震による振動で砂粒子が揺すられることで、それら同士の支えが次第に外れてばらばらになり、圧力が高まった地下水に浮いた状態になります。 液状化後 圧力が高まった地下水が砂と共に地表へ噴出し、地層の中身が抜け出すため、沈下・亀裂・陥没・隆起などの地盤変形を起こします。 影響・二次災害 (1) ライフライン施設の破壊 地中に埋設されている上下水道管とガス管が破損したり、地上の電柱が倒壊したりすることで、水道・電気・ガスなどのライフラインが寸断され、生活障害を引き起こします。 (2) 交通網の機能停止 橋梁の破壊、道路の盛土の滑り出し・沈下、道路そのものの損傷により、緊急避難や救助活動に支障をきたします。それに加えて、通行障害も発生するため、物流が滞ります。 (3) 住居損傷による悪影響 傾いている等の機能障害がある住居に住み続けることで、めまいや吐き気などの健康被害を受けます。 地理院地図で調べる 地理院地図は、国土地理院が発信する日本国土の様々な情報をまとめたウェブ地図です。 その中に、「地形分類」と呼ばれる、土地の成り立ち・形態・性質から、発生しうる自然災害リスクを調べられる地図があります。 このセクションでは、その地図の使い方を説明しながら実際に検索してみます。 地形分類の設定方法 使い慣れていないと設定が難しいため、吹き出し付き画像で説明します。 (1) 地図の一覧を表示 地理院地図を開いた後の世界地図画面で、左上の地図アイコンをクリックします。 (2) 地図の種類を選択 左側に表示されるリストから、「土地の成り立ち・土地利用」をクリックします。 (3) 地形分類を選択 「土地の成り立ち・土地利用」の地図一覧の中から、「地形分類（ベクトルタイル提供）」をクリックします。 (4) 『地形分類（自然地形）』に設定 「地形分類（自然地形）」をクリックすると、選択中の地図に追加設定されます。 地形分類の検索例 筆者が勤めている会社の入居ビルと、1月末に発表された「＜首都圏版＞ 2024年 LIFULL HOME’S みんなが探した！住みたい街ランキング」から、借りて住みたいランキング一位の「本厚木駅」周辺及び買って住みたいランキング一位の「勝どき駅」周辺の3つを検索してみました。 (1) 会社の入居ビル まずは、筆者が勤めている会社の入居ビルがある目黒駅周辺を見てみましょう。 地形分類（桃色字）が「山地」と「台地・段丘」の境界にまたがるように、ビルが立っています。 「山地」の自然災害リスクは、「大雨や地震により、崖崩れや土石流、地すべりなどの土砂災害のリスクがある」です。 一方、「台地・段丘」の方はと言うと、「地盤は良く、地震の揺れや液状化のリスクは小さい」となっています。 液状化のリスクは小さいですが、地すべり等の土砂災害のリスクはあるようなので、良い土地とはっきり言い切れないのが残念ですね。 とはいえ、ビルの用途は、居住用ではなく商業兼オフィスなので、問題はないのかな。 (2) 本厚木駅周辺 次に、借りて住みたいランキング一位「本厚木駅」の周辺をみてみましょう。 地形分類は「氾濫平野」。この地形の自然災害リスクは、「河川の氾濫に注意。（略）液状化のリスクがある。沿岸部では高潮に注意」です。 本厚木は、小田急小田原線で新宿までの所要時間がおよそ50分程度と、郊外エリアの中では都心方面へのアクセスは良好です。 しかし、河川氾濫・液状化・高潮といった複数の自然災害リスクがあることを考慮すると、この一帯に借りて住もうという考えは、良い案とは言えませんね。 (3) 勝どき駅周辺 最後に、買って住みたいランキング一位の「勝どき駅」周辺もみてみましょう。 地形分類は「旧水部」。この地形の自然災害リスクは、「地盤が軟弱である。液状化のリスクが大きい。沿岸部では高潮に注意」です。 読んでわかる通り、前述した本厚木駅周辺の完全上位互換となる自然災害リスクを持っています。 東京都内の新築マンション価格が昨今の高騰しているといえども、居住用には不向きですし、投資用としてもリターンと釣り合ってないのではないでしょうか。 おわりに 液状化のメカニズムと、引き起こす影響や二次災害を見て、地理院地図の地形分類で検索してみました。 その恐ろしさの一端を感じてから、検索例として採用した「住みたい街ランキング」を見ると、液状化含め自然災害リスクを身近に感じていない人が少なくないと分かります。 借りて住むにしても、買って住むにしても、なるべく保有リスクは最小限にするべきです。 みなさんが、今後そのような機会があれば、この記事を活用していただければ幸いです。 参考文献 液状化 防災基礎講座 基礎知識編：4. 地盤液状化 - 防災科学技術研究所 盛土・宅地防災：液状化現象について - 国土交通省 東京都建物における液状化対策ポータルサイト 地理院地図 土地の成り立ちから災害リスクを知る｜地理院地図の使い方 - 国土地理院 住みたい街ランキング 「＜首都圏版＞ 2024年 LIFULL HOME’S みんなが探した！住みたい街ランキング」","link":"/articles/search-liquefaction-risk-from-gsi-maps/"},{"title":"サノバウィッチ 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ ゆずソフトより2015年に発売された「サノバウィッチ SABBAT OF THE WITCH」の全ルート詳細攻略ガイドを掲載します。 こちらは、「サノバウィッチ SABBAT OF THE WITCH」の攻略記事です。 作品の感想や評価は、レビュー記事を投稿していますので、そちらを是非ご覧ください。 おすすめ攻略順 因幡いなば めぐる、仮屋かりや 和奏わかな、戸隠とがくし 憧子とうこ、椎葉しいば 紬つむぎ、綾地あやち 寧々ねねの順で攻略を推奨する。 このうち、戸隠 憧子、椎葉 紬、因幡 めぐる、仮屋 和奏（※二人目以降に攻略可）の四人は、プレイヤーの好みの順番で攻略して構わない。 ただし、綾地 寧々は、内容が濃くエンディングまで多くの時間を要することに加え、本作の根幹となるストーリーであるため、最後に攻略するべきであろう。 ルート分岐データ 本セクションを始め、以降の「共通ルート詳細データ」と「個別ルート詳細データ」に記載のシーン名は、説明の便宜上名付けた非公式のものであるため、取り扱いにご注意ください。 分岐確定条件 下表の条件を満せば、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 なお、誰か一人のエピローグを見終わっている状態で、因幡 めぐる以外のルートに分岐したい場合は、仮屋 和奏の分岐条件を満たしてはいけない。 そのためには、「喫茶店の初来店時に彼女の制服姿を二回褒めない」、「映画の予定変更後にみんなで移動する」、「喫茶店に再来店時に彼女とじゃれあわない」のいずれかをやっておこう。 名前 条件 綾地 寧々 人気者になる方法の見本を頼み、困りごとは正直に言い、二回手を握って貰ってからコスプレコンテストの投票先に選ぶ。 因幡 めぐる 人気者になる方法の練習を続け、映画の予定を悩んだ後で恋人のフリをしてから一人称を受け入れて、コスプレコンテストの投票先に選ぶ。 椎葉 紬 勉強会中に諦めて気分を変え、コスプレコンテストの投票先を回答しない。 戸隠 憧子 勉強会で教えてもらい、コスプレ姿を褒めてからコンテストの投票先に選ぶ。 仮屋 和奏 (1) 寧々・めぐる・紬・憧子のうちだれか一人のエピローグを見終える。 (2) 喫茶店の制服を正直に褒め、映画の予定を変更した後にひとりで空腹を解消し、喫茶店に再び行った時にじゃれてみる。 要約フローチャート 本作は、寧々及び和奏、または、めぐるを軸として、紬と憧子の二人を加えた二種類の攻略フローチャートを作ることが可能。 その組み合わせは様々あるが、最高効率に近しいであろうものを掲載する。 ストーリーの仕様上、最低でも二人は同じ内容を見ることになるので、それについては留意して欲しい。 前述のおすすめ攻略順に従う場合は、下記の順番でフローチャートを進めること。 ちなみに、図中の赤太字の記載（例：セーブ01）がある選択肢は、ルート分岐おける重要なチェックポイントである。 該当のシーンに到達したらセーブを忘れない、を意識しながらプレイしよう。 Aグループのめぐるルートをクリア セーブ01「人気者になる方法」をロードし、Bグループの和奏ルートをクリア セーブ03「誰に投票する？」をロードし、憧子ルートをクリア セーブ02「古典の勉強は？」をロードし、紬ルートをクリア セーブ04「上映時間はどうする？」をロードし、寧々ルートをクリア Aグループ（憧子・紬・めぐる） Bグループ（和奏・紬・寧々） 共通ルート詳細データ Chapter 1 選択肢なし Chapter 2 和奏の制服姿が… 選択肢 前提条件 結果 もう１回正直に褒める なし 和奏の評価+1、和奏ルートフラグ=ON しつこいからもういいか なし なし 人気者になる方法 【重要】寧々か、めぐるか、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 綾地さんに頼む なし 寧々の評価+1、寧々ルートフラグ=ON このまま因幡さんと続ける なし めぐるの評価+1、めぐるルートフラグ=ON Chapter 3 映画を見る予定は？ 選択肢 前提条件 結果 ……悩む なし 「恋人のフリをする？」発生 時間を変更する なし 「上映時間までどうする？」発生 恋人のフリをする？ 選択肢 前提条件 結果 いや、普通に映画に集中 「映画を見る予定は？」で「……悩む」を選択 なし ……これもリハーサル めぐるの評価+1 上映時間までどうする？ 「空腹を解消したい」を選択した時、アフターストーリーのプレイアブル人数によって、和奏の評価が上がるかどうか決まる。 選択肢 前提条件 結果 このままみんなで移動 「映画を見る予定は？」で「時間を変更する」を選択 なし 空腹を解消したい 「映画を見る予定は？」で「時間を変更する」を選択AND Afterプレイアブル人数&gt;0 和奏の評価+1 「映画を見る予定は？」で「時間を変更する」を選択AND Afterプレイアブル人数=0 なし 一人称が名前は変？ 選択肢 前提条件 結果 かもね なし なし 別に なし めぐるの評価+1 仮屋に会いに… 選択肢 前提条件 結果 ちょっとじゃれてみる なし 和奏の評価+1 普通に言う なし なし 何か困りごとは？ 選択肢 前提条件 結果 誤魔化す なし なし 正直に言う なし 寧々の評価+1 Chapter 4 古典の勉強は？ 【重要】紬か、憧子か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 諦めて気分を変える なし 紬の評価+1、紬ルートフラグ=ON いい機会だから教えてもらう なし 憧子の評価+1、憧子ルートフラグ=ON 明けても暮れてもベースばかり 「今日は個人練習で」シーン（Chapter 4-5へ切り替え）であれば、ここで和奏ルートへ分岐する。 和奏ルートは、条件を満たすと優先的に分岐するため、寧々・紬・憧子を攻略対象にしている時は、評価（好感度）の管理を気を付けなければならない。 後続シーン 前提条件 備考 今日は個人練習で 和奏ルートフラグ=ON AND 和奏の評価=3 和奏ルート分岐 中間考査の結果は 上記以外 なし 手を… 選択肢 前提条件 結果 もう一度握ってもらう なし 寧々の評価+1 さすがにそんなことは言えない なし なし コスプレは似合ってる？ 選択肢 前提条件 結果 褒める なし 憧子の評価+1 目をそらす なし なし 誰に投票する？ 選択肢 前提条件 結果 因幡さん、かな なし めぐるの評価+1 綾地さんがいいかな なし 寧々の評価+1 やっぱり……戸隠先輩？ なし 憧子の評価+1 今はバンドの事で頭がいっぱい なし 紬の評価+1 舞台でバンド演奏 複数のメインヒロインで分岐条件を同時に満たすことはできないため、優先度はない。 後続シーン 前提条件 備考 似た者同士 寧々ルートフラグ=ON AND 寧々の評価=4 寧々ルート分岐 記念撮影 めぐるルートフラグ=ON AND めぐるの評価=4 めぐるルート分岐 遊び人？ 紬ルートフラグ=ON AND 紬の評価=2 紬ルート分岐 ご褒美の約束 憧子ルートフラグ=ON AND 憧子の評価=3 憧子ルート分岐 決意表明 それ以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面に AFTER と EXTRA のモードが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの AFTER と EXTRA のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、EXTRA の立ち絵鑑賞機能が解禁となる。 寧々・紬・憧子・和奏 寧々・紬・憧子・和奏ルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、バックログのシーンセレクト等の機能を使用して、全ての選択肢を選ぼう。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておくこと。 寧々ルート Chapter 5-8 Chapter 6-2 Chapter 7-2 RESTART Chapter 2-3 RESTART Chapter 2-9 RESTART Chapter 2-9 続き RESTART Chapter 3-6 RESTART Chapter 3-6 続き 紬ルート Chapter 7-2 Chapter 7-6 Chapter 7-6 続き Chapter 8-3 Chapter 8-3 続き 憧子ルート Chapter 6-6 Chapter 7-4 和奏ルート Chapter 6-3 Chapter 6-7 めぐる めぐるルートは、攻略途中で選択肢によって眼鏡ありと眼鏡なしの CG 差分が発生するため、詳細データを別途掲載する。 他ヒロインルートと同じく、セーブ＆ロード、選択肢ジャンプ、バックログのシーンセレクト等の機能を駆使することで、CG を全回収できる。 もちろん「Hシーン選択肢固定」機能のこともお忘れなきよう。 Chapter 9-2 以外 Chapter 8-8 Chapter 9-5 Chapter 9-5 続き Chapter 9-2 眼鏡が外れちゃう 選択肢 前提条件 結果 外れたままでいい なし 眼鏡フラグ=OFF それだけは絶対着けて なし 眼鏡フラグ=ON もう我慢できない 選択肢 前提条件 結果 このまま口に出す 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 今日は顔にかけたい 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG もう我慢できない 続き 選択肢 前提条件 結果 抜くなんてあり得ない 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 急いで抜けば耐えきれるかも 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG もう我慢できない 続き2 選択肢 前提条件 結果 最後まで中に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 寸前で外に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。","link":"/articles/guide-sabbat-of-the-witch/"},{"title":"癖が強すぎるGitHub Actionsのon.pushの解説","text":"GitHub Actions の on.push は、多用するイベントトリガーの一つですが、とても癖のある仕様です。 本記事では、使いこなすための解説します。 はじめに on.push の理解度確認テスト まずは、この記事を画面の前で読んでいるみなさんに質問です。 下記のように、ワークフローのイベントトリガーを書いた場合、GitHub Actions が処理を行うのは、次の選択肢のうちどれでしょうか？（複数回答可） 理解度確認テストon: push: branches: - 'feature/**' tags: - 'api-**' paths: - 'src/**' 「feature/foobar」ブランチで、「dst/foobar.txt」のみのコミットをプッシュした時。 「feature/foobar」ブランチで、「src/foobar.txt」のみのコミットをプッシュした時。 「hot-fix/bug-foobar」ブランチで、「src/foobar.txt」のみのコミットをプッシュした時。 「dst/foobar.txt」のみのコミットに、「api-foobar」タグを付けてプッシュした時。 「src/foobar.txt」のみのコミットに、「api-foobar」タグを付けてプッシュした時。 答え 正解は、「2」と「4」と「5」になります。 さて、みなさんは正解できましたか？ 次のセクションでは、on.push の仕様をおさらいします。 on.push の仕様をおさらい GitHubの公式ドキュメントの「Workflow syntax for GitHub Actions」のページを使って、仕様をおさらいします。 このページは、日本語翻訳されていた記憶があるのですが、今（※2024年04月22日時点）は原文に戻っていて、癖のある仕様でこれを読まないといけないのは、Actions に不慣れな人にとっては苦行ですね。閑話休題。 イベントフィルタ on.push イベントのフィルタは、次の3種類で、計6つあります。 「branches」と「branches-ignore」 「tags」と「tags-ignore」 「paths」と「paths-ignore」 次以降のセクションでは、上記3種類のフィルタの解説を行います。 (1) branches (branches-ignore) 特定のブランチのプッシュイベントに対して、ワークフローを実行したい時に設定します。 対象とするブランチのホワイトリストとして「branches」フィルタを、対象としないブランチのブラックリストとして「branches-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 では、対象ブランチと対象外ブランチの両方を指定したいユースケースがあった場合、どのように設定すればよいのでしょうか？ 答えは、『「branches」フィルタで、対象外ブランチの前に否定演算子!を付けて記述する』です。 加えて、このユースケースの場合、次の制限事項があることを留意して使用しなければいけません。 対象ブランチとなる定義も併せて必要です。すなわち、「branches」フィルタのリストは、最低でも2件定義することになります。 フィルタのリストは上から順番に全て評価します。よって、否定演算子付き定義でブランチを対象外にした後に、別定義でそのブランチが対象に含まれる可能性があります。 (2) tags (tags-ignore) 特定のタグのプッシュイベントに対して、ワークフローを実行したい時に設定します。 こちらも「branches」フィルタと同様の仕様で、ホワイトリストとして「tags」フィルタを、ブラックリストとして「tags-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 そのため、対象タグと対象外タグの両方を指定したい場合は、「tag」フィルタで、対象外タグの前に否定演算子!を付けて記述します。 また、「branches」フィルタと同じ制限事項があります。 (3) paths (paths-ignore) 特定のパスを含むコミットまたはタグのプッシュイベントに対して、ワークフローを実行したい時に設定します。 「branches」フィルタや「tags」フィルタと同様の仕様で、ホワイトリストとして「paths」フィルタを、ブラックリストとして「paths-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 よって、対象及び対象外となるパスを同時に指定したい場合は、「paths」フィルタで、対象外パスの前に否定演算子!を付けて記述します。 こちらも、「branches」フィルタや「tags」フィルタと同じ制限事項があります。 フィルタ併用時の挙動 branches＆paths 「branches（branches-ignore）」フィルタと「paths（paths-ignore）」フィルタを併用した場合、イベントの発動条件が変わります。 なぜなら、論理和条件（OR）ではなく、論理積条件（AND）として作用するからです。 ゆえに、論理和条件で想定した安易なリファクタリングにより、ブランチフィルタのワークフローとパスフィルタのワークフローを一つに統合すると、想定外の動作で痛い目を見ることになるでしょう。 では、どうしてこれらのフィルタを併用すると、論理積条件として作用するのでしょうか？ それは、どちらのフィルタも「コミットのプッシュイベントを対象とするから」だと考えています。 tags＆paths 一方で、「tags（tags-ignore）」フィルタと「paths（paths-ignore）」フィルタの併用は、無効な組み合わせになります。 セットで書いたとしても、それぞれが別のフィルタとして独立する論理和条件（OR）となります。 そのため、前述のルールが適用されると勘違いして、「paths（paths-ignore）」フィルタと併用すれば論理積条件（AND）になる、という安易な覚え方をしてしまうと、非常に危険です。 とはいえ、「tags（tags-ignore）」フィルタは、単独だと両方のプッシュイベントを対象にするわけですから、「paths（paths-ignore）」フィルタとの組み合わせが論理積条件にならないことに大いに不満があります。 理解度確認テストの解説 さて、これまでの説明で、理解度テストの解答の理由は、お分かりいただけたでしょうか？ 前述の通り、ブランチとパスのフィルタは論理積条件で、タグのフィルタは論理和条件です。 そのため、ブランチとパスの両方の条件を満たすのは「2」で、タグの条件を満たすのは「4」及び「5」になるということです。 on.push を使いこなす タグ＆パスの論理積 on.push は、「tags（tags-ignore）」フィルタと「paths（paths-ignore）」フィルタの組み合わせが論理積条件にならないことは、先に述べました。 しかし、下記のようにワークフローを作ると、タグとパスの組み合わせで論理積条件にできます。 ただし、この方法は、Billable Time（請求可能時間）が計上される機会が増えるため、かかるコストを意識して使わなければいけません。 タグ＆パスの論理積on: push: tags: - 'api-**' jobs: branches_and_paths_or_tags_and_paths: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 2 - name: Check event trigger enabled id: event_trigger env: PATHS: 'src/' run: | git checkout HEAD^ --quiet files=$(jq -n '$ARGS.positional' --args -- $(git show --pretty='' --name-only &quot;${{ github.sha }}&quot;)) if &quot;$(jq -n -r --argjson files &quot;${files}&quot; --arg filter &quot;${{ env.PATHS }}&quot; 'isempty($files[]|select(startswith($filter)))')&quot;; then echo &quot;enabled=false&quot; &gt;&gt; $GITHUB_OUTPUT exit 0 fi echo &quot;enabled=true&quot; &gt;&gt; $GITHUB_OUTPUT - name: Tags and Paths event id: tags_and_paths if: steps.event_trigger.outputs.enabled == 'true' run: | echo &quot;Tags and Paths event&quot; 解説 下記の順番で、イベントをフィルタリングしています。 HEAD コミットをチェックアウトし、コミットの含まれるファイルの一覧を取得します。 ファイルパスフィルタとなる環境変数「PATHS」を用いて、1で取得したファイルの一覧に絞り込みをかけます。 ブランチ＆パスとタグ＆パスの論理和 先ほどのサンプルコードにブランチフィルタを追加して下記のようにすると、ブランチとパスの論理積条件とタグとパスの論理積条件の論理和条件にできます。 これは、日本語だとわかりにくいので式にして書くと、「（ブランチ条件 AND パス条件）OR（タグ条件 AND パス条件）」という意味になります。 また、こちらの方法でも同様に Billable Time（請求可能時間）に気を付けてください。 ブランチ＆パス・タグ＆パスの論理和on: push: branches: - 'feature/**' tags: - 'api-**' jobs: branches_and_paths_or_tags_and_paths: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 2 - name: Check event trigger enabled id: event_trigger env: PATHS: 'src/' run: | git checkout HEAD^ --quiet files=$(jq -n '$ARGS.positional' --args -- $(git show --pretty='' --name-only &quot;${{ github.sha }}&quot;)) if &quot;$(jq -n -r --argjson files &quot;${files}&quot; --arg filter &quot;${{ env.PATHS }}&quot; 'isempty($files[]|select(startswith($filter)))')&quot;; then echo &quot;enabled=false&quot; &gt;&gt; $GITHUB_OUTPUT exit 0 fi echo &quot;enabled=true&quot; &gt;&gt; $GITHUB_OUTPUT case &quot;${{ github.ref_type }}&quot; in &quot;branch&quot;) echo &quot;name=branches_and_paths&quot; &gt;&gt; $GITHUB_OUTPUT ;; &quot;tag&quot;) echo &quot;name=tags_and_paths&quot; &gt;&gt; $GITHUB_OUTPUT ;; esac - name: Branches and Paths event id: branches_and_paths if: steps.event_trigger.outputs.enabled == 'true' &amp;&amp; steps.event_trigger.outputs.name == 'branches_and_paths' run: | echo &quot;Branches and Paths event&quot; - name: Tags and Paths event id: tags_and_paths if: steps.event_trigger.outputs.enabled == 'true' &amp;&amp; steps.event_trigger.outputs.name == 'tags_and_paths' run: | echo &quot;Tags and Paths event&quot; 解説 「ブランチとパス」と「タグとパス」のどちらの組み合わせのフィルタか、判定するために、「github.ref_type」の値を参照しています。 この値が「branch」であれば、「ブランチとパス」条件を満たしていて、「tag」であれば、「タグとパス」条件を満たしているということになります。 おわりに on.push について、イベントフィルタの仕様をおさらいして、タグ＆パスの論理積条件を実現したワークフローを例示しました。 このイベントトリガーを始めとして、GitHub Actions には癖のある仕様のものが多いです。 場合によっては、公式ドキュメントに説明がない仕様がある等、取り扱いがなかなかに大変です。 本記事を、みなさんの最良な CI/CD の仕組みを作るために役立ててもらえれば嬉しいです。 参考文献 GitHub 公式ドキュメント 「Workflow syntax for GitHub Actions」","link":"/articles/describe-github-actions-on-push/"},{"title":"千恋＊万花 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2016年に発売された「千恋＊万花（せんれんばんか）」を攻略完了したので、作品の評価を感想付きでレビューします。 作品概要 あらすじ 湯治場として知られ、交通機関が脆弱で不便な土地である『穂織ほおり』の町。 ここは、昔ながらの和の風景を残す小京都の街並みであり、観光地として有名であった。 主人公 有地ありち 将臣まさおみ は、春祭りによる人手不足解消のため、祖父が経営する旅館『志那都荘しなつそう』へ手伝いに駆り出される。 祖父に挨拶するために『建実神社たけみじんじゃ』へ赴いたところ、岩に刺さった御神刀『叢雨丸むらさめまる』を引き抜くイベントに挑戦することに。 しかし、今まで誰も引き抜けなかったというその刀を、引き抜くどころか、ポッキリ折ってしまう。 慌てふためく彼をよそに、刀の管理者を名乗る少女の幽霊 ムラサメ が現れ、たちまちのうちに巫女姫である 朝武ともたけ 芳乃よしの と婚約を結ばされる。 それから、彼は、穂織の地に纏わる呪いについて知り、深く関わっていくことになる。 登場キャラクター メインヒロイン 朝武ともたけ 芳乃よしの（CV：遥はるか そら、原画：こぶいち） 常陸ひたち 茉子まこ（CV：小鳥居ことりい 夕花ゆうか、原画：むりりん） ムラサメ（CV：佐藤さとう みかん、原画：むりりん） レナ・リヒテナウアー（CV：沢澤さわさわ 砂羽さわ、原画：こぶいち） サブヒロイン 鞍馬くらま 小春こはる（CV：真宮まみや ゆず） 馬庭まにわ 芦花ろか（CV：西山にしやま 冴希さき） 各種スペック システム 前作「サノバウィッチ」と比較して、本作から導入された新機能は太字で記載している。 ストーリープレイ画面 セーブ・クイックセーブ、ロード（お気に入りボイス鑑賞＋シーン回想）・クイックロード、前・次のシーンへ移動、前・次の選択肢へ移動、オート、スキップ・バックスキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ、フローチャート エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞 システム設定 画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、ショートカットキー シナリオ ヒロインの攻略完了ごとに、アフターストーリーがアンロックされる（芳乃・茉子・ムラサメ・レナ・小春・芦花で1話ずつ）。 共通ルート チャプター数：17（構成：1-1~3、2-1~7、3-1~7） 芳乃ルート チャプター数：15（構成：3-8、4-1~3、5-1~5、6-1~2、7-1~3、エピローグ） 茉子ルート チャプター数：15（構成：3-8、4-1~3、5-1~3、6-1~5、7-1~2、エピローグ） ムラサメルート チャプター数：23（構成：4-1~4、5-1~4、6-1~4、7-1~3、8-1~5、9-1~2、エピローグ） レナルート チャプター数：15（構成：3-6、4-1~2、5-1~4、6-1~2、7-1~3、8-1~2、エピローグ） 小春ルート チャプター数：17（構成：小春＆芦花共通 4-1~5・5-1~2・6-1~3、小春個別 6-4・7-1・8-1~4・エピローグ） 芦花ルート チャプター数：16（構成：小春＆芦花共通 4-1~5・5-1~2・6-1~3、芦花個別 6-4~5・7-1・8-1~2・エピローグ） ムービー曲 オープニング 「恋ひ恋ふ縁」 歌：KOTOKO エンディング 芳乃ルート 「愛しさと感謝の気持ち」 歌：榊原ゆい 茉子ルート 「ふたりで」 歌：Riryka(Angel Note) ムラサメルート 「ふたつの影」 歌：春風まゆき(Angel Note) レナルート 「GIFT」 歌：カサンドラ 小春ルート 「Love flower」 歌：葉月(Angel Note) 芦花ルート 「キミのとなり」 歌：tohko メインヒロイン評論 朝武 芳乃 オススメ度：★★★☆☆ 性格や人柄 将臣と同学年で、かつて穂織を治めた朝武家が受け継いできた建実神社の巫女姫である。 当初は、冷たくよそよそしい態度を将臣に頑なに見せており、彼を可哀そうに感じることもあって、彼女への心象は非常に悪い。 しかし、ストーリーの進行と共にデレていく様子や、彼女自身の成長が描かれるため、そのうち評価を改めていくことになるであろう。 したがって、彼女は、プレイヤーの印象を反転させるギミックによって精巧に創られたヒロインである。 なるほど、ではツンデレか、と言えば、これはギミックの話であって、性格は全く異なるのだ。 素直で嘘が付けず、生真面目で責任感があり、強い意志を持ち最後までやり抜く性格である。 見どころ 個別ルートは、ストーリーの山場をひとつ下りた後に、二つ目が現れることもなくそのままあっさりと終わり、肩透かしを食らった。 いちゃいちゃ糖度は全体的に高めだが、通常CGのバリエーションが少なく、キスCGに頼りっぱなしで、イマイチ火力不足だったのは少々残念である。 そういう背景もあって専用CGがある「処女をもらって下さい」発言シーンは、強烈に印象に残る。 このシーンは、彼女の気質が強く表れており、キャラクター達の一連のやりとりも面白く、一見の価値はあるので、彼女を攻略してみて欲しい。 芳乃ちゃんの衝撃発言に度肝を抜かされる © YUZUSOFT / JUNOS INC. All Rights Reserved. 常陸 茉子 オススメ度：★★★★☆ 性格や人柄 将臣と同学年で、穂織の巫女姫である芳乃の側仕えと護衛を務める忍者である。 普段から物腰柔らかく気丈夫で世話好き気質だが、揶揄ったり悪戯したりと茶目っ気も見せる。 そして、料理・掃除・洗濯など朝武家における家事をすべて一人で熟し、そのうえお昼のお弁当まで手作りで準備してくれる。 一方、異性とのコミュニケーション経験が少なく、女の子扱いされることに慣れておらず、ひそかに少女漫画のシチュエーションに憧れる純情で乙女なところもある。 異性として意識していない時には、ドキッとさせるような行動を積極的にするのに、意識するとやられっぱなしになるという、攻撃力全振りノーガード系ヒロインである。 見どころ 個別ルートは、生い立ちから色々なものを諦めて卑屈になっていた彼女が、呪いをきっかけに将臣と恋仲となり、殻を破って成長していく姿が描かれる。 また、将臣が積極的にアプローチをかけることで、彼女が可愛いリアクションをしてくれるため、とても美味である。 最推しシーンを選ぶならば、疑似デートの最後で将臣が彼女に告白するシーンであろう。 直後のシーンは小一時間ほどライターに苦言を呈したいが、そのシーンは彼の格好良さと彼女の可愛さのマリアージュが素晴らしいのだ。 茉子ちゃんは、将臣君にこの後顎クイされます © YUZUSOFT / JUNOS INC. All Rights Reserved. ムラサメ オススメ度：★★★★☆ 性格や人柄 神刀「叢雨丸」の管理者となるために、500年ほど前に人柱となった少女の幽霊である。 そのため、一般人には姿も見えず会話もできないが、叢雨丸に縁のある芳乃・茉子・レナの三人は、彼女の姿が見えて会話ができる。 さらに、その持ち主に選ばれた将臣は、それだけではなく、彼女との物理的接触が唯一可能である。 普段は、生意気な態度をとったり、頭を撫でられて喜んだりと、外見通りの子供っぽさを見せる。 しかしながら、最年長ということもあり、時折大人の色気を感じさせる立ち振る舞いをするギャップがあるのも彼女の魅力の一つだろう。 ロリババアキャラが好きな紳士淑女の性癖に直撃するヒロインである。 見どころ 個別ルートは、御神刀イベントが無くなり穂織の財政が傾いたことで、代わりの町おこしイベントを探し始め、奔走するうちに将臣と彼女が親密になるストーリーである。 彼女が人柱になる前の過去を知り、それから数百年にも及ぶ想いに触れる機会があるため、彼女を幸せにしてあげたいと考えるプレイヤーは少なくないだろう。 シリアス要素が垣間見える彼女ではあるが、可愛らしさで我々の心を潤してくれるので安心して欲しい。 将臣に膝枕するシーンは、彼女の魅力が凝縮されているので、攻略して是非ご堪能あれ。 私も仕事で疲れているので、癒してくれませんか？ © YUZUSOFT / JUNOS INC. All Rights Reserved. レナ・リヒテナウアー オススメ度：★★★☆☆ 性格や人柄 志那都荘の人手不足解消のために従業員として雇われたラップランド出身の外国人留学生。 ハグした芳乃と茉子に「これが世界」という感想を抱かせるほどの驚異的なスタイルの持ち主だが、如何わしい本を見て卒倒するほど初心である。 間違った用法の日本語を使って、周囲をヒヤリとさせることもあるが、本人の前向きでポジティブな性格で誤魔化せているのか、いつも事なきを得ている。 彼女は良い意味でも悪い意味でも表裏がなく、キャラクター性の味付けとなる癖やギャップがないため、物足りなさを感じることもあるが、王道的で正統派のヒロインとも言えよう。 見どころ 個別ルートは、穂織や叢雨丸など作品の根幹に関わる真相が盛り沢山な内容で、他ヒロインルートでの伏線が回収されてグランドエンディングとなる重要なストーリーである。 そのため、他ヒロインよりもいちゃいちゃ糖度が低めだからなのか、彼女がこの役割を果たすために創られたキャラクターであるように感じてしまって、それが残念でならない。 しかし、その代わりにストーリーの質は全ヒロイン中最も優れており、終盤に近づくほど見どころが多くなっていき、プレイしていて面白く、読後感も良好である。 さて、そんな彼女のルートだが、お泊り会で二人で夜空を見ながら、将臣が告白するシーンはとても素敵なので、このシーンを推しとしたい。 夜空を見ながらの素敵な告白シーン © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 88点（優/A+ランク） 全体的にどこかしら物足りなさを感じる薄い味付けだが、癖がなくバランスの良い仕上がりである。 したがって、本作は、美少女ゲームの入門としてオススメできる作品と言えよう。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 10/10点 構成 7/10点 演出 6/10点 合計 23/30点 グラフィック クオリティ 10/10点 ボリューム 8/10点 合計 18/20点 キャラクター 作り込み 9/10点 ボイス 10/10点 合計 19/20点 プレイ環境 音楽 10/10点 動画 9/10点 システム 9/10点 合計 28/30点 コメント シナリオ 穂織に纏わる呪いを中心にしてストーリーが構築されており、完成度は高いと言える。 コンパクトできれいにまとまっているが、レナルートに伏線回収の役割が集中しすぎて、他のヒロインルートではコアテーマを十分に掘り下げられていなかった。 そのため、全ルートの攻略を完了するまでは、消化不良感というか、物足りない印象があった。 とはいえ、退屈や苦痛を感じることがほぼ無いので楽しみながらプレイできるし、完走できれば満足感が得られるため、ここは評価すべき点であろう。 ただし、アフターストーリーが本編のエピローグよりも前の時系列になっていて、アフターではなくサイドストーリーのようになっているのは減点要素である。 グラフィック いつも通りの高クオリティだが、通常CGとHCGのボリューム配分がアンバランスであった。 個別ルートで、糖度高めなシチュエーションでCGがないのは、実際にそうではないのにボリューム不足を感じてしまうので、非常に残念である。 キャラクター ヒロインの作り込みが良く、ボイスもキャラクターイメージにフィットしていて、とても魅力的である。 それぞれのヒロインについては、前述のメインヒロイン評論をご覧いただきたい。 音楽・動画・システム OP「恋ひ恋ふ縁」は、KOTOKO曲ということもあり、ゆずソフト作品中トップクラスの良曲である。 加えて、ED曲も作品や各ヒロインに合わせた和風な曲調で、音楽面は文句なしの満点。 そして、システムは、前作と比べて大幅に強化されており、お気に入りボイスシーン回想や、フローチャートなど、より作品に没入できるようになった。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 千恋＊万花【萌えゲーアワード2016 準大賞 受賞】電車も通っていない山の中に、『穂織（ほおり）』の町はある。周りとの交流も薄いせいか、文明開化にすら乗り遅れた田舎町。だがそのおかげで独自の発展を遂げ、今では一風変わった温泉地... Steam 全年齢版 Senren＊Banka on SteamSenren＊Banka is a Japanese-style visual novel produced by Yuzusoft, a Japanese developer of romance VNs. This game commemorated Yuzusoft&#39...","link":"/articles/review-senren-banka/"},{"title":"リンクプレビュープラグイン version 1.1 の内容解説","text":"2023年12月26日（火）、Hexo 用タグプラグイン hexo-tag-ogp-link-preview v1.1.0 のアップデートを公開しました。 今回は、README.md に書いていないアップデート内容の解説とリリースの小噺を書き綴ります。 プラグインの紹介 hexo-tag-ogp-link-previewについては、前回の初回リリース記事にまとめています。 どんなプラグインか、どうして開発に至ったかを説明していますので、気になった方は是非ご拝読ください。 アップデート内容の解説 今回のアップデートで、以下の3つの新機能を追加しています。 名前付きパラメータ 画像に代替テキスト追加 ネイティブ遅延読み込み 名前付きパラメータを除いて、PageSpeed Insights にてパフォーマンス・アクセシビリティ・SEO の各監査項目に合格するための改良が主体です。 名前付きパラメータ アップデートを今後も重ねていく上で、名前付きパラメータのサポートは必須でした。 なぜなら、この改修が含まれずに現状のままの場合、指定したいパラメータのために他の全てのパラメータもセットで指定するという現象を、将来的に引き起こす可能性があるからです。 これは、プラグインを利用するユーザーにとって大きなストレスとなります。 ゆえに、記事を書く人のためのユーザビリティと、記事のメンテナビリティを高く保つことを目的として導入したのです。 この機能は、プログラミングに慣れ親しんでいる方であればご存じかと思いますが、それ以外の方のためにも簡単に使い方をご紹介します。 できることをとても大雑把に表現すると、必須ではないパラメータを、名前と値をセットで指定すると、任意の順番で配置できるという機能です。 より分かりやすいように実例を示します。 あなたは、自分が設定したリンクプレビューに対して、rel=&quot;noreferrer&quot;とloading=&quot;eager&quot;を指定したいと考えた、としましょう。 その時、この機能があることで、次のような書き方ができるのです。 rel:noreferrer, eager:loading の書き方{% link_preview https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/ loading:eager rel:noreferrer %} hexo-link-preview-npm-publish の記事 {% endlink_preview %} プラグインのパラメータは、url、target、rel、loading の順で書くのが通常です。 なんと、この機能によって、target を省略して、rel や loading の値を指定できるのです（※上記例の場合、target はデフォルト値の _blank になります）。 そして、実際の記事では、以下のようなHTMLが生成されます。 生成されるHTMLのイメージ&lt;a href=&quot;https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; class=&quot;link-preview&quot;&gt; &lt;div class=&quot;og-image&quot;&gt; &lt;img src=&quot;https://blog.chaotic-notes.com/images/technology_programming_title.webp&quot; alt=&quot;hexo-tag-ogp-link-previewの公開に纏わる閑話&quot; loading=&quot;eager&quot;&gt; &lt;/div&gt; &lt;div class=&quot;descriptions&quot;&gt; &lt;div class=&quot;og-title&quot;&gt;hexo-tag-ogp-link-previewの公開に纏わる閑話&lt;/div&gt; &lt;div class=&quot;og-description&quot;&gt;2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛も...&lt;/div&gt; &lt;/div&gt; &lt;/a&gt; 便利な機能ですので、是非ご活用ください。 画像に代替テキスト追加 これを新機能として取り扱っていますが、実質的には不具合修正となります。 プラグイン作成の参考としたhexo-tag-link-previewで、イメージエレメントに対して alt 属性が無かったため、そのまま見落としていました。 このブログを PageSpeed Insights で監査し、アクセシビリティ・SEO の項目で検知されたことで、ようやく気が付いたのです。 修正自体はすぐでしたので、今回のバージョンに取り込ませて頂きました。 この改修により、プラグインを利用している方が、特別な対応をする必要はありません。 プラグインをアップデートしてから記事を再生成すれば、リンクプレビュー画像に代替テキストが付与されるようになります。 PageSpeed Insights のアクセシビリティ・SEO の改善にご利用ください。 ネイティブ遅延読み込み ネイティブ遅延読み込みは、今回のアップデートの目玉機能として位置付けています。 プラグインは、OpenGraph プロトコルの og:image の値から画像の URL を取得します。 取得した URL 先の画像は、圧縮率の悪いフォーマットであったり、横 1200 ピクセルに縦 630 ピクセルの巨大なサイズであったりすることもあります。 その一方で、リンクプレビューは、重要度の高いコンテンツとして取り扱うことは多くありません。 なぜなら、ブログのドキュメント内でビジュアルリッチな引用の用途であることがほとんどだからです。 初期バージョンで生成したリンクプレビューは、上述のようにページに対して、低い重要度にも関わらず、高い影響度を持つという、ギャップを抱えていました。 この状態だと、ページ読み込み時、ブラウザにリンクプレビュー画像のダウンロードとレンダリングを優先させます。そう、すぐに必要でないにも関わらず、です。 これは、リンクプレビューを使用したページの First Contentful Paint や Largest Contentful Paint の速度に悪い影響を齎します。 実際にこのブログでは、「RIDDLE JOKER」のレビューや「サノバウィッチ」のレビューが、その影響を多大に受けました。 これらのページに様々なチューニングを施しても、ついにパフォーマンススコアが90点を超える機会を得ることはできなかったのです。 以上より、優先的に解決するべき課題だと認識したため、今回のアップデートに組み込みました。 この機能も、プラグインアップデート後に特別何かする必要はありません。 記事を再生成すれば、&quot;lazy&quot;の値を持つ loading 属性が、リンクプレビュー画像に自動で付与されます。 もちろん、遅延読み込みをしたくない方もいらっしゃるでしょうから、ブラウザの規定動作となる&quot;eager&quot;も用意してあります。 加えて、初期バージョンとの後方互換性を維持する目的で、loading 属性を消す&quot;none&quot;も利用できます。 ご自身のシーンや状況にあわせて、ご使用いただければ幸いです。 リリース小噺 リリースに四回失敗した プラグインのプロジェクトでは、Markdown 形式でマイルストーンの説明文を記載していて、リリースパブリッシュ時に使用しています。 この時の GitHub Actions ワークフローで、toJSON 関数によりマイルストーンの説明文を取得します。 しかし、この関数は、特殊文字をエスケープ処理しない仕様です（数年間使用していたけど、このパターンに遭遇したことがなかったため、今まで知らなかった）。 そのため、そのトラップに上手く嵌り、リリースできない事件が発生。 とはいえ、ワークフローはアプリケーションのリリースに影響を及ぼすものではないため、今回は手動でリリース発行しました。 GitHub Actions 等の CI/CD ツールってこういうの良くあるんですよねぇ、っていう愚痴でした。 今後のアップデート予定 次のマイナーバージョンであるv1.2.0では、エラーハンドリングとリトライ処理を中心としたアップデートを行う予定です。 また、初回リリース記事でアップデート予定に記載した「固定class名に接頭語を付与」する機能も、新機能として追加します。 これにより、リンクプレビューごとにデザイン調整を行えるようになりますので、次のバージョンまで気長にお待ちいただければと思います。 ここまでご覧いただきありがとうございました。 次回のマイナーアップデート後も今回と同様の解説記事を投稿予定なので、その時はどうぞよろしく。","link":"/articles/update-hexo-link-preview-plugin-v1-1-0/"},{"title":"hexo-tag-ogp-link-previewプラグインを公開しました","text":"2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。 本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛もない話題を中心に書き綴ります。 何のためのプラグインか hexo-tag-ogp-link-previewは、OpenGraph プロトコル対応のページから取得したデータを用いてリンクプレビューを生成し、Hexo のブログ記事に埋め込むためのプラグインです。 hexo-tag-ogp-link-previewA Hexo tag plugin for embedding link preview by OpenGraph on article.. Latest version: 1.1.1, last published: 3 months ago. Start using hexo... FaceBook を始め X(Twitter) 等の SNS でリンク共有時に表示されるようなカードを、Hexo でも上記のような感じで再現できます。 開発に至った経緯 元々は、書いた「RIDDLE JOKER」のレビューに、Fanza Games や Steam へのビジュアルリッチなリンクを欲したことが発端です。 レビューを投稿するにあたり、作中のスクショを張りたかったことと、ゲームそのものが R18 指定だったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。 結果、GitHub Pages + Hexo.js + Icarus の組み合わせで、ブログの作成と相成りました。 ですが、Hexo 並びに Icarus にはデフォルトでリンクプレビュー機能が存在しません。 まずは、どうすれば実現できるのかをググりました。 すると、「Hexo+Icarus リンクカードを設定するという、まさに正鵠を射る記事を発見。 そこに書かれていたhexo-tag-link-previewをnpm installして使うことにしました。 しかし、レビュー記事をプレビュー表示してみると、生成したページに問題が発生しています。 なんと、Fanza Games 版のリンクが、&quot;undefined&quot;ではありませんか。 そこで、該当のプラグインは OSS なので、Bug issue を立てて修正していただく考えに至りました。 とはいえ、プラグインの最終更新日は、今から2年以上前で止まっています。 加えて、作者のブログ記事の「hexo-tag-link-previewをnpmで公開しました。」で、現在は Hexo を使用していない、との記述を発見。 ゆえに、このプラグインがメンテナンスされることは今後ないだろうと判断し、参考にしてゼロから作り直すことを決意しました。 それから、数日で自作プラグインが完成し、無事にレビュー記事にも反映。 作り始めた頃は公開しようとは思っていなかったのですが、もしかして同じ問題にぶち当たってリンクプレビューを諦めた人がいるのではないかと思いました。 なので、しっかりとコードリファクタしたうえで、テストも整備して、プラグインを公開させていただきました。 皆様に使っていただければ幸いです。 参考プラグインとの違い Hexoは、snake_caseで記載するのが一般的であるようです。 そのため、hexo-tag-link-previewがlowerCamelCase表記であったところを、hexo-tag-ogp-link-previewではsnake_caseに変えています。 これは、タグ名と設定項目の両方に適用されます（タグ名は&quot;linkPreview&quot;から&quot;link_preview&quot;に、設定項目は例えば、&quot;className&quot;が&quot;class_name&quot;へ変更）。 この違いさえ忘れずに、正しく修正すれば、プラグインそのものを差し替えても、そのまま動作する仕様となっています。 また、hexo-tag-link-previewと異なり、hexo-tag-ogp-link-previewでは、タグのパラメータの記載順を入れ替えても正しく認識します。 とはいえ、現バージョンで出来るようにしているだけ（※注：動作未保証です）で、将来的には変更する可能性があるので、この仕様については参考程度にして頂ければと思います。 Icarusテーマ利用者向け このセクションは、Icarus テーマ利用者向けに「RIDDLE JOKER」のレビューで表示している FaceBook 風なリンクプレビューデザインを設定するための解説をします。 デザイン設定 記事のスタイル定義ファイルに、リンクプレビューで使用する変数定義と各種クラスを追加します。 2024年01月16日更新 変数の記載場所を一か所に集約 1.91:1 のアスペクト比でリンクプレビュー画像を表示できるように修正 角半径を親要素で調整するように修正 画像の下部に余白ができないように修正 descriptions クラスの padding 設定を修正 link-preview クラスの一部の設定値を変数宣言に変更 themes/icarus/include/style/article.styl$link-preview-card-border ?= 1px solid #cbd0d3 $link-preview-card-radius ?= 8px $link-preview-card-margin ?= 1rem 0 $link-preview-card-bg-color ?= #f2f3f5 $link-preview-card-og-description-color ?= #525252 article /* ... 省略 ... */ &amp;.article /* ... 省略 ... */ .content /* ... 省略 ... */ .link-preview display: block overflow: hidden border: $link-preview-card-border border-radius: $link-preview-card-radius margin: $link-preview-card-margin font-size: 1rem background-color: $link-preview-card-bg-color .og-image img display: block object-fit: cover object-position: center aspect-ratio: 40 / 21 width: 100% height: auto .descriptions padding: 0.5rem 1rem .og-title font-size: 1.25rem font-weight: 600 margin-bottom: 0.25rem .og-description color: $link-preview-card-og-description-color 以上で、デザインの設定は完了です。 Hexo設定 続いて、Hexo 設定ファイルで、hexo-tag-ogp-link-previewの設定調整を行います。 デフォルト設定状態では、FaceBook 風なデザインの再現を阻む不都合が二つ発生します。 それは、リンクの文字色が目立つということと、画像がギャラリーにアイテムとして追加されてしまうということです。 一つ目は、class_name.anchor_linkにlink-muted link-previewを設定することで防ぎます。 二つ目は、class_name.imageにnot-gallery-itemを設定することで対策できます。 設定ファイルは、以下のように記載してください。 _config.yml# ... ファイルの上の部分は、省略 ... link_preview: class_name: anchor_link: link-muted link-preview image: not-gallery-item 他の設定値はデザインに影響しませんので、皆様のご自由にしていただいて大丈夫です。 今後のアップデート予定 今後は、v1.1.0のマイナーアップデートリリースを予定しており、ソースコードのメンテナビリティ強化のためのリファクタがメインとなります。 機能の強化としては、プラグインが生成する HTML タグの固定クラス（&quot;og-image&quot;や&quot;descriptions&quot;など）に対して、リンクプレビューごとに同一の接尾辞をつけられるようにして、シーンに応じてデザインを調整できるようにする予定です。 このサイトでは、レビュー記事にラージサイズ画像のリンクプレビュー、それ以外の記事に細長なリンクプレビューといった使い分けをする想定です。 ここまでご覧いただきありがとうございました。 次回のマイナーアップデート後も、今回のような閑話記事を投稿予定なので、その時は良しなに。","link":"/articles/hexo-link-preview-npm-publish/"},{"title":"RIDDLE JOKER 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2018年に発売された「RIDDLE JOKER（リドルジョーカー）」を攻略完了したので、作品の評価を感想付きでレビューします。 この記事は、「RIDDLE JOKER（リドルジョーカー）」のレビューです。 他にも、本作の攻略ガイド記事や、ゆずソフトの他作品のレビュー記事もありますので、そちらも是非ご覧ください。 作品概要 あらすじ ここは、かつて「超能力」と呼ばれていた、不思議な力「アストラル」能力が存在する世界。 主人公 在原ありはら 暁さとる はアストラル能力者であり、その力を使って暗躍する非合法国家諜報組織『情報局特別班とっぱん』のエージェントである。 とある任務のため、義妹の 在原ありはら 七海ななみ と共に、アストラル能力研究が盛んな『橘花学院きっかがくいん』へ転校生として潜入することになる。 潜入先の学院では、三司みつかさ あやせ、二条院にじょういん 羽月はづき、式部しきべ 茉優まゆ と出会い、順調に仲を深めていく。 しかし、学院での任務中、予期せぬ事態に巻き込まれ、三司みつかさ あやせ に正体がバレてしまっただけでなく、彼女がみんなに隠していた秘密も知ってしまう。 この出来事をきっかけに、学園に潜む闇、そして、日本に潜む闇に、暁は巻き込まれていく。 登場キャラクター メインヒロイン 三司みつかさ あやせ（CV：沢澤さわさわ 砂羽さわ、原画：むりりん） 在原ありはら 七海ななみ（CV：くすはらゆい、原画：こぶいち） 式部しきべ 茉優まゆ（CV：西園にしぞの 純夏すみか、原画：むりりん） 二条院にじょういん 羽月はづき（CV：遥はるか そら、原画：こぶいち） サブヒロイン 壬生みぶ 千咲ちさき（CV：夏和小かなこ） 各種スペック システム 前作「千恋＊万花」と比較して、本作から導入された新機能は太字で記載している。 ストーリープレイ画面 セーブ・クイックセーブ、ロード・クイックロード、前・次のシーンへ移動、前・次の選択肢へ移動、オート、スキップ・バックスキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ、フローチャート、タイトル画面へ移動 エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞、お気に入りボイス鑑賞＋シーン回想（※ロード機能から移動） システム設定 基本、画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、ショートカットキー、ゲームパッド シナリオ ヒロインの攻略完了ごとに、アフターストーリーがアンロックされる（あやせ・七海・茉優・羽月は2話、千咲は1話）。 注：目安プレイ時間は、タイトル画面の「はじめから」を押してから、攻略完了後にタイトル画面に戻ってくるまでを、最短経路で機械的に計測した時間から算出しています。 共通ルート チャプター数：14（構成：PROLOGUE、1-1~4、2-1~4、3-1~6） 三司 あやせルート チャプター数：14（構成：3-7、4-1~3、5-1~3、6-1~4、7-1~2、EPILOGUE） 目安プレイ時間：7時間50分 在原 七海ルート チャプター数：16（構成：3-7、4-1~4、5-1~2、6-1~3、7-1~5、EPILOGUE） 目安プレイ時間：7時間00分 式部 茉優ルート チャプター数：32（構成：3-7、4-1~6、5-1~8、6-1~6、7-1~5、8-1~5、EPILOGUE） 目安プレイ時間：7時間15分 二条院 羽月ルート チャプター数：27（構成：4-1~3、5-1~4、6-1~4、7-1~3、8-1~4、9-1~4、10-1~4、EPILOGUE） 目安プレイ時間：6時間50分 壬生 千咲ルート チャプター数：10（構成：3-7、4-1~4、5-1~2、6-1~2、EPILOGUE） 目安プレイ時間：5時間45分 ムービー曲 オープニング 「astral ability」 歌：橋本みゆき・佐咲紗花 エンディング あやせルート 「ゆびきり」 歌：霜月はるか 七海ルート 「ずっと」 歌：葉月(Angel Note) 茉優ルート 「初恋」 歌：tohko 羽月ルート 「恋だより」 歌：羽生みいな(Angel Note) 千咲ルート 「陽だまり笑顔で」 歌：春風まゆき(Angel Note) メインヒロイン評論 三司 あやせ オススメ度：★★★★☆ 性格や人柄 暁とは同学年のクラスメイトで、学生会長を務める。 空間を対象にして斥力・引力を操作するアストラル能力を持つ。 みんなの前では、どんな時でも猫をかぶっていて、上品で清楚なキャラを演じている。 しかし、秘密を知っている暁の前では、ひねくれたり、やさぐれたり、ガンを飛ばしたり、と粗野な振る舞いをする。 このことから分かる通り、全ヒロイン中、ギャップが最も激しいキャラである。 見どころ 付き合い初めてからデレが入ると、暁視点で見る普段の彼女とのギャップも相まって、凄まじい破壊力を伴う。 彼女を攻略中に、そのギャップによって脳が破壊され、新しい扉を開いた紳士淑女は少なくないであろう。かくいう私もそうである。 公私で表裏が激しいヒロインを好きな人に、是非推したい。 では、彼女の魅力をより理解できるように至高の激カワシーンを二つ紹介しよう。 一つは、共通ルートで、猫の気持ちを知るために、猫になりきるプレイ（猫耳あり）をした時。 もう一つは、個別ルートで、ホラーゲームプレイ中に怖がりながら腕をつかんできた時。 どちらも筆舌に尽くしがたい程の可愛さである。それを具体的に説明をするのは野暮というもの。 ちなみに、彼女は本作の根幹となる秘密を抱えているので、そこも意識しながら攻略すると良いだろう。 猫耳を装着した激カワあやせさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 在原 七海 オススメ度：★★★☆☆ 性格や人柄 暁とは一つ年下で血縁関係のない兄妹であり、特班における相棒役でもある。 外傷を治癒できるアストラル能力の持ち主。 家事全般を卒なく熟すだけでなく、PC関連の知識も持ち合わせており、クラッキングもお手の物。 性格面においても、面倒見が良く、優しく、気遣い上手なので、文句の付け所がない。 そのうえ、スタイルも良い、という圧倒的高スペックを誇る。 ただし、過去のとある出来事によって極度の人見知りとなっており、所謂コミュ力と呼ばれるものは、最底辺のポンコツである。 見どころ 彼女は、世話焼き＋Sッ気＋小悪魔＋義妹の複合属性である。 これらの属性が好きな紳士淑女には、彼女をおすすめせざるを得ない。 特に、共通ルートの「はい、あーん」で食べさせてくれるシーンが至高。 彼女の「可愛い」要素がここに全て詰まっている。 彼女はこのような勘所で可愛さを魅せてくるので、暁が無意識に「だだ甘」なシスコンになるのも致し方なかろう。 なお、個別ルートにて、彼女が作る餃子の話は、面白くて可愛くてほっこりするので必見。 七海ちゃんに頼られて拒否できる兄など居ない © YUZUSOFT / JUNOS INC. All Rights Reserved. 式部 茉優 オススメ度：★★★☆☆ 性格や人柄 暁とは二つ年上の先輩（二度留年している）であり、学院に雇われている研究員でもある。 アストラルを空間中に固定する能力を持つ。 普段は、落ち着いた雰囲気のお姉さん然としていて、類い稀な才媛である。 他人からはどう見ても魅力溢れる彼女だが、自尊心が異常に低く、甘えん坊で自信がないところがある。 見どころ 個別ルートは、暁が特班の任務中に失態を犯して正体バレするが、彼女の都合もあり難を逃れるという展開から始まる。 プレイヤー視点からは、暁の一連の行動に感情移入しにくいため、批判的な感情を持つかもしれない。 なので、攻略を途中でやめようと思った方もいるかもしれないが、何とか耐えてほしい。 ここを乗り越えられたなら、全ヒロイン中最も純情可憐な彼女が拝めるのである。 さて、彼女は、年上＋才女＋甘えん坊＋姉の複合属性持ちである。 しっかりしたお姉さんが時折弱さを見せるのが好きな紳士淑女の方には、間違いなくクリティカルヒットするであろう。 彼女はとても優秀であるにも関わらず、なぜ二度も留年したのか。 三司あやせ同様に本作の根幹をなす理由が存在するため、是非攻略してみてほしい。 茉優先輩にヨシヨシされたい人生であった © YUZUSOFT / JUNOS INC. All Rights Reserved. 二条院 羽月 オススメ度：★★★★☆ 性格や人柄 暁とは同学年のクラスメイトで、主人公が住む学院寮の寮長を務める。 水を自在に操るアストラル能力の持ち主。 真面目で責任感が強く、とても真摯な性格で、むっつりスケベである。 自分を犠牲にしても誰かの為になることを厭わない献身性の気質も持ち合わせており、まるで聖女のようである。 時代劇が好きであり、口調や思想、信条など様々な面で多大な影響を受けている。 見どころ 個別ルートは、暁とひたすら初々しくイチャつく高糖度のシナリオである。 ストーリーの本筋に関係ないことは残念だが、その代わりに不安要素は存在せず、無心で楽しめる。 とはいえ、全く何もないということはなく、山あり谷ありの普通のラブコメなので、安心して欲しい。 そして、全ヒロイン中唯一、膝枕及び壁ドン（※茉優にもあるがSDなので除外）のシチュエーションCGが存在する。 また、彼女だけが手作り弁当を持ってきてくれる。有難いことにそのCGもある。 他のヒロインは、そういったことをしてくれないため、特筆に値する。 さて、彼女については、シチュエーションCGが多いため、どのシーンを至高とするかは非常に悩ましい。 強いて挙げるのであれば、個別ルートに入ってからの犬なりきりプレイであろう。 このシーンで、彼女の可愛さに紳士淑女諸君らが、ハートを撃ち抜かれることは想像に難くない。 異能力モノには興味ないが、ラブコメは好きという方に、攻略を推したいヒロインである。 ショッピングモールで犬真似を晒す羽月さん © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 85点（優/Aランク） どこかの要素が極端に偏重しておらず、バランス感覚に非常に優れた作品に仕上がっている。 本作もゆずソフトの前評判通りに、全評価項目が平均点以上の優作であると言えよう。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 8/10点 構成 7/10点 演出 6/10点 合計 21/30点 グラフィック クオリティ 10/10点 ボリューム 10/10点 合計 20/20点 キャラクター 作り込み 9/10点 ボイス 9/10点 合計 18/20点 プレイ環境 音楽 8/10点 動画 9/10点 システム 9/10点 合計 26/30点 コメント シナリオ どの個別ルートにおいても、CGを上手いタイミングで見せており、ダラダラ感を感じることがないため、一定水準以上の質は維持できていた。 しかし、主人公の設定やアストラル能力という素材を上手く活かせていたかと問われれば疑問が残る。 なぜならば、比較的出来の良いあやせルートに対し、茉優ルートの序盤や七海ルートの終盤の強引な展開が悪目立ちし、ストーリーの質のばらつきが顕著に出ていることを認識してしまうからである。 加えて、羽月と千咲が暁と一切関わっていなくとも、本筋のストーリーが成立してしまうのも悪い点と言えるだろう。 グラフィック むりりん先生及びこぶいち先生を原画とするイベントCGは、非常に高品質で安定しており、文句なしの満点。 もちろん、こもわた遙華先生のSDも、可愛く、面白く、格好良く、と三拍子揃った一級品。 また、立ち絵そのものの差分や表情差分も相当あるので、会話中のヒロインも表情豊かであり、満足感が高い。 キャラクター キャラクターの作り込みが素晴らしく、どのヒロインも被らない個性があって可愛らしさもあり、とても魅力的である。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム 音楽は、素晴らしいOP曲「astral ability」を筆頭に、ED曲もヒロインごとにきちんと彼女たちらしさが溢れたものが用意されており、いずれも良曲である。 システムは、フローチャート機能が素晴らしい。フローチャート画面上で選択肢を選ぶと、どのルートに進むか確認できる。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 RIDDLE JOKER【こちらの商品は修正パッチ Ver.1.14aを適用済です】※2/17 15時以降に適用されています。━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…かつては【超能力】と呼... Steam 全年齢版 Riddle Joker on SteamFor decades, superpowers and psychic abilities were thought to be mere science fiction, but the discovery of a certain particle called the &... 関連記事 前作「千恋＊万花」 レビュー記事 攻略ガイド記事（準備中） 次作「喫茶ステラと死神の蝶」 レビュー及び攻略ガイドの記事準備中","link":"/articles/riddle-joker-review/"},{"title":"サノバウィッチ 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2015年に発売された「サノバウィッチ SABBAT OF THE WITCH」を攻略完了したので、作品の評価を感想付きでレビューします。 こちらは、「サノバウィッチ SABBAT OF THE WITCH」のレビュー記事です。 作品の詳細攻略は、ガイド記事を投稿していますので、そちらを是非ご覧ください。 作品概要 あらすじ 主人公 保科ほしな 柊史しゅうじ は、先天的に「他人の自分に向ける感情を五感で受け取る」不思議な能力がある。 その力に苦しんだ結果、『姫松学院ひめまつがくいん』に入学する頃には、本心よりも場の空気や雰囲気を重視して、他人の頼みを断れない悪癖を持っていた。 とある日のこと、図書委員のクラスメイトのお願いを断れず、放課後に代理の作業をした柊史。 図書室の奥でひとり居残りしていると、綾地あやち 寧々ねね が異様な様子で入室してきたかと思いきや、清楚な彼女の思いがけない姿を目撃する。 それから始まる一連の出来事をきっかけに、彼女が「魔女」であることを知る。 魔女は、人から溢れ出た心の欠片を一定量回収し、対価に釣り合う代償を支払うことで、自分の願いを一つだけどんな事でも叶える魔法を発動できる。 先日の彼女の痴態は、対価となる重い代償によるものだったのである。 彼女が、それほどの代償を払ってまで魔女になった理由は何なのか？ なぜ彼が、苦しみを味わうような不思議な力を持って生まれてきたのか？ ――交わることのなかった二人が出会った時、物語の歯車が回り始める。 登場キャラクター メインヒロイン 綾地あやち 寧々ねね（桐谷きりたに 華はな） 因幡いなば めぐる（遥はるか そら） 椎葉しいば 紬つむぎ（黒咲くろさき そら） 戸隠とがくし 憧子とうこ（明科あけしな まなさ） サブヒロイン 仮屋かりや 和奏わかな（小鳥居ことりい 夕花ゆうか） 各種スペック システム 前作「天色＊アイルノーツ」と比較して、本作から導入された新機能は太字で記載している。 ※本作から、システム音でキャラクターボイスを選べるようになった ストーリープレイ画面 セーブ・クイックセーブ、ロード（お気に入りボイス鑑賞）・クイックロード、前・次の選択肢へ移動、オート、一つ前のセリフに戻る、スキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ（シーンセレクト） エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞 システム設定 画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、ショートカットキー シナリオ ヒロインの攻略完了ごとに、アフターストーリーがアンロックされる（寧々・めぐる・紬・憧子・和奏で1話ずつ）。 注：目安プレイ時間は、タイトル画面の「START」を押してから、攻略完了後にタイトル画面に戻ってくるまでを、最短経路で機械的に計測した時間から算出しています。 共通ルート チャプター数：25（構成：1-1~6、2-1~3、3-1~9、4-1~7） 綾地 寧々ルート チャプター数：43（構成：4-8・5-1~9・6-1~7・7-1~5、RESTART 0-0・1-1~2・2-1~10・3-1~7、エピローグ） 目安プレイ時間：6時間50分（うち、RESTART 1時間55分） 因幡 めぐるルート チャプター数：30（構成：4-8、5-1~4、6-1~4、7-1~5、8-1~9、9-1~6、エピローグ） 目安プレイ時間：6時間10分 椎葉 紬ルート チャプター数：28（構成：4-8、5-1~5、6-1~7、7-1~7、8-1~7、エピローグ） 目安プレイ時間：5時間10分 戸隠 憧子ルート チャプター数：29（構成：4-8、5-1~5、6-1~7、7-1~6、8-1~5、9-1~4、エピローグ） 目安プレイ時間：5時間30分 仮屋 和奏ルート チャプター数：18（構成：4-5~6、5-1~7、6-1~8、エピローグ） 目安プレイ時間：4時間00分 ムービー曲 オープニング 「恋せよ乙女！」 歌：米倉千尋 エンディング 寧々ルート 「Re:Start～君とまた出逢えて～」 歌：神代あみ(Angel Note) めぐるルート 「天使の羽とクリスタル」 歌：Riryka(Angel Note) 紬ルート 「スカート」 歌：葉月(Angel Note) 憧子ルート 「君がくれた光」 歌：カサンドラ 和奏ルート 「大好き」 歌：中山♡マミ(Angel Note) 挿入歌 和奏ルート 「Without You」 歌：神代あみ(Angel Note) メインヒロイン評論 綾地 寧々 オススメ度：★★★★★ 性格や人柄 柊史のクラスメイトで、オカルト研究部所属。アルプと契約した魔女。 温厚篤実で堅忍質直、そして才色兼備であり、オカルト研究部で人助けやお悩み相談を行っている。 その一方で、魔女契約の代償がいつ起こるか分からないため、他人と一線を引いている。 立ち振る舞いから大人っぽいクールな美少女と認識されており、男女問わず慕われている二年生のアイドル的存在で、学生会長の戸隠憧子と人気を二分すると評される。 しかし、彼女の印象は、個別ルートに入るとガラリと変わる。 大人っぽいクールさは張りぼてで、その実、子供っぽくて積極的である。そのギャップが、彼女の魅力を最大限に引き立てる味わい深いものにしている。 見どころ 個別ルートは、家族の形と寧々の成長の二つに焦点を当てるストーリーとなっている。 他ヒロインルートと比して、色々と重い内容となっており、彼女がひとりで暮らしている理由等も徐々に語られていく。 何でも願いを叶えられる都合の良い存在である「魔法」ですら、願い方を少しでも間違えば都合が良くなるわけではない。 しかし、彼女は、都合の良いそれが無くても、様々な艱難辛苦を自分の力で乗り越えて成長していくのである。 彼女の個別ルートは、それだけで一つの作品として完成しているので、しっかりと時間をとって攻略してみて欲しい。 嫉妬する寧々ちゃんにマーキングされたい © YUZUSOFT / JUNOS INC. All Rights Reserved. 因幡 めぐる オススメ度：★★★★☆ 性格や人柄 柊史の一つ年下の後輩で、作中でオカルト研究部に所属する一般人。 普段からおしゃれで派手な身なりのために遊んでいる印象だが、内面は天衣無縫の乙女である。 ゲームを始め、料理や読書など、インドアで一人でも完結できることを趣味として好む。 また、浅く広く友人が沢山いるよりも深く狭い関係の友人が一人いれば良い、という考え方である。 そのため、柊史と寧々が、部室で二人だけで会話していたり、アイコンタクトで会話をしていたりすると、嫉妬するのである。 二人から除け者にされたと自分勝手に考えて嫉妬する彼女は、可愛くて微笑ましい。 なお、彼女は、伝説のあいさつ「ちゃろー」を世に生み出した奇才である。 見どころ 事の発端は、入学直後に数日間病欠し、クラスメイトと打ち解ける好機を逃したことにある。 結果的に、柊史が彼女の趣味を知り、ゲームを活用してクラスメイトと打ち解けられた。 しかし、彼女の悩みの根本要因は、人付き合いが下手で、相手との距離の詰め方が分からないことによるものであった。 どうしてこのようになったのかは、個別ルートにて彼女の過去が明かされることで判明する。 なお、慕っている相手には、好きな感情を最大限に振り撒いてべったりな態度を取る子犬系な彼女である。 ゆえに、めぐるのような子が彼女だったらなぁ、と夢想してしまう紳士は少なくないであろう。ちなみに、私はそうである。 私も大好きです、めぐるさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 椎葉 紬 オススメ度：★★★☆☆ 性格や人柄 作中で柊史と同じクラスに転入して、その後オカルト研究部に所属する魔女。 春風駘蕩で、争いを好まず、一生懸命に頑張る性格である。 魔女契約の代償により、女の子っぽい服装をすればするほど具合が悪くなるようになったため、普段は男装している。 その一方で、本来は可愛くて女の子らしい恰好を好む。 彼女の魔女服は可愛く、本人にとっても普段は着られない可愛い服であるので、とても気に入っている。 見どころ 個別ルートは、彼女のアルプを中心にストーリーが展開されていくため、彼女自身が脚光を浴びることは極端に少ない。 そのため、他のヒロインルートと異なり、メインであるはずの彼女の印象が残りにくくなっているのが残念でならない。 それは、乗り越えるべき重大な課題を彼女自身が持っていなかったことも原因の一つであろう。 さて、苦言を呈するような形となってしまったが、もちろん彼女もしっかりと可愛さを備えているのでご安心を。 彼女は、本中で最も母性が強いヒロインなので、バブみを感じてみたい紳士は是非攻略してみてほしい。 紬ちゃんに看病されたいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 戸隠 憧子 オススメ度：★★★★☆ 性格や人柄 柊史の一つ年上の先輩で、学生会長を努める一般人。 共通ルートの途中で学生会を引退してからは、オカルト研究部に所属する。 三年生のアイドル的存在であり、前述の通り綾地寧々と学院の人気を二分するほどの人望を持つ。 温柔敦厚で、洞察力に優れ、気遣い上手だが、人を揶揄うのを好きなお茶目な面もある。 柊史の不思議な力が効かない唯一の人物であり、声をかける度にいつも彼を驚かせている。 見どころ 個別ルートは、恋愛をテーマとするストーリーとなっている。 序盤の「部活（仕事）と私、どっちが大事か？」というお悩み相談に対する考察や回答は、なるほど、そういう考え方もあるのか、と大いに勉強になった。 徐々に仲が深まっていくと、彼女が、自身をつまらなくて中身のない人間であると思い悩んでいることが露見する。 そして、前述の柊史の不思議な力が効かないことや、安心感や親近感を覚えると発言する理由。 実は、これらはつながっているので、その答えは、あなた自身がプレイすることで確かめて欲しい。 なお、作中で最も良い女性は誰かと問われた時、私は彼女の名前を最初に挙げる。 尻に敷かれていることを感じさせずに、手のひらの上で気持ちよく転がされたい、と思っている紳士には是非推したい。 憧子先輩に毎日料理を作って欲しいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 90点（秀/AA-ランク） ゆずソフトの作品の中でもトップクラスの出来であると評しても過言ではなかろう。 キャラゲーよりもシナリオゲーの方が好きな人にも、自信を持っておすすめできる逸品である。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 9/10点 構成 9/10点 演出 8/10点 合計 26/30点 グラフィック クオリティ 10/10点 ボリューム 10/10点 合計 20/20点 キャラクター 作り込み 8/10点 ボイス 10/10点 合計 18/20点 プレイ環境 音楽 9/10点 動画 9/10点 システム 8/10点 合計 26/30点 コメント シナリオ 本作は、全ての個別ルートで魔女や魔法を軸にしてストーリーが展開されており、非常に完成度の高い仕上がりとなっている。 寧々ルートに対する力の入れ具合もさることながら、他ヒロインルートも涙腺が緩む展開を始め、プレイヤーを満足させる演出がしっかりできていて、読後感が良好である。 しかし、めぐるルートの最後半の展開が間延びしているように感じることや、紬ルートにおける納得感の低いストーリーと演出が、減点要因である。 これらは非常に惜しいと言わざるを得ないが、ゆずソフトの作品の中では、間違いなく最高クラスのシナリオであろう。 グラフィック 本作もいつも通り、むりりん先生・こぶいち先生のCGと、こもわた遙華先生のSDも、文句なしの満点。 キャラクター ボイスに関しては、キャラクターとCVが完全にマッチしていてイメージ通りであった。 一方、キャラクターの作り込みについては、めぐるに関しては完璧である。 しかし、他のヒロインはそうとは言えず、惜しいところがあった。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム OP「恋せよ乙女！」は、攻略前でも素晴らしい曲であるが、攻略後に聴きなおすと歌詞も含めて神曲であることが分かるであろう。 しかし、コーラス入りのBGMが、プレイ中に気になり集中を削ぐことがあったので、音楽の減点要素となった。 システムは、フローチャート機能がある近年の作品をプレイしてしまうと、快適性に少々不足を感じた。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 サノバウィッチ【萌えゲーアワード2015 キャラクターデザイン賞 受賞】【こちらの商品は修正パッチ Ver.1.21を適用済です】━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…保科柊史は、とある秘密を抱えていた。それは『他人の気持ちを感じ取れ... Steam 全年齢版 Sabbat of the Witch on SteamHoshina Shuuji has a secret: He has a mysterious power that allows him to perceive the emotions of others. However, he is soon to find out t...","link":"/articles/sabbat-of-the-witch-review/"},{"title":"Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう","text":"ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今回は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタを提供します。 この記事は、mediba Advent Calendar 2023 の22日目にエントリーしています。 はじめに 2024年02月05日更新 2024年02月05日に、この記事を「ブログ作成」シリーズとして前後編の二つに分割しました。この記事は、前編の記事となります。 後半は、「Hexo製ブログを公開してGoogle検索できるようにする」の記事で読むことができます。 この記事を書いている人 KDDI の子会社である mediba でテックリードをしている雑食系雑用エンジニア。 インフラ、フロントエンド、バックエンド、SRE、CI/CDなどプロダクトに必要な役割は、何でもやる人です（注：バックエンドが本職）。 この記事が投稿される頃は、忙しすぎて死にそうになっているでしょう。誰か私を救ってくれ。 この記事の存在意義 読者様が、この記事をひと通り読んだ後に Hexo.js + GitHub Pages のブログを作成できるようになっていること。 もしくは、この記事を読みながらブログを作成できること。 この記事を推したい読者様 この記事を読んで嬉しくなる読者様は、以下のような方を想定しています。 一般的なブログサービスを使わずに、自分の力だけでブログを開設したい人 メンテナンスやセキュリティ等の宗教上の理由で、WordPress を採用したくない人 カスタムドメインを使ったり、ブログを自由自在にカスタマイズしたり等、やりこみたい人 この記事が生まれたきっかけ 書いた「RIDDLE JOKER」のレビューを投稿する場所と方法を探していたことがきっかけです。 作中のスクショを張りたかったことと、R18 指定のゲームだったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。 GitHub Pages で静的サイトホスティングができることは知っていたので、場所はすぐに決まりました。 あとは、ブログに必要なウェブページ一式を生成するジェネレーターを探すだけでした。 紆余曲折あって、Hexo.js に辿り着き、これを使うことにしました。 こうして、このブログが Hexo.js + GitHub Pages で爆誕し、さらにこの記事が生み出されることとなったのです。 なお、Hexo と書かれていると、ヘクソと読みがちですが、ヘキソの読みが正しいようです。 ぶっちゃけ、どっちでも伝わるとは思うので、どっちの呼び方でも良いと思います。 手元でブログを作ろう 御託を並べる暇があったら、早く作成手順を見せろ、とそろそろ言われそうなので、構築編に移りましょう。 まずは、手元でブログを作って、ローカル環境のパソコン内で動かしてみます。 ローカル環境整備 Node.js のバージョン管理ツールをインストールしておくと楽です。 ・Windows =&gt; nvm-windows をインストール。 ・Mac または Linux =&gt; お好きなツールをインストール。 Git はインストール必須です。 ・Windows =&gt; Git for Windowsを公式サイトからダウンロードし、インストール。 ・Mac =&gt; HomeBrew 等でインストール。 ・Linux =&gt; apt-get や yum でインストール。 (1) Node.js 最新版インストール Node.js のバージョン管理ツールから最新版をインストールします。 大抵のツールは、インストール後にバージョン切り替えをしないので、自分でインストールしたバージョンに変更するコマンドを実行してください。 その後、node -vコマンドで、最新バージョンに切り替わっていることを確認してください。 npm を最新バージョンに更新します。 (2) hexo-cli インストール npm 経由で、hexo-cli をインストールします。 terminalnpm install -g hexo-cli ブログセットアップ (1) ブログ一式を作成 以下のコマンドで、&quot;blog&quot;ディレクトリ配下にブログ一式を作成します。 &quot;blog&quot;は、任意の名前に変えても大丈夫です。 terminalhexo init blog (2) npm install &quot;blog&quot;ディレクトリ(※)に移動し、npm installコマンドを実行します。 (※) 任意の名前で作成した場合、&quot;blog&quot;を読み替えてください。 terminalcd ./blog npm install これだけでブログのセットアップは完了です。ね？簡単でしょ？ (3) 表示確認 では、下記のコマンドを実行してセットアップしたブログを表示してみましょう！ Windows で下記のコマンドを実行するには、&quot;PowerShell 7.x&quot;が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 terminalnpm run clean &amp;&amp; npm run server コマンド実行時にログにも出ますが、Ctrl+C で Hexo サーバーを止められます。 カスタムテーマ導入 初回セットアップ時のデフォルトテーマは、landscape テーマというものです。 最低限のことはできるのですが、見た通りデザインがイケてません。オシャレ感が足りません。 そんな人のために、Hexo公式から有志が作成したテーマを検索できるようになっています。 検索してみるとたくさんあって悩みますが、私の一番のおすすめは Icarus テーマです。 Icarus テーマの公式ドキュメントにインストール手順があるので、導入してみてください。 npm installで導入した場合は、フォントを変更できません（不可能ではないが非推奨）。 git cloneする方法、または、GitHub から Download zip する方法で導入することを推奨します。 Icarus テーマの最新版 v5.x は、Hexo v6.x ベースで作成されています。 そのため、ブログ側の Hexo を最新版の v7.x ではなく v6.x にすると、互換性に関わる問題が発生しにくいでしょう。 私は念のため、Hexo v7.x をnpm uninstallした後に、Hexo v6.x をnpm installしました。 ブログ設定を整える 手元で確認した時に「ブログのタイトルを変えてぇなぁ」等、思った方はいらっしゃると思います。 &quot;blog&quot;ディレクトリ(※)直下に、ブログの設定ファイルがあるので、その中身を良い感じに書き換えていきましょう。 (※) hexo initコマンド実行時に、任意の名前で作成した場合、&quot;blog&quot;をそれに読み替えてください。 _config.yml# Site title: ブログタイトル subtitle: '' # 使われないテーマでは設定不要 description: 'サイトの説明文 は、こんな 感じで書けます。' keywords: 'Key,word' author: author language: ja timezone: Japan # Asia/Tokyo 表記でも可 # URL url: https://username.github.io/ # usernameは、GitHubのユーザー名に書き換える permalink: articles/:title/ # デフォルトでも良い方は変更不要 # Writing new_post_name: :year_:month_:day_:title.md # 日付が接頭辞にあると見やすいです（オススメ） post_asset_folder: true # 記事ごとに画像ファイルを配置したいならtrue 上記に抜粋した設定項目は、必要最低限の変更した方が望ましい箇所です。 他の設定については、Hexo公式ホームページに設定に関する詳細説明がまとめられているので、そちらをご確認ください。 試しに記事を書いてみる ブログは記事がなければ何も始まらないので、さっそく作りましょう。 (1) 記事ファイル生成 Hexo で記事を作成するには、以下のコマンドを実行します。 記事名（コマンド中の article-name 部分）は、自由に入力してかまいません。 terminalhexo new post &quot;article-name&quot; (2) 記事のメタ情報を書く 記事は、&quot;source/_posts&quot;ディレクトリ直下に、MarkDown 形式のファイル（コマンド通りに実行した時は、“2023_12_22_article-name.md”）が生成されます。 このファイルを開いてみると、中身はこんな感じになっています。 source/_posts/2023_12_22_article-name.md--- title: article-name date: 2024-12-22 09:00:00 tags: --- ---で囲まれた部分を&quot;Front Matter&quot;と呼び、Hexo では記事のメタ情報を記載する場所です。 &quot;title&quot;は、記事タイトルに使われるので、ここを任意の日本語に変えちゃいましょう。 他にも、テーマによってはカスタムフィールドがあります（例：Icarus テーマなら、&quot;thumbnail&quot;や&quot;cover&quot;等）ので、お好みで設定してください。 (3) 記事の本文を書く そして、ブログの本文は、&quot;Front Matter&quot;の後に記述します。 実際の記事の執筆は、下記のように&quot;Front Matter&quot;に色々と設定したり、本文を書いたりします。 なお、本文中に&lt;!-- more --&gt;を入れると、その位置に「続きを読む」ボタンを差し込めます。 source/_posts/2023_12_22_article-name.md--- title: Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう date: 2023-12-22 09:00:00 updated: 2023-12-22 09:00:00 tags: - ブログ作成 - Hexo - Icarus - npm - Advent Calendar category: Technology --- ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今年は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタで提供させていただきます。 &lt;!-- more --&gt; ## はじめに その他カスタマイズする ここまでの手順で、ブログとしてはほぼ完成しています。 Icarus テーマを導入した方は、日本語の表示時フォントが&quot;Microsoft YaHei&quot;になっています。 見慣れているフォントに変えたいなら、フォント設定に関する処理を書き換えると変更できます（※前項「カスタムテーマ導入」の注意事項を読んでください）。 やり方については、「Hexoのicarusテーマのフォントの変え方」や「HEXO の表示フォントを変更」をまねてみると良いでしょう。 あとは、テーマのデザインを弄ったり、プラグインを入れたりなど、皆様のお好みでどうぞ。 リンクプレビュー機能を導入したい方は、私がプラグインを作ってみたので、以下の記事も併せて読んでみてください。 hexo-tag-ogp-link-previewプラグインを公開しました2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。 本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛... 後編へ続く 続きは、「Hexo製ブログを公開してGoogle検索できるようにする」をご覧ください。 おわりに とても楽にブログを作れるし、カスタマイズも簡単だし、さらに無料でホスティングできるとは、便利な世の中になったものだなぁ（小並感）。 私は、十数年前の学生時代に、さくらインターネット + WordPress でブログを作っていましたが、このようになるとは露程も思っていませんでした。 イマどきホスティングでブログを作ろうなんて酔狂な人は少ないかもしれませんが、機会があれば是非参考にしてみてください。 あぁ、早く仕事片付かないかなぁ。千恋万花プレイしたいなぁ。","link":"/articles/start-hexo-blog-in-github-pages/"}],"tags":[{"name":"鉄道","slug":"鉄道","link":"/tags/%E9%89%84%E9%81%93/"},{"name":"小ネタ","slug":"小ネタ","link":"/tags/%E5%B0%8F%E3%83%8D%E3%82%BF/"},{"name":"歴史","slug":"歴史","link":"/tags/%E6%AD%B4%E5%8F%B2/"},{"name":"解説","slug":"解説","link":"/tags/%E8%A7%A3%E8%AA%AC/"},{"name":"ゆずソフト攻略","slug":"ゆずソフト攻略","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88%E6%94%BB%E7%95%A5/"},{"name":"攻略","slug":"攻略","link":"/tags/%E6%94%BB%E7%95%A5/"},{"name":"PCゲーム","slug":"PCゲーム","link":"/tags/PC%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"美少女ゲーム","slug":"美少女ゲーム","link":"/tags/%E7%BE%8E%E5%B0%91%E5%A5%B3%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"ゆずソフト","slug":"ゆずソフト","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88/"},{"name":"ブログ作成","slug":"ブログ作成","link":"/tags/%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"GitHub Pages","slug":"GitHub-Pages","link":"/tags/GitHub-Pages/"},{"name":"Google Search Console","slug":"Google-Search-Console","link":"/tags/Google-Search-Console/"},{"name":"ブログ改良","slug":"ブログ改良","link":"/tags/%E3%83%96%E3%83%AD%E3%82%B0%E6%94%B9%E8%89%AF/"},{"name":"サイトスピード改善","slug":"サイトスピード改善","link":"/tags/%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E6%94%B9%E5%96%84/"},{"name":"PageSpeed Insights","slug":"PageSpeed-Insights","link":"/tags/PageSpeed-Insights/"},{"name":"WebP","slug":"WebP","link":"/tags/WebP/"},{"name":"災害対策","slug":"災害対策","link":"/tags/%E7%81%BD%E5%AE%B3%E5%AF%BE%E7%AD%96/"},{"name":"防災","slug":"防災","link":"/tags/%E9%98%B2%E7%81%BD/"},{"name":"液状化","slug":"液状化","link":"/tags/%E6%B6%B2%E7%8A%B6%E5%8C%96/"},{"name":"地震","slug":"地震","link":"/tags/%E5%9C%B0%E9%9C%87/"},{"name":"技術解説","slug":"技術解説","link":"/tags/%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC/"},{"name":"CI&#x2F;CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"GitHub Actions","slug":"GitHub-Actions","link":"/tags/GitHub-Actions/"},{"name":"ゆずソフトレビュー","slug":"ゆずソフトレビュー","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"},{"name":"レビュー","slug":"レビュー","link":"/tags/%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"},{"name":"自作Hexoプラグイン","slug":"自作Hexoプラグイン","link":"/tags/%E8%87%AA%E4%BD%9CHexo%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"Advent Calendar","slug":"Advent-Calendar","link":"/tags/Advent-Calendar/"}],"categories":[{"name":"Miscellany","slug":"Miscellany","link":"/categories/Miscellany/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Technology","slug":"Technology","link":"/categories/Technology/"},{"name":"Guide","slug":"Game/Guide","link":"/categories/Game/Guide/"},{"name":"Frontend","slug":"Technology/Frontend","link":"/categories/Technology/Frontend/"},{"name":"DevOps","slug":"Technology/DevOps","link":"/categories/Technology/DevOps/"},{"name":"Review","slug":"Game/Review","link":"/categories/Game/Review/"}],"pages":[]}