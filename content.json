{"posts":[{"title":"Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう","text":"ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今回は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタを提供します。 この記事は、mediba Advent Calendar 2023 の22日目にエントリーしています。 はじめに この記事を書いている人 KDDI の子会社である mediba でテックリードをしている雑食系雑用エンジニア。 インフラ、フロントエンド、バックエンド、SRE、CI/CDなどプロダクトに必要な役割は、何でもやる人です（注：バックエンドが本職）。 この記事が投稿される頃は、忙しすぎて死にそうになっているでしょう。誰か私を救ってくれ。 この記事の存在意義 読者様が、この記事をひと通り読んだ後に Hexo.js + GitHub Pages のブログを作成できるようになっていること。 もしくは、この記事を読みながらブログを作成できること。 この記事を推したい読者様 この記事を読んで嬉しくなる読者様は、以下のような方を想定しています。 一般的なブログサービスを使わずに、自分の力だけでブログを開設したい人 メンテナンスやセキュリティ等の宗教上の理由で、WordPress を採用したくない人 カスタムドメインを使ったり、ブログを自由自在にカスタマイズしたり等、やりこみたい人 この記事が生まれたきっかけ 書いた「RIDDLE JOKER」のレビューを投稿する場所と方法を探していたことがきっかけです。作中のスクショを張りたかったことと、R18 指定のゲームだったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。 場所は、GitHub Pages で静的サイトホスティングができることは知っていたので、すぐに決まりました。あとは、ブログに必要なウェブページ一式を生成するジェネレーターを探すだけでした。紆余曲折あって、Hexo.js に辿り着き、これを使うことにしました。 こうして、このブログが Hexo.js + GitHub Pages で爆誕し、さらにこの記事が生み出されたのです。 なお、Hexo と書かれていると、ヘクソと読みがちですが、ヘキソの読みが正しいようです。ぶっちゃけ、どっちでも伝わるとは思うので、どっちの呼び方でも良いと思います。 手元でブログを作ろう 御託を並べる暇があったら、早く作成手順を見せろ、とそろそろ言われそうなので、構築編に移りましょう。まずは、手元でブログを作って、ローカル環境のパソコン内で動かしてみます。 ローカル環境整備 Node.js のバージョン管理ツールをインストールしておくと楽です。 Windows の場合、nvm-windows をインストール。 Mac または Linux の場合、お好きなツールをインストール。 Git はインストール必須です。 Windows の場合は、Git for Windowsを公式サイトからダウンロードし、インストール。 Mac の場合は、HomeBrew 等でインストール。 Linux の場合は、apt-get や yum でインストール。 (1) Node.js 最新版インストール Node.js のバージョン管理ツールから最新版をインストールします。 大抵のツールは、インストール後にバージョン切り替えをしないので、自分でインストールしたバージョンに変更するコマンドを実行してください。 その後、node -v コマンドで、最新バージョンに切り替わっていることを確認してください。 npm を最新バージョンに更新します。 (2) hexo-cli コマンドのインストール npm 経由で、hexo-cli コマンドをインストールします。 npm install -g hexo-cli ブログセットアップ (1) ブログ一式を作成 以下のコマンドで、blog ディレクトリ配下にブログ一式を作成します。ディレクトリの名前は、任意のものに変えても大丈夫です。 hexo init blog (2) npm install 作成したディレクトリに移動し、npm install コマンドを実行します。 手順 (1) で、ディレクトリを違う名前で作成した場合は、blog をその名前に読み替えてください。 cd ./blog npm install これだけでブログのセットアップは完了です。ね？簡単でしょ？ (3) 表示確認 では、下記のコマンドを実行してセットアップしたブログを表示してみましょう！ Windows で下記のコマンドを実行するには、PowerShell 7.x が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 npm run clean &amp;&amp; npm run server コマンド実行時にログにも出ますが、Ctrl+C で Hexo サーバーを止められます。 カスタムテーマ導入 初回セットアップ時のデフォルトテーマは、landscape テーマというものです。 最低限のことはできるのですが、見た通りデザインがイケてません。オシャレ感が足りません。 そんな人のために、Hexo公式から有志が作成したテーマを検索できるようになっています。 おすすめのテーマは？ 検索してみるとたくさんあって悩みますが、私の一番のおすすめは Icarus テーマです。 Icarus テーマの公式ドキュメントにインストール手順があるので、導入してみてください。 npm install で導入した場合は、フォントを変更できません（不可能ではないが非推奨）。 git clone する方法、または、GitHub から Download zip する方法で導入することを推奨します。 ブログ設定を整える 手元で確認した時に「ブログのタイトルを変えてぇなぁ」等、思った方はいらっしゃると思います。 blog ディレクトリの直下に、ブログの設定ファイルがあるので、その中身を良い感じに書き換えていきましょう。 セクション「ブログセットアップ」の手順 (1) で、ディレクトリを違う名前で作成した場合は、blog をその名前に読み替えてください。 _config.yml# Site title: ブログタイトル subtitle: '' # 使われないテーマでは設定不要 description: 'サイトの説明文 は、こんな 感じで書けます。' keywords: 'Key,word' author: author language: ja timezone: Japan # Asia/Tokyo 表記でも可 # URL url: https://username.github.io/ # usernameは、GitHubのユーザー名に書き換える permalink: articles/:title/ # デフォルトでも良い方は変更不要 # Writing new_post_name: :year_:month_:day_:title.md # 日付が接頭辞にあると見やすいです（オススメ） post_asset_folder: true # 記事ごとに画像ファイルを配置したいならtrue 上記に抜粋した設定項目は、必要最低限の変更した方が望ましい箇所です。 他の設定については、Hexo公式ホームページに設定に関する詳細説明がまとめられているので、そちらをご確認ください。 試しに記事を書いてみる ブログは記事がなければ何も始まらないので、さっそく作りましょう。 (1) 記事ファイル生成 Hexo で記事を作成するには、以下のコマンドを実行します。 記事名（コマンド中の article-name 部分）は、自由に入力してかまいません。 hexo new post &quot;article-name&quot; (2) 記事のメタ情報を書く 記事は、source/_posts ディレクトリ直下に、Markdown 形式のファイル（コマンド通りに実行した時は、2023_12_22_article-name.md）が生成されます。 このファイルを開いてみると、中身はこんな感じになっています。 --- title: article-name date: 2024-12-22 09:00:00 tags: --- --- で囲まれた部分を「Front Matter」と呼び、Hexo では記事のメタ情報を記載する場所です。 title は、記事タイトルに使われるので、ここを任意の日本語に変えちゃいましょう。他にも、テーマによってはカスタムフィールドがあります（例：Icarus テーマなら、thumbnail や cover 等）ので、お好みで設定してください。 (3) 記事の本文を書く そして、ブログの本文は、「Front Matter」の後に記述します。 実際の記事の執筆は、下記のように「Front Matter」に色々と設定したり、本文を書いたりします。なお、本文中に &lt;!-- more --&gt; を入れると、その位置に「続きを読む」ボタンを差し込めます。 source/_posts/2023_12_22_article-name.md--- title: Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう date: 2023-12-22 09:00:00 updated: 2023-12-22 09:00:00 tags: - ブログ作成 - Hexo - Icarus - npm - Advent Calendar category: Technology --- ちゃろー☆今年もアドベントカレンダーの時期がやってきました！ 今年は、例年通りのGitHub Actionsネタではなく、GitHub Pagesネタで提供させていただきます。 &lt;!-- more --&gt; ## はじめに その他カスタマイズする ここまでの手順で、ブログとしてはほぼ完成しています。あとは、テーマのデザインを弄ったり、プラグインを入れたりなど、皆様のお好みでどうぞ。 Icarus テーマのカスタマイズ Icarus テーマを導入した方は、日本語の表示時フォントが&quot;Microsoft YaHei&quot;になっています。 見慣れているフォントに変えたいなら、フォント設定に関する処理を書き換えると変更できます（※前項「カスタムテーマ導入」の注意事項を読んでください）。 やり方については、「Hexoのicarusテーマのフォントの変え方」や「HEXO の表示フォントを変更」をまねてみると良いでしょう。 リンクプレビュー機能のプラグイン リンクプレビュー機能を導入したい方は、私が自作プラグインを作ってみたので、以下の記事も併せて読んでみてください。 hexo-tag-ogp-link-previewプラグインを公開しました2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。 本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛... おわりに とても楽にブログを作れるし、カスタマイズも簡単だし、さらに無料でホスティングできるとは、便利な世の中になったものだなぁ（小並感）。 私は、十数年前の学生時代に、さくらインターネット + WordPress でブログを作っていましたが、このようになるとは露程も思っていませんでした。 イマどきホスティングでブログを作ろうなんて酔狂な人は少ないかもしれませんが、機会があれば是非参考にしてみてください。 関連記事 ブログ作成 後編「Hexo製ブログを公開してGoogle検索できるようにする」 自作Hexoプラグイン 「hexo-tag-ogp-link-preview v1.0」のリリース解説 「hexo-tag-ogp-link-preview v1.1」のリリース解説 参考文献 ローカル環境整備 Git for Windows Hexo 公式 設定 | Hexo Themes | Hexo icarus テーマ Getting Started with Icarus - Icarus Hexoのicarusテーマのフォントの変え方 - omathin blog HEXO の表示フォントを変更 - FENNOTE","link":"/articles/start-hexo-blog-in-github-pages/"},{"title":"サノバウィッチ 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2015年に発売された「サノバウィッチ SABBAT OF THE WITCH」をクリアしたので、作品の評価を感想付きでレビューします。 こちらは、「サノバウィッチ SABBAT OF THE WITCH」のレビュー記事です。 本作を始め、ゆずソフト作品のレビューを多数投稿しているので、興味があれば是非ご覧ください。 作品概要 あらすじ 主人公 保科ほしな 柊史しゅうじ は、先天的に「他人の自分に向ける感情を五感で受け取る」不思議な能力がある。その力に苦しんだ結果、『姫松学院ひめまつがくいん』に入学する頃には、場の空気や雰囲気を重視して、他人の頼みを断れない悪癖を持っていた。 とある日、放課後に図書委員代理で、図書室にいた柊史。綾地あやち 寧々ねね が異様な様子で入室してきたかと思いきや、彼女の思いがけない痴態を目撃する。 それから始まる一連の出来事により、彼女が「魔女」であることを知る。魔女は、自分の願いをどんな事でも一つだけ叶える魔法を、とある責務の完遂と、対価に釣り合う代償を支払うことで、発動できる。先日の彼女は、対価の代償によるものだったのである。 彼女が、代償を払ってまで魔女になった理由は何なのか？彼が、苦しみを味わうような不思議な力を持って生まれた理由は何なのか？ ――交わることのなかった二人が出会った時、物語の歯車が回り始める。 登場キャラクター メインヒロイン 綾地あやち 寧々ねね（桐谷きりたに 華はな） 因幡いなば めぐる（遥はるか そら） 椎葉しいば 紬つむぎ（黒咲くろさき そら） 戸隠とがくし 憧子とうこ（明科あけしな まなさ） サブヒロイン 仮屋かりや 和奏わかな（小鳥居ことりい 夕花ゆうか） 各種スペック システム 前作「天色＊アイルノーツ」と比較して、本作から導入された新機能は太字で記載している。 本作から、システム音でキャラクターボイスを選べるようになった。 ストーリープレイ画面 セーブ・クイックセーブ、ロード（お気に入りボイス鑑賞）・クイックロード、前・次の選択肢へ移動、オート、一つ前のセリフに戻る、スキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ（シーンセレクト） エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞 システム設定 画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、ショートカットキー一覧 シナリオ 共通ルート Chapter 1 から Chapter 4 まで（チャプター総数 25） 個別ルート 寧々ルート（チャプター総数 43）、めぐるルート（チャプター総数 30）、紬ルート（チャプター総数 28）、憧子ルート（チャプター総数 29）、和奏ルート（チャプター総数 18）の五つ。 なお、和奏ルートのみ、寧々・めぐる・紬・憧子のうちいずれか一人以上のエピローグを見終えた場合に、アンロックされる条件あり。 エンディング 全部で七つあり、うち四つはめぐる・紬・憧子ルートのエンディング、残り三つはノーマルエンド一つと、寧々ルートのノーマルエンドとトゥルーエンドの二つ。 アフターストーリー 各ヒロインのエピローグまで見終えるごとに、そのヒロインのアフターストーリーがアンロックされる（寧々・めぐる・紬・憧子・和奏で一話ずつ）。 ムービー曲 オープニング 「恋せよ乙女！」 歌：米倉千尋 エンディング 寧々ルート 「Re:Start～君とまた出逢えて～」 歌：神代あみ(Angel Note) めぐるルート 「天使の羽とクリスタル」 歌：Riryka(Angel Note) 紬ルート 「スカート」 歌：葉月(Angel Note) 憧子ルート 「君がくれた光」 歌：カサンドラ 和奏ルート 「大好き」 歌：中山♡マミ(Angel Note) 挿入歌 和奏ルート 「Without You」 歌：神代あみ(Angel Note) メインヒロイン評論 綾地 寧々 オススメ度：★★★★★ 性格や人柄 柊史のクラスメイトで、オカルト研究部所属。アルプと契約した魔女。 温厚篤実で堅忍質直、そして才色兼備であり、オカルト研究部で人助けやお悩み相談を行っている。その一方で、魔女契約の代償がいつ起こるか分からないため、他人と一線を引いている。 立ち振る舞いから大人っぽいクールな美少女と認識されており、男女問わず慕われている二年生のアイドル的存在で、学生会長の戸隠憧子と人気を二分すると評される。しかし、彼女の印象は、個別ルートに入るとガラリと変わる。大人っぽいクールさは張りぼてで、その実、子供っぽくて積極的である。そのギャップが、彼女の魅力を最大限に引き立てる味わい深いものにしている。 個別ルートの感想 個別ルートは、家族の形と寧々の成長の二つに焦点を当てるストーリーとなっている。他ヒロインルートと比して、色々と重い内容となっており、彼女がひとりで暮らしている理由等も徐々に語られていく。 何でも願いを叶えられる都合の良い存在である「魔法」ですら、願い方を少しでも間違えば都合が良くなるわけではない。しかし、彼女は、都合の良いそれが無くても、様々な艱難辛苦を自分の力で乗り越えて成長していくのである。 彼女の個別ルートは、それだけで一つの作品として完成しているので、しっかりと時間をとって攻略してみて欲しい。 嫉妬する寧々ちゃんにマーキングされたい © YUZUSOFT / JUNOS INC. All Rights Reserved. 因幡 めぐる オススメ度：★★★★☆ 性格や人柄 柊史の一つ年下の後輩で、作中でオカルト研究部に所属する一般人。 普段からおしゃれで派手な身なりのために遊んでいる印象だが、内面は天衣無縫の乙女である。ゲームを始め、料理や読書など、インドアで一人でも完結できることを趣味として好む。 また、浅く広く友人が沢山いるよりも深く狭い関係の友人が一人いれば良い、という考え方である。そのため、柊史と寧々が、部室で二人だけで会話していたり、アイコンタクトで会話をしていたりすると、嫉妬するのである。二人から除け者にされたと自分勝手に考えて嫉妬する彼女は、可愛くて微笑ましい。 なお、彼女は、伝説のあいさつ「ちゃろー」を世に生み出した奇才である。 個別ルートの感想 事の発端は、入学直後に数日間病欠し、クラスメイトと打ち解ける好機を逃したことにある。結果的に、柊史が彼女の趣味を知り、ゲームを活用してクラスメイトと打ち解けられた。しかし、彼女の悩みの根本要因は、人付き合いが下手で、相手との距離の詰め方が分からないことによるものであった。どうしてこのようになったのかは、個別ルートにて彼女の過去が明かされることで判明する。 なお、慕っている相手には、好きな感情を最大限に振り撒いてべったりな態度を取る子犬系な彼女である。ゆえに、めぐるのような子が彼女だったらなぁ、と夢想してしまう紳士は少なくないであろう。ちなみに、私はそうである。 私も大好きです、めぐるさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 椎葉 紬 オススメ度：★★★☆☆ 性格や人柄 作中で柊史と同じクラスに転入して、その後オカルト研究部に所属する魔女。春風駘蕩で、争いを好まず、一生懸命に頑張る性格である。 魔女契約の代償により、女の子っぽい服装をすればするほど具合が悪くなるようになったため、普段は男装している。その一方で、本来は可愛くて女の子らしい恰好を好む。彼女の魔女服は可愛く、本人にとっても普段は着られない可愛い服であるので、とても気に入っている。 個別ルートの感想 個別ルートは、彼女のアルプを中心にストーリーが展開されていくため、彼女自身が脚光を浴びることは極端に少ない。そのため、他のヒロインルートと異なり、メインであるはずの彼女の印象が残りにくくなっているのが残念でならない。それは、乗り越えるべき重大な課題を彼女自身が持っていなかったことも原因の一つであろう。 さて、苦言を呈するような形となってしまったが、もちろん彼女もしっかりと可愛さを備えているのでご安心を。彼女は、本中で最も母性が強いヒロインなので、バブみを感じてみたい紳士は是非攻略してみてほしい。 紬ちゃんに看病されたいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 戸隠 憧子 オススメ度：★★★★☆ 性格や人柄 柊史の一つ年上の先輩で、学生会長を努める一般人。 共通ルートの途中で学生会を引退してからは、オカルト研究部に所属する。三年生のアイドル的存在であり、前述の通り綾地寧々と学院の人気を二分するほどの人望を持つ。 温柔敦厚で、洞察力に優れ、気遣い上手だが、人を揶揄うのを好きなお茶目な面もある。柊史の不思議な力が効かない唯一の人物であり、声をかける度にいつも彼を驚かせている。 個別ルートの感想 個別ルートは、恋愛をテーマとするストーリーとなっている。 序盤の「部活（仕事）と私、どっちが大事か？」というお悩み相談に対する考察や回答は、なるほど、そういう考え方もあるのか、と大いに勉強になった。 徐々に仲が深まっていくと、彼女が、自身をつまらなくて中身のない人間であると思い悩んでいることが露見する。そして、前述の柊史の不思議な力が効かないことや、安心感や親近感を覚えると発言する理由。実は、これらはつながっているので、その答えは、あなた自身がプレイすることで確かめて欲しい。 なお、作中で最も良い女性は誰かと問われた時、私は彼女の名前を最初に挙げる。尻に敷かれていることを感じさせずに、手のひらの上で気持ちよく転がされたい、と思っている紳士には是非推したい。 憧子先輩に毎日料理を作って欲しいです © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 90点（秀/AA-ランク） ゆずソフトの作品の中でもトップクラスの出来であると評しても過言ではなかろう。 キャラゲーよりもシナリオゲーの方が好きな人にも、自信を持っておすすめできる逸品である。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 9/10点 構成 9/10点 演出 8/10点 合計 26/30点 グラフィック クオリティ 10/10点 ボリューム 10/10点 合計 20/20点 キャラクター 作り込み 8/10点 ボイス 10/10点 合計 18/20点 プレイ環境 音楽 9/10点 動画 9/10点 システム 8/10点 合計 26/30点 コメント シナリオ 本作は、全ての個別ルートで魔女や魔法を軸にしてストーリーが展開されており、非常に完成度の高い仕上がりとなっている。 寧々ルートに対する力の入れ具合もさることながら、他ヒロインルートも涙腺が緩む展開を始め、プレイヤーを満足させる演出がしっかりできていて、読後感が良好である。しかし、めぐるルートの最後半の展開が間延びしているように感じることや、紬ルートにおける納得感の低いストーリーと演出が、減点要因である。 これらは非常に惜しいと言わざるを得ないが、ゆずソフトの作品の中では、間違いなく最高クラスのシナリオであろう。 グラフィック 本作もいつも通り、むりりん先生・こぶいち先生のCGと、こもわた遙華先生のSDも、文句なしの満点。 キャラクター ボイスに関しては、キャラクターとCVが完全にマッチしていてイメージ通りであった。一方、キャラクターの作り込みについては、めぐるに関しては完璧である。しかし、他のヒロインはそうとは言えず、惜しいところがあった。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム OP「恋せよ乙女！」は、攻略前でも素晴らしい曲であるが、攻略後に聴きなおすと歌詞も含めて神曲であることが分かるであろう。しかし、コーラス入りのBGMが、プレイ中に気になり集中を削ぐことがあったので、音楽の減点要素となった。 システムは、フローチャート機能がある近年の作品をプレイしてしまうと、快適性に少々不足を感じた。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 サノバウィッチ【萌えゲーアワード2015 キャラクターデザイン賞 受賞】【こちらの商品は修正パッチ Ver.1.21を適用済です】━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…保科柊史は、とある秘密を抱えていた。それは『他人の気持ちを感じ取れ... Steam 全年齢版 Sabbat of the Witch on SteamHoshina Shuuji has a secret: He has a mysterious power that allows him to perceive the emotions of others. However, he is soon to find out t...","link":"/articles/sabbat-of-the-witch-review/"},{"title":"RIDDLE JOKER 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2018年に発売された「RIDDLE JOKER（リドルジョーカー）」をクリアしたので、作品の評価を感想付きでレビューします。 この記事は、「RIDDLE JOKER（リドルジョーカー）」のレビューです。 本作を始め、ゆずソフト作品のレビューを多数投稿しているので、興味があれば是非ご覧ください。 作品概要 あらすじ ここは、かつて「超能力」と呼ばれていた、不思議な力「アストラル」能力が存在する世界。 主人公 在原ありはら 暁さとる はアストラル能力者であり、その力を使って裏社会で暗躍する非合法国家諜報組織『情報局特別班とっぱん』のエージェントである。とある任務のため、義妹の 在原ありはら 七海ななみ と共に、アストラル能力研究が盛んな『橘花学院きっかがくいん』へ転校生として潜入することになる。 潜入先の学院では、三司みつかさ あやせ、二条院にじょういん 羽月はづき、式部しきべ 茉優まゆ と出会い、順調に親交を深める。しかし、学院での任務中、予期せぬ事態に巻き込まれ、三司みつかさ あやせ に正体がバレてしまっただけでなく、彼女が他人に隠していた秘密も知ってしまう。 この出来事をきっかけに、彼は、学園や日本に潜む暗部に巻き込まれていく。 登場キャラクター メインヒロイン 三司みつかさ あやせ（CV：沢澤さわさわ 砂羽さわ、原画：むりりん） 在原ありはら 七海ななみ（CV：くすはらゆい、原画：こぶいち） 式部しきべ 茉優まゆ（CV：西園にしぞの 純夏すみか、原画：むりりん） 二条院にじょういん 羽月はづき（CV：遥はるか そら、原画：こぶいち） サブヒロイン 壬生みぶ 千咲ちさき（CV：夏和小かなこ） 各種スペック システム 前作「千恋＊万花」と比較して、本作から導入された新機能は太字で記載している。 本作から、お気に入りボイス鑑賞は、シーン回想が機能追加され、ロード画面からエクストラモードへ移動した。また、ゲームパッドのボタン割り当てができるようになった。 ストーリープレイ画面 セーブ・クイックセーブ、ロード・クイックロード、前・次のシーンへ移動、前・次の選択肢へ移動、オート、スキップ・バックスキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ、フローチャート、タイトル画面へ移動 エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞、お気に入りボイス鑑賞＋シーン回想 システム設定 簡易設定、画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、キーボード、ゲームパッド シナリオ 共通ルート PROLOGUE から Chapter 3 まで（チャプター総数 14） 個別ルート あやせルート（チャプター総数 14）、七海ルート（チャプター総数 16）、茉優ルート（チャプター総数 32）、羽月ルート（チャプター総数 27）、千咲ルート（チャプター総数 10）の五つ。 なお、千咲ルートは、あやせ・七海・茉優・羽月のうちいずれか一人以上のエピローグを見終えた場合に、アンロックされる条件あり。 エンディング 各ヒロインルートのエンディング五つとノーマルエンド一つの計六つ。 アフターストーリー 各ヒロインのエピローグまで見終えるごとに、そのヒロインのアフターストーリーがアンロックされる（あやせ・七海・茉優・羽月は2話、千咲は1話）。 ムービー曲 オープニング 「astral ability」 歌：橋本みゆき・佐咲紗花 エンディング あやせルート 「ゆびきり」 歌：霜月はるか 七海ルート 「ずっと」 歌：葉月(Angel Note) 茉優ルート 「初恋」 歌：tohko 羽月ルート 「恋だより」 歌：羽生みいな(Angel Note) 千咲ルート 「陽だまり笑顔で」 歌：春風まゆき(Angel Note) メインヒロイン評論 三司 あやせ オススメ度：★★★★☆ 性格や人柄 暁とは同学年のクラスメイトで、学生会長を務める。空間を対象にして斥力・引力を操作するアストラル能力を持つ。 みんなの前では、どんな時でも猫をかぶっていて、上品で清楚なキャラを演じている。しかし、秘密を知っている暁の前では、ひねくれたり、やさぐれたり、ガンを飛ばしたり、と粗野な振る舞いをする。 このことから分かる通り、全ヒロイン中、ギャップが最も激しいキャラである。 個別ルートの感想 付き合い初めてからデレが入ると、暁視点で見る普段の彼女とのギャップも相まって、凄まじい破壊力を伴う。彼女を攻略中に、そのギャップにより脳が破壊され、新しい扉を開いた紳士淑女は少なくないだろう。かくいう私もそうである。公私で表裏が激しいヒロインを好きな人に、是非推したい。 では、彼女の魅力をより理解できるように至高の激カワシーンを二つ紹介する。一つ目は、猫の気持ちを知るために、猫耳ありのなりきりプレイで、もう一つは、ホラーゲームプレイ中に怖がりながら腕をつかんできた時である。どちらも筆舌に尽くしがたい程の可愛さである。それを具体的に説明をするのは野暮というもの。 ちなみに、彼女は本作の根幹となる秘密を抱えているので、そこも意識しながら攻略すると良いだろう。 猫耳を装着した激カワあやせさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 在原 七海 オススメ度：★★★☆☆ 性格や人柄 暁とは一つ年下で血縁関係のない兄妹であり、特班における相棒役でもある。外傷を治癒できるアストラル能力の持ち主。 家事全般を卒なく熟すだけでなく、PC関連の知識も持ち合わせており、クラッキングもお手の物。性格面においても、面倒見が良く、優しく、気遣い上手なので、文句の付け所がない。そのうえ、スタイルも良い、という圧倒的高スペックを誇る。 ただし、過去のとある出来事によって極度の人見知りとなっており、所謂コミュ力と呼ばれるものは、最底辺のポンコツである。 個別ルートの感想 彼女は、世話焼き＋Sッ気＋小悪魔＋義妹の複合属性である。 これらの属性が好きな紳士淑女には、彼女をおすすめせざるを得ない。特に、共通ルートの「はい、あーん」で食べさせてくれるシーンが至高。彼女の「可愛い」要素がここに全て詰まっている。 彼女はこのような勘所で可愛さを魅せてくるので、暁が無意識に「だだ甘」なシスコンになるのも致し方なかろう。なお、個別ルートにて、彼女が作る餃子の話は、面白くて可愛くてほっこりするので必見。 七海ちゃんに頼られて拒否できる兄など居ない © YUZUSOFT / JUNOS INC. All Rights Reserved. 式部 茉優 オススメ度：★★★☆☆ 性格や人柄 暁とは二つ年上の先輩（二度留年している）であり、学院に雇われている研究員でもある。アストラルを空間中に固定する能力を持つ。 普段は、落ち着いた雰囲気のお姉さん然としていて、類い稀な才媛である。他人からはどう見ても魅力溢れる彼女だが、自尊心が異常に低く、甘えん坊で自信がないところがある。 個別ルートの感想 個別ルートは、暁が特班の任務中に失態を犯して正体バレするが、彼女の都合もあり難を逃れるという展開から始まる。 プレイヤー視点からは、暁の一連の行動に感情移入しにくいため、批判的な感情を持つかもしれない。なので、攻略を途中でやめようと思った方もいるかもしれないが、何とか耐えてほしい。ここを乗り越えられたなら、全ヒロイン中最も純情可憐な彼女が拝めるのである。 さて、彼女は、年上＋才女＋甘えん坊＋姉の複合属性持ちである。しっかりしたお姉さんが時折弱さを見せるのが好きな紳士淑女の方には、間違いなくクリティカルヒットするであろう。 彼女はとても優秀であるにも関わらず、なぜ二度も留年したのか。三司あやせ同様に本作の根幹をなす理由が存在するため、是非攻略してみてほしい。 茉優先輩にヨシヨシされたい人生であった © YUZUSOFT / JUNOS INC. All Rights Reserved. 二条院 羽月 オススメ度：★★★★☆ 性格や人柄 暁とは同学年のクラスメイトで、主人公が住む学院寮の寮長を務める。水を自在に操るアストラル能力の持ち主。 真面目で責任感が強く、とても真摯な性格で、むっつりスケベである。自分を犠牲にしても誰かの為になることを厭わない献身性の気質も持ち合わせており、まるで聖女のようである。 時代劇が好きであり、口調や思想、信条など様々な面で多大な影響を受けている。 個別ルートの感想 個別ルートは、暁とひたすら初々しくイチャつく高糖度のシナリオである。ストーリーの本筋に関係ないことは残念だが、その代わりに不安要素は存在せず、無心で楽しめる。とはいえ、全く何もないということはなく、山あり谷ありの普通のラブコメである。 ちなみに、膝枕のシチュエーションCGが唯一存在する。また、彼女だけが手作り弁当を持ってきてくれて、有難いことにそのCGもある。 さて、彼女は他のヒロインと比べて良いシチュエーションのシーンが多いため、どれを至高とするか悩ましいが、強いて挙げるならば、犬なりきりプレイであろう。ここで、彼女の可愛さに紳士淑女諸君らが、ハートを撃ち抜かれることは想像に難くない。 異能力モノには興味ないが、ラブコメは好きという方に、攻略を推したいヒロインである。 ショッピングモールで犬真似を晒す羽月さん © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 85点（優/Aランク） どこかの要素が極端に偏重しておらず、バランス感覚に非常に優れた作品に仕上がっている。 本作もゆずソフトの前評判通りに、全評価項目が平均点以上の優作であると言えよう。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 8/10点 構成 7/10点 演出 6/10点 合計 21/30点 グラフィック クオリティ 10/10点 ボリューム 10/10点 合計 20/20点 キャラクター 作り込み 9/10点 ボイス 9/10点 合計 18/20点 プレイ環境 音楽 8/10点 動画 9/10点 システム 9/10点 合計 26/30点 コメント シナリオ どの個別ルートにおいても、CGを上手いタイミングで見せており、ダラダラ感を感じることがないため、一定水準以上の質は維持できていた。 しかし、主人公の設定やアストラル能力という素材を上手く活かせていたかと問われれば疑問が残る。 なぜなら、比較的出来の良いあやせルートに対し、茉優ルートの序盤や七海ルートの終盤の強引な展開が悪目立ちし、ストーリーの質のばらつきが顕著に出ていることを認識してしまうからである。 加えて、羽月と千咲が暁と一切関わっていなくとも、本筋のストーリーが成立してしまうのも悪い点と言えるだろう。 グラフィック むりりん先生及びこぶいち先生を原画とするイベントCGは、非常に高品質で安定感があって、文句なしの満点。もちろん、こもわた遙華先生のSDも、可愛く、面白く、格好良く、と三拍子揃った一級品。また、立ち絵そのものの差分や表情差分も相当あるので、会話中のヒロインも表情豊かであり、満足感が高い。 キャラクター キャラクターの作り込みが素晴らしく、どのヒロインも被らない個性と可愛らしさがあり、とても魅力的である。それぞれのヒロインについての詳細は、前述のメインヒロイン評論をご覧いただきたい。 音楽・動画・システム 音楽は、素晴らしいOP曲「astral ability」を筆頭に、ED曲もヒロインごとにきちんと彼女たちらしさが溢れたものが用意されており、いずれも良曲である。 システムは、フローチャート機能が素晴らしい。フローチャート画面上で選択肢を選ぶと、どのルートに進むか確認できる。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 RIDDLE JOKER【こちらの商品は修正パッチ Ver.1.14aを適用済です】※2/17 15時以降に適用されています。━━・‥…━━・‥…━━・‥…━━・‥…━━・‥…かつては【超能力】と呼... Steam 全年齢版 Riddle Joker on SteamFor decades, superpowers and psychic abilities were thought to be mere science fiction, but the discovery of a certain particle called the &...","link":"/articles/riddle-joker-review/"},{"title":"リンクプレビュープラグイン version 1.1 の内容解説","text":"2023年12月26日（火）、Hexo 用タグプラグイン hexo-tag-ogp-link-preview v1.1.0 のアップデートを公開しました。 今回は、README.md に書いていないアップデート内容の解説とリリースの小噺を書き綴ります。 プラグインの紹介 hexo-tag-ogp-link-previewについては、前回の初回リリース記事にまとめています。 どんなプラグインか、どうして開発に至ったかを説明していますので、気になった方は是非ご拝読ください。 アップデート内容の解説 今回のアップデートで、以下の3つの新機能を追加しています。 名前付きパラメータ 画像に代替テキスト追加 ネイティブ遅延読み込み 名前付きパラメータを除いて、PageSpeed Insights にてパフォーマンス・アクセシビリティ・SEO の各監査項目に合格するための改良が主体です。 名前付きパラメータ アップデートを今後も重ねていく上で、名前付きパラメータのサポートは必須でした。 なぜなら、この改修が含まれずに現状のままの場合、指定したいパラメータのために他の全てのパラメータもセットで指定するという現象を、将来的に引き起こす可能性があるからです。 これは、プラグインを利用するユーザーにとって大きなストレスとなります。 ゆえに、記事を書く人のためのユーザビリティと、記事のメンテナビリティを高く保つことを目的として導入したのです。 この機能は、プログラミングに慣れ親しんでいる方であればご存じかと思いますが、それ以外の方のためにも簡単に使い方をご紹介します。 できることをとても大雑把に表現すると、必須ではないパラメータを、名前と値をセットで指定すると、任意の順番で配置できるという機能です。 より分かりやすいように実例を示します。 あなたは、自分が設定したリンクプレビューに対して、rel=&quot;noreferrer&quot;とloading=&quot;eager&quot;を指定したいと考えた、としましょう。 その時、この機能があることで、次のような書き方ができるのです。 rel:noreferrer, eager:loading の書き方{% link_preview https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/ loading:eager rel:noreferrer %} hexo-link-preview-npm-publish の記事 {% endlink_preview %} プラグインのパラメータは、url、target、rel、loading の順で書くのが通常です。 なんと、この機能によって、target を省略して、rel や loading の値を指定できるのです（※上記例の場合、target はデフォルト値の _blank になります）。 そして、実際の記事では、以下のようなHTMLが生成されます。 生成されるHTMLのイメージ&lt;a href=&quot;https://blog.chaotic-notes.com/articles/hexo-link-preview-npm-publish/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; class=&quot;link-preview&quot;&gt; &lt;div class=&quot;og-image&quot;&gt; &lt;img src=&quot;https://blog.chaotic-notes.com/images/technology_programming_title.webp&quot; alt=&quot;hexo-tag-ogp-link-previewの公開に纏わる閑話&quot; loading=&quot;eager&quot;&gt; &lt;/div&gt; &lt;div class=&quot;descriptions&quot;&gt; &lt;div class=&quot;og-title&quot;&gt;hexo-tag-ogp-link-previewの公開に纏わる閑話&lt;/div&gt; &lt;div class=&quot;og-description&quot;&gt;2023年11月19日（日）、自作したHexo用タグプラグイン hexo-tag-ogp-link-preview v1.0.0 を、npmに公開しました。本記事では、プラグインの開発に至った経緯やIcarusテーマでの設定例等、プラグインのREADMEに書いていないような他愛も...&lt;/div&gt; &lt;/div&gt; &lt;/a&gt; 便利な機能ですので、是非ご活用ください。 画像に代替テキスト追加 これを新機能として取り扱っていますが、実質的には不具合修正となります。 プラグイン作成の参考としたhexo-tag-link-previewで、イメージエレメントに対して alt 属性が無かったため、そのまま見落としていました。 このブログを PageSpeed Insights で監査し、アクセシビリティ・SEO の項目で検知されたことで、ようやく気が付いたのです。 修正自体はすぐでしたので、今回のバージョンに取り込ませて頂きました。 この改修により、プラグインを利用している方が、特別な対応をする必要はありません。 プラグインをアップデートしてから記事を再生成すれば、リンクプレビュー画像に代替テキストが付与されるようになります。 PageSpeed Insights のアクセシビリティ・SEO の改善にご利用ください。 ネイティブ遅延読み込み ネイティブ遅延読み込みは、今回のアップデートの目玉機能として位置付けています。 プラグインは、OpenGraph プロトコルの og:image の値から画像の URL を取得します。 取得した URL 先の画像は、圧縮率の悪いフォーマットであったり、横 1200 ピクセルに縦 630 ピクセルの巨大なサイズであったりすることもあります。 その一方で、リンクプレビューは、重要度の高いコンテンツとして取り扱うことは多くありません。 なぜなら、ブログのドキュメント内でビジュアルリッチな引用の用途であることがほとんどだからです。 初期バージョンで生成したリンクプレビューは、上述のようにページに対して、低い重要度にも関わらず、高い影響度を持つという、ギャップを抱えていました。 この状態だと、ページ読み込み時、ブラウザにリンクプレビュー画像のダウンロードとレンダリングを優先させます。そう、すぐに必要でないにも関わらず、です。 これは、リンクプレビューを使用したページの First Contentful Paint や Largest Contentful Paint の速度に悪い影響を齎します。 実際にこのブログでは、「RIDDLE JOKER」のレビューや「サノバウィッチ」のレビューが、その影響を多大に受けました。 これらのページに様々なチューニングを施しても、ついにパフォーマンススコアが90点を超える機会を得ることはできなかったのです。 以上より、優先的に解決するべき課題だと認識したため、今回のアップデートに組み込みました。 この機能も、プラグインアップデート後に特別何かする必要はありません。 記事を再生成すれば、&quot;lazy&quot;の値を持つ loading 属性が、リンクプレビュー画像に自動で付与されます。 もちろん、遅延読み込みをしたくない方もいらっしゃるでしょうから、ブラウザの規定動作となる&quot;eager&quot;も用意してあります。 加えて、初期バージョンとの後方互換性を維持する目的で、loading 属性を消す&quot;none&quot;も利用できます。 ご自身のシーンや状況にあわせて、ご使用いただければ幸いです。 リリース小噺 リリースに四回失敗した プラグインのプロジェクトでは、Markdown 形式でマイルストーンの説明文を記載していて、リリースパブリッシュ時に使用しています。 この時の GitHub Actions ワークフローで、toJSON 関数によりマイルストーンの説明文を取得します。 しかし、この関数は、特殊文字をエスケープ処理しない仕様です（数年間使用していたけど、このパターンに遭遇したことがなかったため、今まで知らなかった）。 そのため、そのトラップに上手く嵌り、リリースできない事件が発生。 とはいえ、ワークフローはアプリケーションのリリースに影響を及ぼすものではないため、今回は手動でリリース発行しました。 GitHub Actions 等の CI/CD ツールってこういうの良くあるんですよねぇ、っていう愚痴でした。 今後のアップデート予定 次のマイナーバージョンであるv1.2.0では、エラーハンドリングとリトライ処理を中心としたアップデートを行う予定です。 また、初回リリース記事でアップデート予定に記載した「固定class名に接頭語を付与」する機能も、新機能として追加します。 これにより、リンクプレビューごとにデザイン調整を行えるようになりますので、次のバージョンまで気長にお待ちいただければと思います。 ここまでご覧いただきありがとうございました。 次回のマイナーアップデート後も今回と同様の解説記事を投稿予定なので、その時はどうぞよろしく。","link":"/articles/update-hexo-link-preview-plugin-v1-1-0/"},{"title":"hexo-tag-ogp-link-previewプラグインを公開しました","text":"2023年11月19日（日）、Hexo.js 製ブログでリンクプレビューを表示するためのタグプラグインを npm に公開しました。開発に至った経緯や Icarus テーマでの設定例等を中心に書き綴ります。 はじめに 何のためのプラグインか hexo-tag-ogp-link-preview は、OpenGraph プロトコル対応のページから取得したデータを用いてリンクプレビューを生成し、Hexo のブログ記事に埋め込むためのプラグインです。 hexo-tag-ogp-link-previewA Hexo tag plugin for embedding link preview by OpenGraph on article.. Latest version: 1.1.1, last published: a year ago. Start using hexo-t... FaceBook を始め X(Twitter) 等の SNS でリンク共有時に表示されるようなカードを、Hexo でも上記のような感じで再現できます。 プラグインについて このセクションでは、プラグインの開発に至るまでの経緯と、参考にしたプラグインとの差異について、説明します。 開発に至った経緯 (1) Hexo.js でブログ作成 元々は、書いた「RIDDLE JOKER」のレビューに、Fanza Games や Steam へのビジュアルリッチなリンクを欲したことが発端です。 レビューを投稿するにあたり、作中のスクショを張りたかったことと、ゲームそのものが R18 指定だったこともあり、Ameba や FC2 等のブログサービスを使用せず、ホスティングしようと考えました。結果、GitHub Pages + Hexo.js + Icarus の組み合わせで、ブログの作成と相成りました。 (2) 既存のリンクプレビュープラグイン導入 Hexo と Icarus には、リンクプレビュー機能がバンドルされていません。そのため、まずは実現方法についてググりました。すると、「Hexo+Icarus リンクカードを設定する」という、まさに正鵠を射る記事を発見。そこに書かれていた hexo-tag-link-preview を npm install して使うことにしました。 しかし、レビュー記事をプレビュー表示してみると、生成したページに問題が発生しています。なんと、Fanza Games 版のリンクが、「undefined」ではありませんか。 (3) 長期間メンテナンスされていない 該当のプラグインは OSS なので、Bug issue を立てて修正していただく考えに至りました。とはいえ、プラグインの最終更新日は、今から2年以上前で止まっています。加えて、作者のブログ記事の「hexo-tag-link-previewをnpmで公開しました。」で、現在は Hexo を使用していない、との記述を発見。 ゆえに、このプラグインがメンテナンスされることは今後ないだろうと判断し、参考にしてゼロから作り直すことを決意しました。 2025年01月16日追記 長期間メンテナンスされていなかった hexo-tag-link-preview ですが、2024年7月についにアーカイブされました。また、作者のブログ記事が削除されているため、リンクを解除しました。 (4) 自作プラグイン開発＆公開へ それから、数日で自作プラグインが完成し、無事にレビュー記事にも反映。作り始めた頃は公開しようとは思っていなかったのですが、もしかして同じ問題にぶち当たってリンクプレビューを諦めた人がいるのではないかと思いました。なので、しっかりとコードリファクタしたうえで、テストも整備して、プラグインを公開させていただきました。皆様に使っていただければ幸いです。 参考プラグインとの違い (1) 命名規則が異なる Hexo.js は、snake_case がデファクトスタンダードのようです。そのため、hexo-tag-link-preview が lowerCamelCase だったところを、hexo-tag-ogp-link-preview では snake_case に変えています。これは、タグ名と設定項目の両方に適用されます（例えば、タグ名は linkPreview から link_preview に、設定項目は、className が class_name に変わっています）。 この違いさえ忘れずに、正しく修正すれば、プラグインそのものを差し替えても、そのまま動作する仕様となっています。 (2) パラメータの順番を問わない hexo-tag-ogp-link-preview は、hexo-tag-link-preview と異なり、タグのパラメータの記載順を入れ替えても正しく認識します。 2025年01月16日追記 hexo-tag-ogp-link-preview は、バージョン 1.1.0 から、名前付きパラメータ機能がサポートされ、必要なパラメータだけを任意に設定できるように機能強化されました。 デザイン設定例 Icarusテーマ利用者向け このセクションは、Icarus テーマ利用者向けに「RIDDLE JOKER」のレビューで表示している FaceBook 風リンクプレビューデザインを設定するための解説をします。 (1) デザイン設定 記事のスタイル定義ファイルに、リンクプレビューで使用する変数定義と各種クラスを追加します。 themes/icarus/include/style/article.styl$link-preview-card-border ?= 1px solid #cbd0d3 $link-preview-card-radius ?= 8px $link-preview-card-margin ?= 1rem 0 $link-preview-card-bg-color ?= #f2f3f5 $link-preview-card-og-description-color ?= #525252 article /* ... 省略 ... */ &amp;.article /* ... 省略 ... */ .content /* ... 省略 ... */ .link-preview display: block overflow: hidden border: $link-preview-card-border border-radius: $link-preview-card-radius margin: $link-preview-card-margin font-size: 1rem background-color: $link-preview-card-bg-color .og-image img display: block object-fit: cover object-position: center aspect-ratio: 40 / 21 width: 100% height: auto .descriptions padding: 0.5rem 1rem .og-title font-size: 1.25rem font-weight: 600 margin-bottom: 0.25rem .og-description color: $link-preview-card-og-description-color 以上で、デザインの設定は完了です。 (2) Hexo設定 続いて、Hexo 設定ファイルで、hexo-tag-ogp-link-preview の設定調整を行います。 ただし、デフォルト設定のままでは、FaceBook 風デザインの再現を阻む不都合が二つ起こります。一つはリンクの文字色が目立つということ、もう一つは画像がギャラリーにアイテムとして追加されてしまうということです。 これらの不都合に対しては、class_name.anchor_link に link-muted link-preview を設定することでリンクの文字色が目立たないようにでき、class_name.image に not-gallery-item を設定することでギャラリーへのアイテム追加を阻止できます。 設定ファイルは、以下のように記載してください。 _config.yml# ... ファイルの上の部分は、省略 ... link_preview: class_name: anchor_link: link-muted link-preview image: not-gallery-item 他の設定値はデザインに影響しませんので、皆様のご自由にしていただいて大丈夫です。 おわりに 今後は、v1.1.0 のマイナーアップデートリリースを予定しており、ソースコードのメンテナビリティ強化のためのリファクタがメインとなります。 機能の強化としては、プラグインが生成する HTML タグの固定クラス（og-image や descriptions など）に対して、リンクプレビューごとに同一の接尾辞をつけられるようにして、シーンに応じてデザインを調整できるようにする予定です。このサイトでは、レビュー記事にラージサイズ画像のリンクプレビュー、それ以外の記事に細長なリンクプレビューといった使い分けをする想定です。 それでは、ここまでご覧いただきありがとうございました。次回のマイナーアップデート後も、今回のような閑話記事を投稿予定なので、その時は良しなに。 関連記事 「hexo-tag-ogp-link-preview v1.1」のリリース解説 参考文献 hexo-tag-ogp-link-preview - npm Hexo + Icarus リンクカードを設定する - Circle KEN","link":"/articles/hexo-link-preview-npm-publish/"},{"title":"Hexo製ブログを公開してGoogle検索できるようにする","text":"手元で作成したHexo.js製ブログを、GitHub Pagesで公開して、Google検索できるようにするまでの手順を、この記事にまとめました。 GitHub Pagesでサイトを公開しようと考えている方の参考になれば幸いです。 はじめに この記事は、「ブログ作成」シリーズの後編です。 前編の記事である「Hexo.js+GitHub Pagesで高機能ブログを手軽に作ろう」を未読の方は、この記事を読む前にそちらから拝読ください。 前後編に分割した理由 下記の二つの理由を持って、記事を前後編の二つの記事に分割することにしました。 PageSpeed Insights で、ページ内の DOM 要素数が 800 を超えていると、警告を受けたから。 テンプレートやスタイルのリファクタを頑張ったが、800 を下回れなかった。 技術的な内容にも関わらず、長すぎて可読性が落ちていると思ったから。 いくつか記事を書いた結果、読了時間が 10 分程度だとバランスが良いという結論になった。 この記事の存在意義 読者様が、ブログ作成シリーズの記事をひと通り読んだ後に Hexo.js + GitHub Pages のブログを作成できるようになっていること。 もしくは、これらの記事を読みながらブログを作成できること。 ブログをお外に公開しよう さて、手元で表示しているブログが満足する出来になって、そろそろお外に公開したくなってきた頃かと思います。 このまま、後編（公開編）の手順に進みましょう。 レポジトリ作成 GitHub のアカウントはあらかじめ作成してください。 無料で使いたい場合は、パブリックレポジトリにする必要があります。 (1) レポジトリ作成 自分のアカウントを使って、GitHub Pages 用のレポジトリを作成します。 画像付きの作成手順がGitHub公式ドキュメントにまとめられていますので、ご確認ください。 (2) 手元にチェックアウト 作成後に、Git コマンド等のツールを使用して、そのレポジトリを手元にチェックアウトします。 それから、構築実践編で作成した&quot;blog&quot;ディレクトリ(※)の中身を丸ごと、チェックアウトした公開用レポジトリのディレクトリ直下にコピーしましょう。 (※) hexo initコマンド実行時に、任意の名前で作成した場合、&quot;blog&quot;をそれに読み替えてください。 ちなみに、この手順を行ってから、構築手順を行うこともできます。 デプロイ設定 (1) デプロイ設定を変更 ブログの設定ファイル&quot;_config.yml&quot;にあるデプロイの設定を、下記のように書き換えましょう。 _config.yml# Include / Exclude file(s) include: - '.nojekyll' exclude: ignore: # ... 途中省略... # Deployment deploy: type: git repo: https://github.com/octocat/octocat.github.io # 「octocat」（2ヶ所）は、ご自身のアカウントIDに変更してください。 branch: gh-pages ignore_hidden: public: false (2) .nojekyll ファイルを作成 チェックアウトした公開レポジトリのルートディレクトリ配下の source ディレクトリに移動し、&quot;.nojekyll&quot;ファイルを作成しましょう。 terminalcd ./source touch .nojekyll これでデプロイの設定は完了です。デプロイする前に、次のセクションの「下書き記事を使いこなす」をよく読んでください。 下書き記事を使いこなす hexo new postコマンドで作った記事は、公開状態の投稿記事になります。 ということは、ブログをお外に公開すると、今後は「書きかけの記事が投稿されちゃった」事故が起こりえます。 非公開状態の下書き記事として作成するコマンドもありますので、それを使えば事故を防げます。 このセクションでは、下書き記事の作成方法と、Hexo サーバーでの表示方法、下書き記事の公開方法を紹介します。 (1) 下書き記事を作成 次のコマンドで、下書き記事を作成します。 terminalhexo new draft &quot;article-name&quot; (2) Hexo サーバーの設定を変更 下書き記事は、手元の Hexo サーバーを起動しても、ブログの記事として表示されません。 &quot;package.json&quot;にある scripts の&quot;server&quot;コマンドに手を加えて、表示する記事として認識させる必要があります。 package.json（※コピーせず、ご自身の手で修正してください） &quot;scripts&quot;: { &quot;build&quot;: &quot;hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server --drafts&quot; // 「 --drafts」を後ろに追加 }, (3) Hexo サーバーの起動 このあとは、通常通り Hexo サーバーを起動させるだけです。 terminalnpm run clean &amp;&amp; npm run server (4) 下書き記事を投稿記事に変換 さて、上記の手順は、あくまで手元で表示できるようにしただけであって、お外では依然として下書き記事が非公開状態として扱われます。 前述の通り、投稿記事は公開状態として扱われるので、下書き記事を投稿記事に変換しましょう。 下記のコマンドを実行することで実現できます。 terminalhexo publish &quot;article-name&quot; GitHub Pages にデプロイ それでは、準備も整ったと思いますので、GitHub Pages にデプロイしましょう！ デプロイは下記のコマンドを実行するだけで終わります。 Windows で下記のコマンドを実行するには、&quot;PowerShell 7.x&quot;が必要です。 それ以下のバージョンしか使えないなど制約がある場合は、二つのコマンドを順番に実行してください。 terminalnpm run clean &amp;&amp; npm run deploy カスタムドメイン登録 GitHub Pages のデフォルトドメインは、アカウントID.github.ioとなるため、嫌な人もいるでしょう。 もちろん、カスタムドメインを無料で登録することもできます。 詳細については、GitHub公式ドキュメントの説明にお任せします。 ただし、カスタムドメインの取得自体はご自身でやる必要がありますので、ドメインを取得できるサービスをご利用ください。 ドメインだけ取りたいなら、お名前ドットコムがオススメです。 検索できるようにしよう ここまできたらあと少しで終わりです。お外に公開したブログを検索できるようにしてみましょう。 Google Analytics 登録 所有者確認のみしたい場合は、この手順はスキップしても問題ありません。 お外に公開したブログのアクセス解析と、“Google Search Console”（以下、GSC）の所有者確認のために、“Google Analytics”（以下、GA）にアカウントを作成します。 アカウント作成は、GoogleのAnalyticsページから行ってください。 単語がよくわからなかったり、手順は面倒だったりしますが、作業自体はそれほど難しくはないので、ここでの説明は省きます。 Google 検索すると、詳しく説明してくれている方たちがいますので、彼らのページを見ることをオススメします。 サイトマップ作成 ブログに書いた記事を、GSC に認知してもらうためにサイトマップを作成します。 (1) プラグインのインストール もちろんサイトマップは、手作業で作る必要はなく、Hexo 公式がhexo-generator-sitemapプラグインを用意しているので、それをインストールしましょう。 terminalnpm install hexo-generator-sitemap (2) サイトマップ作成設定の追加 インストールが終わったら、ブログの設定ファイル&quot;_config.yml&quot;を開いて、サイトマップ作成用の設定を追加します。 _config.yml# Sitemap sitemap: path: - sitemap.xml tags: false categories: false 設定はこれだけでOKです。デプロイコマンドを実行する度に、Hexo がブログのサイトマップを作って、GitHub Pages にデプロイしてくれるようになります。 Google Search Console 登録 GSCにブログの登録（または、プロパティ追加）を行います。 プロパティ追加を行うことで、Google 検索結果にインデックスを作成できます。 (1) 所有者確認 GA・HTML ファイル・HTML タグ・Google タグマネージャー・ドメインの5つの中から確認方法を選んでください。 前述の手順で GA 登録を行っている方は、GA を選ぶと良いでしょう。それ以外の方は、HTML タグか、ドメインのどちらかで確認を行うのがオススメです。 なお、HTML ファイルでの確認方法は、Hexo が自動でテンプレートを適用して表示してしまい、Google が確認できないため、使用不可能です。 (2) サイトマップ登録 所有者確認が済んだ後に、作成したサイトマップの登録を行います。数日後にクロールしてくれるかもしれません（※私はされなかった）。 ちなみに、後日「検出 - インデックス未登録」とされた場合は、未登録ページの一覧が見られますので、一つずつインデックス登録してあげましょう。 おわりに 後編の記事で紹介した GitHub Pages や、Google Search Console は、ブログでなくても活用できる機会は結構ありそうなので、ご覧になった方の何かしらの一助となれば嬉しいです。 仕事が忙しくて、千恋万花をプレイし始めたにも関わらず、ほとんど出来てない今日この頃。 記事を分割した本当の理由はお察しください。","link":"/articles/open-hexo-blog-up-to-the-public/"},{"title":"「目蒲線物語」の歌詞から鉄道の今昔の変遷を見る","text":"「目蒲線物語」という最強の鉄道ネタソングがあります。 世の中にはこんな曲があるのかと、始めて聴いた時の衝撃は、今でも忘れられません。 その曲中に登場する鉄道の今昔の変遷に興味が沸いたので、調べてまとめてみました。 はじめに 「目蒲線物語」は、1983年に発売された、コミックソングと呼ばれるジャンルの曲です。 発売された時期が最近であったら、東急・東武・JR・それらの利用者から苦情が出て、ネットなど方々で炎上しそうな皮肉たっぷりの歌詞です。 とはいえ、昭和後期の鉄道事情を考察するための良い資料に成り得るかもしれません。 なので、今昔の変遷を調べるだけではなく、皮肉たっぷりのコミカルな歌詞と照らし合わせながら、その真偽も確かめてみようと思います。 目蒲線の今昔 東急目蒲線 （せりふ） ぼくの名前は東急目蒲線 父さんは東急東横線 母さんは東急田園都市線 そしてぼくに弟が出来た 東急新玉川線 父さん母さんにそっくりのシルバーメタリックの 綺麗な電車だ！ それに比べてこのぼくは 草色の醜い３両編成・・ （♪） ぼくの名前は目蒲線 さみしい電車だ目蒲線 あっても無くてもどうでもいい目蒲線 だけどプライドはあるんだよ 田園調布を走ってる～ けど 田園調布の人はみんな東横線を使う 東急から～見放～され 今時クーラーも付いてな～い 夏は暑くてサウナ～風呂 そのくせ冬は冷～蔵～庫 出典：ざ・目蒲線物語 東急目蒲線は、目黒駅（東京都品川区）から蒲田駅（東京都蒲田駅）までを結ぶ、過去に存在した東急電鉄の鉄道路線です。 この路線は、東急電鉄の母体であった目黒蒲田電鉄が、洗足田園都市のための交通機関として、最初に開業させた歴史ある路線でした。 それから時を経た昭和後期に、東横線の混雑緩和対策として、目蒲線目黒駅・多摩川駅間のバイパス路線整備計画が立案・実行されます。 これが結実した2000年の夏に、目蒲線は、目黒駅・多摩川駅間の目黒線と、多摩川駅・蒲田駅間の多摩川線の二つに分離されました。 1980年頃は、草色の三両編成の運用だったようです。 その車両に冷暖房装置はなく、車内のアコモデーションレベルは最低クラスでした。 過去にタイムスリップすることがあっても、夏や冬の目蒲線には乗りたくないですね。 ちなみに、夏に冷房がない車内を追体験したいのであれば、山万ユーカリが丘線がおすすめです。 在りし日の冷暖房なし草色三両編成の目蒲線 東急目黒線 前身である東急目蒲線の目黒駅から多摩川駅までの間を受け継いだ鉄道路線です。 目蒲線の分割時に、武蔵小杉駅（神奈川県川崎市中原区）まで、その後の2008年に、日吉駅（神奈川県横浜市港北区）まで延伸。 現在は、北は東京メトロ南北線・埼玉高速鉄道線と都営地下鉄三田線、南は相鉄線と直通しています。 目黒線は、東横線や田園都市線に次ぐ主力級の路線として大成長を遂げました。 東急の主力級路線として大出世した目黒線 東急多摩川線 前身である東急目蒲線の蒲田駅から多摩川駅までの間を受け継いだ鉄道路線です。 大出世を果たした目黒線とは打って変わって、目蒲線時代の都心のローカル線という性質を色濃く受け継いでいます。 多摩川線は、延伸もなく、他社路線直通もないため、車両が新しくなったことを除けば、今も昔も変わらないままといえましょう。 都心のローカル線であり続ける多摩川線 他の鉄道路線の今昔 このセクションでは、「目蒲線物語」に出演する兄「東急池上線」、父「東武東上線」、母「赤羽線（埼京線）・南武線」を登場順に説明します。 歌詞中に一瞬だけ名前が出る、東急東横線、東急田園都市線、東急新玉川線、東急世田谷線の4路線に関しては触れませんので、ご了承ください。 兄 東急池上線 （兄） おまえの兄貴 東急池上線だ おまえはまだいいぞ 目黒から出ている 俺なんかおまえ 五反田だ五反田（ポヨヨ～ン） 出典：ざ・目蒲線物語 東急池上線は、五反田駅（東京都品川区）から蒲田駅（東京都大田区）までを結ぶ、東急電鉄の鉄道路線です。 この路線は、池上本門寺の参詣客輸送を目的に、目黒から池上を経て大森へ至る計画で、池上電気鉄道が開業させました。 池上線の全線開業までの道のりは、遠く厳しかったようです。 池上電気鉄道は、大森付近での用地取得の難航、資金難による目黒駅からの建設難航、支援者の私物化の問題を、創業時から抱えます。 そうこうしている内に、目黒蒲田電鉄が、目黒駅・蒲田駅間を結ぶ目蒲線を全線開業。 目黒駅から五反田駅へ起点変更を余儀なくされながらも、池上線は全通を果たします。 しかし、その頃には目黒蒲田電鉄に経営地盤で後塵を拝しており、最後は買収と相成りました。 また、戦後の一時期、泉岳寺線（桐ケ谷駅・三田線泉岳寺駅間）を新規開業し、三田線と計画線の東武高島平線を経由し、東上線に直通する計画がありました。 この計画が遂行されていたら、池上線が東急の主力級路線に成長していたかもしれません。 そのまま白紙となり、今では三田線は目黒線と直通し、池上線にとっては泣きっ面に蜂状態です。 歌詞に登場する路線で、目蒲線（目黒線）により数多の困難に見舞われた悲劇の路線です。 東急池上線を目蒲線の兄とした理由は、蒲田駅を始発駅としているからでしょう。 けれども、歴史を紐解けば、なんという皮肉でありましょうか。 現在では、既に今は昔のことなのか、弟の半身の東急多摩川線と新型車両を仲良く共用しています。 数多の困難に見舞われた悲劇の池上線 父 東武東上線 （目） 駅が５つか６つ過ぎると全～部埼玉になってしまう あの東武東上線？ 忘れ物にクワとスコップがいちばん多いという 東武東上線？ 出典：ざ・目蒲線物語 東武東上線は、池袋駅（東京都豊島区）から寄居駅（埼玉県大里郡寄居町）までを結ぶ、東武鉄道の鉄道路線です。 下り始発の池袋駅から見て埼玉県で最初の駅は、和光市駅です。 この駅までは、北池袋、下板橋、大山、中板橋、ときわ台、上板橋、東武練馬、下赤塚、成増と、9駅通過する必要があります。 これらの駅は、第二次大戦前に全て開業済みであり、1980年前後と2024年前後で変わりません。 そのため、だいぶ悪い方に誇張された歌詞であることが分かります。 また、第二次大戦後の食糧不足で、川越地方にあるサツマイモ畑に人々が買い出しに押し寄せたことから、東武東上線は「いも電車」の愛称で呼ばれていました。 これにより、「沿線民は農家」という連想を経て、「忘れ物にクワとスコップがいちばん多い」という歌詞が生み出されたのではないか、と推測できましょう。 バカにされるほどローカルじゃない東上線 母 赤羽線・JR埼京線 （母） 母さん余った電車で繋ぎ合わされているから 赤だの黄色だの緑だのってバランバラン （目） ぼくの本当の母さんって誰なの？ （母） 赤羽線よ （目） えっ あの池袋の駅を出ると板橋 十条 赤羽の たった４つしか走ってないという あの赤羽線 出典：ざ・目蒲線物語 国鉄赤羽線は、JR埼京線の前身となる鉄道路線です。 当初は山手線でしたが、山手線が環状運転を開始し、運行系統が変化したことで誕生します。 池袋、板橋、十条、赤羽の4駅だけの短い路線で、1985年に川越線直通の埼京線が開業するまで、赤羽線と呼ばれました。 この路線は、山手線の支線という立ち位置であり、投資のウェイトが低かったことから、つぎはぎな混色編成が見られたのではないかと思います。 これは今でいうと、色々な路線からお下がりの電車を貰う武蔵野線のようなポジションでしょうか。 現在では、新車が導入されて、混雑率が140%前後となる重要な路線に成長しており、東急目黒線と同じく出世した路線と言っても過言ではありません。 さて、この歌詞の中で今でも変わっていないことがあります。それは「バランバラン」なことです。 どういうことかというと、埼京線は、山手線、赤羽線、そして東北本線を繋ぎ合わせたものだからです。 なので、今は、路線を走る電車ではなく、電車の走る路線が「バランバラン」なのです。 電車の走る路線が「バランバラン」な埼京線 母 南武線 （せりふ） そして継ぎ接ぎだらけの母さんは休みの日 目黒に方に遊びに行ったのですが 道に迷って川崎の方まで行ってしまい 後に母さんは継ぎ接ぎだらけの電車 南武線になってしまったそうです 出典：ざ・目蒲線物語 南武線は、川崎駅（神奈川県川崎市川崎区）から立川駅（東京都立川市）までを結ぶ鉄道路線です。 古くは茶色の旧型国鉄電車が走っていましたが、1980年前後から歌詞にあるように他路線から転入した電車が走るようになります。 それからは同じように他路線から転入した電車をお下がりで使っていましたが、2014年秋頃から新車が導入されました。 もう他路線のお下がり電車ではない南武線 おわりに ひとこと ひと昔前に「あっても無くてもどうでもいい」と歌われた目蒲線は、今では「なくてはならない重要な」目黒線に大成長しました。 参考文献 本記事は、下記の文献を参考に作成しています。 東急目蒲線 東急目蒲線 - Wikipedia 目黒蒲田電鉄 - Wikipedia 洗足田園都市 - Wikipedia 東急目黒線 目黒線路線情報｜東急電鉄 東急目黒線 - Wikipedia 東急多摩川線 東急多摩川線路線情報｜東急電鉄 東急多摩川線 - Wikipedia 東急池上線 池上線路線情報｜東急電鉄 東急池上線 - Wikipedia 池上電気鉄道 - Wikipedia 東武東上線 東武東上線｜東武鉄道公式サイト 東武東上本線 - Wikipedia 国鉄赤羽線（JR埼京線） 赤羽線 - Wikipedia 埼京線 - Wikipedia 国鉄南武線（JR南武線） 南武線 - Wikipedia","link":"/articles/look-past-and-present-from-mekamasen-story/"},{"title":"RIDDLE JOKER 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ 本記事では、ゆずソフトより2018年に発売された「RIDDLE JOKER（リドルジョーカー）」の全ルート詳細攻略ガイドを掲載します。 こちらは、「RIDDLE JOKER（リドルジョーカー）」の攻略記事です。 他にも、ゆずソフトの他作品の攻略ガイド記事もありますので、そちらも是非ご覧ください。 おすすめ攻略順 二条院にじょういん 羽月はづき、壬生みぶ 千咲ちさき、在原ありはら 七海ななみ、式部しきべ 茉優まゆ、三司みつかさ あやせの順で攻略を推奨する。 二条院 羽月、在原 七海、壬生 千咲（※二人目以降に攻略可）の三人は、プレイヤーの好みの順番で攻略して構わない。 しかし、本作の根幹となるストーリーである式部 茉優及び三司 あやせは、式部 茉優が先で、三司 あやせが後、という順番でプレイする形を、最後に持ってくるべきである。 ルート分岐データ 分岐確定条件 下表の条件を満せば、他の選択肢の選択内容に関わらず、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 名前 条件 三司 あやせ 学生会室へ相談に行き、いつも通りの寮で食べることを選んでから、模擬店の練習相手を茉優にする。 在原 七海 研究室へ相談に行き、他の全選択肢では七海に関連するものや喜ぶものを選ぶ。 式部 茉優 能力検証時は七海に声をかけず、応援を頼む時は研究室へ行き、模擬店の練習相手として選ぶ。 二条院 羽月 水着姿を見た状態で、模擬店の練習相手に選ぶ。 壬生 千咲 (1) あやせ・七海・茉優・羽月のうちだれか一人のエピローグを見終える。 (2) 七海の水着姿を見てからコンプレックスに切り込み、学生会室へ相談に行き、いつも通りの寮で食べることを選んでから、模擬店の練習相手にする。 要約フローチャート 本作は、茉優及び羽月、または七海及び千咲で、二種類の攻略フローチャートが作れる。 その組み合わせは様々あるが、最高効率に近しいであろうものを掲載する。 前述のおすすめ攻略順に従う場合は、下記の順番でフローチャートを進めること。 ちなみに、図中の青太字の記載（例：セーブ01）がある選択肢は、ルート分岐おける重要なチェックポイントである。 該当のシーンに到達したらセーブを忘れない、を意識しながらプレイしよう。 Aグループの羽月ルートをクリア セーブ01「七海がこちらを見ている」をロードし、Bグループの千咲ルートをクリア セーブ03「どこで食べる？」をロードし、七海ルートをクリア セーブ02「練習は誰から？」をロードし、茉優ルートをクリア セーブ04「練習は誰から？」をロードし、あやせルートをクリア Aグループ（茉優・羽月・あやせ） Bグループ（七海・千咲・あやせ） 共通ルート詳細データ Prologue 選択肢なし Chapter 1 七海がこちらを見ている 【重要】七海か、茉優か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 七海にも声をかける なし 七海の評価+1、七海ルートフラグ=ON このまま検証を続ける なし 茉優の評価+1、茉優ルートフラグ=ON Chapter 2 どちらの水着が？ 【重要】羽月か、七海・千咲か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 二条院さんの水着が気になる なし 羽月の評価+1、羽月ルートフラグ=ON 七海の水着が気になる なし 七海の評価+1 コンプレックス？ 「七海の水着が気になる」を選んだ場合（「羽月ルートフラグ=OFF」の時）に出現する。 ただし、アフターストーリーのプレイアブル人数が 0 人（＝一度もエピローグを見終えていない状態）の時は、選択肢を選べない。この時は、「話題に触れない」が強制的に選択される。 選択肢 前提条件 結果 話題に切り込む Afterプレイアブル人数&gt;0 AND羽月ルートフラグ=OFF 千咲の評価+1、千咲ルートフラグON 話題に触れない なし なし 七海のご機嫌が… 選択肢 前提条件 結果 ちゃんと言い直す なし 七海の評価+1 別にいいか なし なし まずはどちらに？ 【重要】あやせか、茉優か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 まずは、学生会室に相談にいく なし あやせの評価+1、あやせルートフラグ=ON まずは、研究室に相談にいく なし 茉優の評価+1 Chapter 3 どこで食べる？ Chapter 2 のシーン「まずはどちらに？」で、「まずは、学生会室に相談に行く」を選んだ場合（「あやせルートフラグ=ON」の時）に出現する。 もう一方の「まずは、研究室に相談に行く」を選んだ場合（「あやせルートフラグ=OFF」の時）は、選択肢を選べず、「たまには別の寮に」が自動的に選択される。 選択肢 前提条件 結果 いつも通りに あやせルートフラグ=ON あやせの評価+1 たまには別の寮に なし 七海の評価+1 練習は誰から？ 選択肢 前提条件 結果 二条院さん なし 羽月の評価+1 茉優先輩 なし 茉優の評価+1 壬生さん なし 千咲の評価+1 眠れぬ夜の過ごし方 後続シーンによって、羽月、茉優、七海のうち、どのルートに分岐確定かを知ることが可能。 一方、「寝る努力！」シーンであった場合、千咲、あやせ、ノーマルENDのいずれかであることまでしか特定できない。 後続シーン 前提条件 備考 羽月は…？ 羽月ルートフラグ=ON AND 羽月の評価=2 羽月ルート確定 茉優は…？ 茉優ルートフラグ=ON AND 茉優の評価=3 茉優ルート確定 七海は…？ 七海ルートフラグ=ON AND 七海の評価=4 七海ルート確定 寝る努力！ 上記以外 なし 発表祭本番 先手を取るシーンであれば、羽月または千咲の条件を満たしていない限り、あやせルート確定である。 様子を見るシーンであれば、シーン「眠れぬ夜の過ごし方」の後続で「茉優は…？」が発生していた場合、ここで一足先に茉優ルートへ分岐する。 後続シーン 前提条件 備考 先手を取る あやせルートフラグ=ON AND あやせの評価=2 あやせルート確定（例外あり） 様子を見る 茉優ルートフラグ=ON AND 茉優の評価=3 茉優ルート分岐 上記以外 なし 発表祭閉幕 各個別ルートへの分岐優先度は、七海＞羽月＝千咲＞あやせの順である。 なので、七海の条件を満たすと、千咲ルートに分岐できない。同様に、羽月や千咲の条件を満たすと、あやせルートに分岐できない。 後続シーン 前提条件 備考 無事終了 七海ルートフラグ=ON AND 七海の評価=4 七海ルート分岐 襲撃事件の顛末 羽月ルートフラグ=ON AND 羽月の評価=2 羽月ルート分岐 夜空を見上げて 千咲ルートフラグ=ON AND 千咲の評価=2 千咲ルート分岐 一日が終わって… あやせルートフラグ=ON AND あやせの評価=2 あやせルート分岐 平和な日々 上記以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面のメニューに After が増え、該当ヒロインの After と Extra のデータが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの After と Extra のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、Extra の立ち絵鑑賞機能が解禁となる。 あやせ・七海・羽月・千咲 あやせ・七海・羽月・千咲ルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、フローチャートのシーンジャンプ等の機能を使用して、全ての選択肢を選ぼう。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておくこと。 あやせルート Chapter 5「初めての体験」 Chapter 5「パイズリします！」 Chapter 7「我慢できない」 七海ルート Chapter 5「兄妹ではなく男と女へ」 Chapter 6「任務を終えたら…」 Chapter 6「任務を終えたら…続き」 Epilogue「新たな力の使い方？」 羽月ルート Chapter 8「結ばれる二人」 Chapter 9「昼間から…」 Chapter 10「仲直り」 千咲ルート Chapter 6「先輩を癒したい」 Chapter 6「夜はこれから」 茉優 茉優ルートは、攻略途中で選択肢によって眼鏡ありと眼鏡なしの CG 差分が発生するため、詳細データを別途掲載する。 他ヒロインルートと同じく、セーブ＆ロード、選択肢ジャンプ、フローチャートのシーンジャンプ等の機能を駆使することで、CG を全回収できる。 もちろん「Hシーン選択肢固定」機能のこともお忘れなきよう。 Chapter 8「愛の結晶」以外 Chapter 7「初体験」 Chapter 8「愛しい人」 Chapter 8「愛しい人続き」 Chapter 8「愛の結晶」 眼鏡をかける？ 選択肢 前提条件 結果 そのままがいい なし 眼鏡フラグ=OFF 是非、眼鏡で なし 眼鏡フラグ=ON 眼鏡はお好き？ 選択肢 前提条件 結果 このまま！ 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 咥えて！ 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 眼鏡はお好き？続き 選択肢 前提条件 結果 最後も中にたっぷりと 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 最後は抜いてお尻に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。 ここでは、あやせの AFTER STORY 2 のみストッキング有無の CG 差分が発生するため、詳細データを別途掲載する。 あやせ AFTER STORY 2 ストッキングは？ 選択肢 前提条件 結果 あやせに任せて、自分で脱いでもらう なし ストッキングフラグ=OFF あやせが脱ぐ時間すら惜しい なし ストッキングフラグ=ON マッサージして！続き 選択肢 前提条件 結果 中に出すに決まっている ストッキングフラグ=OFF ストッキングなしCG ストッキングフラグ=ON ストッキングありCG ぶっかけに決まっている ストッキングフラグ=OFF ストッキングなしCG ストッキングフラグ=ON ストッキングありCG","link":"/articles/guide-riddle-joker/"},{"title":"あなたの住まいは大丈夫？液状化リスクの簡単な調べ方","text":"本記事では、数ある自然災害の中から地震に主眼を置いて、みなさんに最も影響を及ぼすであろう液状化が発生するリスクを、地理院地図で簡単に調べる方法をまとめました。 はじめに 昨今は、大地震が続いており、今年の元旦にもM7.6規模の能登半島地震が発生しました。 その後で、液状化現象のニュースが頻繁に話題になったのは、今もまだ記憶に新しいです。 この現象は、過去の2018年北海道胆振東部地震、2016年熊本地震及び2011年東北地方太平洋沖地震でも、同様に起こりました。 液状化は、ほとんど人命に関わる直接的な被害になりませんが、致命的な二次災害を複合的に引き起こすため、話題に取り上げられる、と考えています。 さて、何となくの知識や理解のままだと、地図を見ただけでは実感が足りず、災害対策におけるリスクマネジメントに支障があります。 そのため、この記事では液状化が何かを理解していくことから始めます。 液状化現象を理解する 液状化とは、地震が発生した時に地盤が液体のような状態になる現象のことを言います。 このセクションでは、その現象が起こりやすい地層及び地形と、発生メカニズム及び影響・二次災害についてまとめたものを説明します。 起こりやすい地層 地下水位が高く、表層まで水で飽和した、深さ15から20メートル以内の締りの緩い砂質層です。 この砂質層の粒径が、細粒から中粒程度の砂で、粒径が揃っているほど可能性が高くなります。 一方で、これより細粒になると、粘着力による抵抗が生じるため、発生しにくくなります。 また、粒径の大きい礫になると、透水性が大きく水が抜け出しやすいため、液状化に至りません。 起こりやすい地形 海岸埋立地や干拓地、旧河川敷・旧池沼・旧河道の埋立地、砂丘の内陸側縁辺部、砂丘間窪地、潟起源低湿地、自然堤防などです。 発生メカニズム 通常時 砂粒子同士が角を接触させる形で突っ張りあい、その隙間を地下水が満たしており、地盤をゆるく支えている状態です。 液状化中 地震による振動で砂粒子が揺すられることで、それら同士の支えが次第に外れてばらばらになり、圧力が高まった地下水に浮いた状態になります。 液状化後 圧力が高まった地下水が砂と共に地表へ噴出し、地層の中身が抜け出すため、沈下・亀裂・陥没・隆起などの地盤変形を起こします。 影響・二次災害 (1) ライフライン施設の破壊 地中に埋設されている上下水道管とガス管が破損したり、地上の電柱が倒壊したりすることで、水道・電気・ガスなどのライフラインが寸断され、生活障害を引き起こします。 (2) 交通網の機能停止 橋梁の破壊、道路の盛土の滑り出し・沈下、道路そのものの損傷により、緊急避難や救助活動に支障をきたします。それに加えて、通行障害も発生するため、物流が滞ります。 (3) 住居損傷による悪影響 傾いている等の機能障害がある住居に住み続けることで、めまいや吐き気などの健康被害を受けます。 地理院地図で調べる 地理院地図は、国土地理院が発信する日本国土の様々な情報をまとめたウェブ地図です。 その中に、「地形分類」と呼ばれる、土地の成り立ち・形態・性質から、発生しうる自然災害リスクを調べられる地図があります。 このセクションでは、その地図の使い方を説明しながら実際に検索してみます。 地形分類の設定方法 使い慣れていないと設定が難しいため、吹き出し付き画像で説明します。 (1) 地図の一覧を表示 地理院地図を開いた後の世界地図画面で、左上の地図アイコンをクリックします。 (2) 地図の種類を選択 左側に表示されるリストから、「土地の成り立ち・土地利用」をクリックします。 (3) 地形分類を選択 「土地の成り立ち・土地利用」の地図一覧の中から、「地形分類（ベクトルタイル提供）」をクリックします。 (4) 『地形分類（自然地形）』に設定 「地形分類（自然地形）」をクリックすると、選択中の地図に追加設定されます。 地形分類の検索例 筆者が勤めている会社の入居ビルと、1月末に発表された「＜首都圏版＞ 2024年 LIFULL HOME’S みんなが探した！住みたい街ランキング」から、借りて住みたいランキング一位の「本厚木駅」周辺及び買って住みたいランキング一位の「勝どき駅」周辺の3つを検索してみました。 (1) 会社の入居ビル まずは、筆者が勤めている会社の入居ビルがある目黒駅周辺を見てみましょう。 地形分類（桃色字）が「山地」と「台地・段丘」の境界にまたがるように、ビルが立っています。 「山地」の自然災害リスクは、「大雨や地震により、崖崩れや土石流、地すべりなどの土砂災害のリスクがある」です。 一方、「台地・段丘」の方はと言うと、「地盤は良く、地震の揺れや液状化のリスクは小さい」となっています。 液状化のリスクは小さいですが、地すべり等の土砂災害のリスクはあるようなので、良い土地とはっきり言い切れないのが残念ですね。 とはいえ、ビルの用途は、居住用ではなく商業兼オフィスなので、問題はないのかな。 (2) 本厚木駅周辺 次に、借りて住みたいランキング一位「本厚木駅」の周辺をみてみましょう。 地形分類は「氾濫平野」。この地形の自然災害リスクは、「河川の氾濫に注意。（略）液状化のリスクがある。沿岸部では高潮に注意」です。 本厚木は、小田急小田原線で新宿までの所要時間がおよそ50分程度と、郊外エリアの中では都心方面へのアクセスは良好です。 しかし、河川氾濫・液状化・高潮といった複数の自然災害リスクがあることを考慮すると、この一帯に借りて住もうという考えは、良い案とは言えませんね。 (3) 勝どき駅周辺 最後に、買って住みたいランキング一位の「勝どき駅」周辺もみてみましょう。 地形分類は「旧水部」。この地形の自然災害リスクは、「地盤が軟弱である。液状化のリスクが大きい。沿岸部では高潮に注意」です。 読んでわかる通り、前述した本厚木駅周辺の完全上位互換となる自然災害リスクを持っています。 東京都内の新築マンション価格が昨今の高騰しているといえども、居住用には不向きですし、投資用としてもリターンと釣り合ってないのではないでしょうか。 おわりに 液状化のメカニズムと、引き起こす影響や二次災害を見て、地理院地図の地形分類で検索してみました。 その恐ろしさの一端を感じてから、検索例として採用した「住みたい街ランキング」を見ると、液状化含め自然災害リスクを身近に感じていない人が少なくないと分かります。 借りて住むにしても、買って住むにしても、なるべく保有リスクは最小限にするべきです。 みなさんが、今後そのような機会があれば、この記事を活用していただければ幸いです。 参考文献 液状化 防災基礎講座 基礎知識編：4. 地盤液状化 - 防災科学技術研究所 盛土・宅地防災：液状化現象について - 国土交通省 東京都建物における液状化対策ポータルサイト 地理院地図 土地の成り立ちから災害リスクを知る｜地理院地図の使い方 - 国土地理院 住みたい街ランキング 「＜首都圏版＞ 2024年 LIFULL HOME’S みんなが探した！住みたい街ランキング」","link":"/articles/search-liquefaction-risk-from-gsi-maps/"},{"title":"千恋＊万花 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2016年に発売された「千恋＊万花（せんれんばんか）」をクリアしたので、作品の評価を感想付きでレビューします。 こちらは、「千恋＊万花（せんれんばんか）」のレビュー記事です。 本作を始め、ゆずソフト作品のレビューを多数投稿しているので、興味があれば是非ご覧ください。 作品概要 あらすじ 湯治場として知られ、交通機関が脆弱で不便な土地である『穂織ほおり』の町。ここは、昔ながらの和の風景を残す小京都の街並みであり、観光地として有名であった。 主人公 有地ありち 将臣まさおみ は、春祭りによる人手不足解消のため、祖父が経営する旅館『志那都荘しなつそう』へ手伝いに駆り出される。祖父に挨拶するために『建実神社たけみじんじゃ』へ赴いたところ、岩に刺さった御神刀『叢雨丸むらさめまる』を引き抜くイベントに挑戦することに。しかし、今まで誰も引き抜けなかったというその刀を、引き抜くどころか、ポッキリ折ってしまう。慌てふためく彼をよそに、刀の管理者を名乗る少女の幽霊 ムラサメ が現れ、たちまちのうちに巫女姫である 朝武ともたけ 芳乃よしの と婚約を結ばされる。 それから、彼は、穂織の地に纏わる呪いについて知り、深く関わっていくことになる。 登場キャラクター メインヒロイン 朝武ともたけ 芳乃よしの（CV：遥はるか そら、原画：こぶいち） 常陸ひたち 茉子まこ（CV：小鳥居ことりい 夕花ゆうか、原画：むりりん） ムラサメ（CV：佐藤さとう みかん、原画：むりりん） レナ・リヒテナウアー（CV：沢澤さわさわ 砂羽さわ、原画：こぶいち） サブヒロイン 鞍馬くらま 小春こはる（CV：真宮まみや ゆず） 馬庭まにわ 芦花ろか（CV：西山にしやま 冴希さき） 各種スペック システム 前作「サノバウィッチ」と比較して、本作から導入された新機能は太字で記載している。 本作から、キーボードのショートカットキー割り当てを変更できるようになった。 ストーリープレイ画面 セーブ・クイックセーブ、ロード（お気に入りボイス鑑賞＋シーン回想）・クイックロード、前・次のシーンへ移動、前・次の選択肢へ移動、オート、スキップ・バックスキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ、フローチャート エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞 システム設定 画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、キーボード シナリオ 共通ルート Chapter 1 から Chapter 3 まで（チャプター総数 17） 個別ルート 芳乃ルート（チャプター総数 15）、茉子ルート（チャプター総数 15）、ムラサメルート（チャプター総数 23）、レナルート（チャプター総数 15）、小春ルート（チャプター総数 17）、芦花ルート（チャプター総数 18）の六つ。 なお、小春ルートと芦花ルートは、芳乃・茉子・ムラサメ・レナのうちいずれか一人以上のエピローグを見終えた場合に、アンロックされる条件あり。 エンディング 各ヒロインルートのエンディング六つとノーマルエンド一つの計七つ。 アフターストーリー 各ヒロインのエピローグまで見終えるごとに、そのヒロインのアフターストーリーがアンロックされる（芳乃・茉子・ムラサメ・レナ・小春・芦花で1話ずつ）。 ムービー曲 オープニング 「恋ひ恋ふ縁」 歌：KOTOKO エンディング 芳乃ルート 「愛しさと感謝の気持ち」 歌：榊原ゆい 茉子ルート 「ふたりで」 歌：Riryka(Angel Note) ムラサメルート 「ふたつの影」 歌：春風まゆき(Angel Note) レナルート 「GIFT」 歌：カサンドラ 小春ルート 「Love flower」 歌：葉月(Angel Note) 芦花ルート 「キミのとなり」 歌：tohko メインヒロイン評論 朝武 芳乃 オススメ度：★★★☆☆ 性格や人柄 将臣と同学年で、かつて穂織を治めた朝武家が受け継いできた建実神社の巫女姫である。 当初は、冷たくよそよそしい態度を将臣に頑なに見せており、彼を可哀そうに感じることもあって、彼女への心象は非常に悪い。しかし、ストーリーの進行と共にデレていく様子や、彼女自身の成長が描かれるため、そのうち評価を改めていくことになるであろう。したがって、彼女は、プレイヤーの印象を反転させるギミックによって精巧に創られたヒロインである。 なるほど、ではツンデレか、と言えば、これはギミックの話であって、性格は全く異なるのだ。素直で嘘が付けず、生真面目で責任感があり、強い意志を持ち最後までやり抜く性格である。 個別ルートの感想 個別ルートは、ストーリーの山場をひとつ下りた後に、二つ目が現れることもなくそのままあっさりと終わり、肩透かしを食らった。 いちゃいちゃ糖度は全体的に高めだが、通常CGのバリエーションが少なく、キスCGに頼りっぱなしで、イマイチ火力不足だったのは少々残念である。そういう背景もあって専用CGがある「処女をもらって下さい」発言シーンは、強烈に印象に残る。このシーンは、彼女の気質が強く表れており、キャラクター達の一連のやりとりも面白く、一見の価値はあるので、彼女を攻略してみて欲しい。 芳乃ちゃんの衝撃発言に度肝を抜かされる © YUZUSOFT / JUNOS INC. All Rights Reserved. 常陸 茉子 オススメ度：★★★★☆ 性格や人柄 将臣と同学年で、穂織の巫女姫である芳乃の側仕えと護衛を務める忍者である。 普段から物腰柔らかく気丈夫で世話好き気質だが、揶揄ったり悪戯したりと茶目っ気も見せる。そして、料理・掃除・洗濯など朝武家における家事をすべて一人で熟し、そのうえお昼のお弁当まで手作りで準備してくれる。一方、異性とのコミュニケーション経験が少なく、女の子扱いされることに慣れておらず、ひそかに少女漫画のシチュエーションに憧れる純情で乙女なところもある。 異性として意識していない時には、ドキッとさせるような行動を積極的にするのに、意識するとやられっぱなしになるという、攻撃力全振りノーガード系ヒロインである。 個別ルートの感想 個別ルートは、生い立ちから色々なものを諦めて卑屈になっていた彼女が、呪いをきっかけに将臣と恋仲となり、殻を破って成長していく姿が描かれる。また、将臣が積極的にアプローチをかけることで、彼女が可愛いリアクションをしてくれるため、とても美味である。 最推しシーンを選ぶならば、疑似デートの最後で将臣が彼女に告白するシーンであろう。直後のシーンは小一時間ほどライターに苦言を呈したいが、そのシーンは彼の格好良さと彼女の可愛さのマリアージュが素晴らしいのだ。 茉子ちゃんは、将臣君にこの後顎クイされます © YUZUSOFT / JUNOS INC. All Rights Reserved. ムラサメ オススメ度：★★★★☆ 性格や人柄 神刀「叢雨丸」の管理者となるために、500年ほど前に人柱となった少女の幽霊である。 そのため、一般人には姿も見えず会話もできないが、叢雨丸に縁のある芳乃・茉子・レナの三人は、彼女の姿が見えて会話ができる。さらに、その持ち主に選ばれた将臣は、それだけではなく、彼女との物理的接触が唯一可能である。 普段は、生意気な態度をとったり、頭を撫でられて喜んだりと、外見通りの子供っぽさを見せる。しかしながら、最年長ということもあり、時折大人の色気を感じさせる立ち振る舞いをするギャップがあるのも彼女の魅力の一つだろう。ロリババアキャラが好きな紳士淑女の性癖に直撃するヒロインである。 個別ルートの感想 個別ルートは、御神刀イベントが無くなり穂織の財政が傾いたことで、代わりの町おこしイベントを探し始め、奔走するうちに将臣と彼女が親密になるストーリーである。 彼女が人柱になる前の過去を知り、それから数百年にも及ぶ想いに触れる機会があるため、彼女を幸せにしてあげたいと考えるプレイヤーは少なくないだろう。シリアス要素が垣間見える彼女ではあるが、可愛らしさで我々の心を潤してくれるので安心して欲しい。将臣に膝枕するシーンは、彼女の魅力が凝縮されているので、攻略して是非ご堪能あれ。 私も仕事で疲れているので、癒してくれませんか？ © YUZUSOFT / JUNOS INC. All Rights Reserved. レナ・リヒテナウアー オススメ度：★★★☆☆ 性格や人柄 志那都荘の人手不足解消のために従業員として雇われたラップランド出身の外国人留学生。 ハグした芳乃と茉子に「これが世界」という感想を抱かせるほどの驚異的なスタイルの持ち主だが、如何わしい本を見て卒倒するほど初心である。間違った用法の日本語を使って、周囲をヒヤリとさせることもあるが、本人の前向きでポジティブな性格で誤魔化せているのか、いつも事なきを得ている。 彼女は良い意味でも悪い意味でも表裏がなく、キャラクター性の味付けとなる癖やギャップがないため、物足りなさを感じることもあるが、王道的で正統派のヒロインとも言えよう。 個別ルートの感想 個別ルートは、穂織や叢雨丸など作品の根幹に関わる真相が盛り沢山な内容で、他ヒロインルートでの伏線が回収されてグランドエンディングとなる重要なストーリーである。 そのため、他ヒロインよりもいちゃいちゃ糖度が低めだからなのか、彼女がこの役割を果たすために創られたキャラクターであるように感じてしまって、それが残念でならない。しかし、その代わりにストーリーの質は全ヒロイン中最も優れており、終盤に近づくほど見どころが多くなっていき、プレイしていて面白く、読後感も良好である。 さて、そんな彼女のルートだが、お泊り会で二人で夜空を見ながら、将臣が告白するシーンはとても素敵なので、このシーンを推しとしたい。 夜空を見ながらの素敵な告白シーン © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 88点（優/A+ランク） 全体的にどこかしら物足りなさを感じる薄い味付けだが、癖がなくバランスの良い仕上がりである。 したがって、本作は、美少女ゲームの入門としてオススメできる作品と言えよう。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 10/10点 構成 7/10点 演出 6/10点 合計 23/30点 グラフィック クオリティ 10/10点 ボリューム 8/10点 合計 18/20点 キャラクター 作り込み 9/10点 ボイス 10/10点 合計 19/20点 プレイ環境 音楽 10/10点 動画 9/10点 システム 9/10点 合計 28/30点 コメント シナリオ 穂織に纏わる呪いを中心にしてストーリーが構築されており、完成度は高いと言える。 コンパクトできれいにまとまっているが、レナルートに伏線回収の役割が集中しすぎて、他のヒロインルートではコアテーマを十分に掘り下げられていなかった。そのため、全ルートの攻略を完了するまでは、消化不良感というか、物足りない印象があった。とはいえ、退屈や苦痛を感じることがほぼ無いので楽しみながらプレイできるし、完走できれば満足感が得られるため、ここは評価すべき点であろう。ただし、アフターストーリーが本編のエピローグよりも前の時系列になっていて、アフターではなくサイドストーリーのようになっているのは減点要素である。 グラフィック いつも通りの高クオリティだが、通常CGとHCGのボリューム配分がアンバランスであった。個別ルートで、糖度高めなシチュエーションでCGがないのは、実際にそうではないのにボリューム不足を感じてしまうので、非常に残念である。 キャラクター ヒロインの作り込みが良く、ボイスもキャラクターイメージにフィットしていて、とても魅力的である。 それぞれのヒロインについては、前述のメインヒロイン評論をご覧いただきたい。 音楽・動画・システム OP「恋ひ恋ふ縁」は、KOTOKO曲ということもあり、ゆずソフト作品中トップクラスの良曲である。加えて、ED曲も作品や各ヒロインに合わせた和風な曲調で、音楽面は文句なしの満点。 そして、システムは、前作と比べて大幅に強化されており、お気に入りボイスシーン回想や、フローチャートなど、より作品に没入できるようになった。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 千恋＊万花【萌えゲーアワード2016 準大賞 受賞】電車も通っていない山の中に、『穂織（ほおり）』の町はある。周りとの交流も薄いせいか、文明開化にすら乗り遅れた田舎町。だがそのおかげで独自の発展を遂げ、今では一風変わった温泉地... Steam 全年齢版 Senren＊Banka on SteamSenren＊Banka is a Japanese-style visual novel produced by Yuzusoft, a Japanese developer of romance VNs. This game commemorated Yuzusoft&#39...","link":"/articles/review-senren-banka/"},{"title":"Go 1.22でForループスコープ変数の問題が正式に修正へ","text":"Go 1.21 までは For ループのスコープ変数に問題がありましたが、Go 1.22 でようやく正式修正となったため、その問題の内容と原因を解説します。 どのような問題か For ループ内で、別スコープで実行する処理（無名関数や Goroutine）中に、ループスコープ変数を直接取り扱う処理を行うと、意図しない実行結果になる問題です。 意図しない実行結果は、どの無名関数や Goroutine でも、ループスコープ変数の値がすべて同じ値になる、という仕様によって引き起こされます。この仕様がどうして問題かというと、書いた通りに動かないからです。同じ処理がループの外と内で異なる実行結果になるのは、プログラマにとって仕様ではなく不具合と言って差支えないでしょう。 身近な実例 チャネルや WaitGroup を使う機会は意外と少ないため、書く頻度が高そうなコードで説明します。 以下のサンプルは、ゆずソフトのいくつかのゲームリストから、2016年5月20 日以前に発売されたタイトルを、別のリストに抽出する処理です。このコードを実行すると、1.22 では期待する結果になりますが、1.21 ではそうなりません。 サンプルコードの完全版は、「The Go Playground」にあります。 func main() { type GameTitle struct { name string brand string published_at string } titles := []GameTitle{ {name: &quot;天色＊アイルノーツ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2013-07-26&quot;}, {name: &quot;サノバウィッチ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2015-02-24&quot;}, {name: &quot;千恋＊万花&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2016-07-29&quot;}, {name: &quot;RIDDLE JOKER&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2018-03-30&quot;}, } invokers := make([]func(time.Time) *GameTitle, 0) for _, v := range titles { invokers = append( invokers, func(compare time.Time) *GameTitle { fmt.Printf(&quot;Game title is '%s'.\\n&quot;, v.name) if published, _ := time.Parse(&quot;2006-01-02&quot;, v.published_at); published.Before(compare) { return &amp;v } return nil }, ) } results := make([]GameTitle, 0) for _, v := range invokers { if ret := v(time.Date(2024, 5, 20, 0, 0, 0, 0, time.Local).AddDate(-8, 0, 0)); ret != nil { results = append(results, *ret) } } fmt.Printf(&quot;Results is %+v.&quot;, results) } Go 1.21 以前の実行結果 ループスコープと匿名関数スコープで、下記のように変数の値が異なる結果になります。 「RIDDLE JOKER」のデータだけが出力されていることから分かるように、ループの最終イテレーションでバインドされた値が、全ての匿名関数スコープで参照されます。よって、「RIDDLE JOKER」は2016年5月20日以降に発売されているため、対象データはなしとなり、抽出結果が空の配列になります。 LoopScope: {name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26}. LoopScope: {name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}. LoopScope: {name:千恋＊万花 brand:ゆずソフト published_at:2016-07-29}. LoopScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. FuncionScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. FuncionScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. FuncionScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. FuncionScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. Results is []. Go 1.22 の実行結果 ループスコープと匿名関数スコープの結果が一致します。 これにより、匿名関数の処理が正しく行われ、2016年5月20日以前に発売された「天色＊アイルノーツ」と「サノバウィッチ」が、抽出結果のリストに含まれます。 LoopScope: {name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26}. LoopScope: {name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}. LoopScope: {name:千恋＊万花 brand:ゆずソフト published_at:2016-07-29}. LoopScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. FuncionScope: {name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26}. FuncionScope: {name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}. FuncionScope: {name:千恋＊万花 brand:ゆずソフト published_at:2016-07-29}. FuncionScope: {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. Results is [{name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26} {name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}]. なぜ発生するのか この問題が発生する理由は、イテレーションごとにループスコープ変数を新しく割り当てないためです。Go 1.22 では、イテレーションごとにループスコープ変数を新しく割り当てるようになりました。 原因の確認 それでは、Go 1.21 で変数が新しく割り当てられていないことを確認してみましょう。 サンプルコードを簡単にした派生コードをベースに、ループスコープと匿名関数スコープのそれぞれの変数アドレスを出力するように書き換えます。 func main() { type GameTitle struct { name string brand string published_at string } titles := []GameTitle{ {name: &quot;天色＊アイルノーツ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2013-07-26&quot;}, {name: &quot;サノバウィッチ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2015-02-24&quot;}, {name: &quot;千恋＊万花&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2016-07-29&quot;}, {name: &quot;RIDDLE JOKER&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2018-03-30&quot;}, } results := make([]func(), 0) for _, v := range titles { fmt.Printf(&quot;[loop] address = %p, value = %+v.\\n&quot;, &amp;v, v) results = append(results, func() { fmt.Printf(&quot;[func] address = %p, value = %+v.\\n&quot;, &amp;v, v) }) } for _, v := range results { v() } } これを実行した結果は、次のようになります。 [loop] address = 0xc0000160f0, value = {name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26}. [loop] address = 0xc0000160f0, value = {name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}. [loop] address = 0xc0000160f0, value = {name:千恋＊万花 brand:ゆずソフト published_at:2016-07-29}. [loop] address = 0xc0000160f0, value = {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc0000160f0, value = {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc0000160f0, value = {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc0000160f0, value = {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc0000160f0, value = {name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. ループスコープ変数は同じアドレスを使い、イテレーションごとに値が上書きされています。 また、ループスコープと匿名関数スコープのそれぞれの変数アドレスが同一であるため、使いまわされていることも分かります。 別の視点でも確認 さて、聡い方は、原因を確認するためのコードを見て気付いたのではないでしょうか。ループスコープ変数が値ではなくポインタの場合は、違う挙動になるのではないか、と。では、その気付きが正しいかを、派生コードの GameTitle 構造体のポインタを要素に持つスライスに置き換えて確認してみましょう。 func main() { type GameTitle struct { name string brand string published_at string } titles := []*GameTitle{ {name: &quot;天色＊アイルノーツ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2013-07-26&quot;}, {name: &quot;サノバウィッチ&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2015-02-24&quot;}, {name: &quot;千恋＊万花&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2016-07-29&quot;}, {name: &quot;RIDDLE JOKER&quot;, brand: &quot;ゆずソフト&quot;, published_at: &quot;2018-03-30&quot;}, } results := make([]func(), 0) for _, v := range titles { fmt.Printf(&quot;[loop] address = %p, value = %+v.\\n&quot;, v, v) results = append(results, func() { fmt.Printf(&quot;[func] address = %p, value = %+v.\\n&quot;, v, v) }) } for _, v := range results { v() } } 実行した結果は、以下のようになります。 [loop] address = 0xc0001060c0, value = &amp;{name:天色＊アイルノーツ brand:ゆずソフト published_at:2013-07-26}. [loop] address = 0xc0001060f0, value = &amp;{name:サノバウィッチ brand:ゆずソフト published_at:2015-02-24}. [loop] address = 0xc000106120, value = &amp;{name:千恋＊万花 brand:ゆずソフト published_at:2016-07-29}. [loop] address = 0xc000106150, value = &amp;{name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc000106150, value = &amp;{name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc000106150, value = &amp;{name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc000106150, value = &amp;{name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. [func] address = 0xc000106150, value = &amp;{name:RIDDLE JOKER brand:ゆずソフト published_at:2018-03-30}. イテレーションごとにループスコープ変数のアドレスが変わっています。しかし、これは新しい変数を割り当てているのではなく、オリジナルの GameTitle 構造体の各要素に割り当てられたポインタのアドレスです。以上より、ポインタの場合は、イテレーションごとに値ではなく参照するポインタを書き換えていることが分かります。 おわりに Go 1.21 以前を使っている場合は、なるべく早めに Go 1.22 に更新しましょう。 まとめ どのような問題か？ For ループ内で、別スコープで実行する処理（無名関数やGoroutine）中に、ループスコープ変数を直接取り扱う処理を行うと、意図しない実行結果になる問題。 なぜ発生するのか？ For ループのイテレーションごとにスコープ変数を新しく割り当てないことで、最後に更新した値・ポインタが残存するため。 値の場合は、一つのループに対して一つだけ割り当てられた変数の値を更新する仕様 ポインタの場合は、一つのループに対して一つだけ参照しているポインタのアドレスを更新する仕様 どのように解決したのか？ For ループのイテレーションごとにスコープ変数を新しく割り当てるように処理を変更した。 値の場合は、イテレーションごとに変数の値を保持する仕様 ポインタの場合は、イテレーションごとに参照するポインタを保持する仕様 参考文献 Go 言語公式サイト Go 1.22 Release Notes - The Go Programming Language Fixing For Loops in Go 1.22 - The Go Programming Language","link":"/articles/describe-fixing-for-loops-in-go-1-22/"},{"title":"PNGやJPEGをWebPに変換してサイトを高速化しよう","text":"JPEG 形式や PNG 形式の画像から、ウェブサイトの高速化が期待できる優秀な次世代フォーマット「WebP」へ変換する方法をご紹介します。 はじめに 当ブログでは、当初、JPEG 形式や PNG 形式の画像フォーマットが混在していました。 PNG 形式は品質が良い代わりにサイズが大きく、JPEG 形式はサイズが小さい代わりに品質が悪くと、画像の取り扱いに悩んでいました。そんな時に、パフォーマンスチューニングで使っていた PageSpeed Insight から次世代フォーマットで画像配信をするように提案されます。 それがきっかけとなり、使用する画像のフォーマットを WebP 形式に統一することにしました。 WebP とは何か？ WebP（読みは「ウェッピー」）は、Google が2010年9月30日に仕様を公開した比較的新しい画像フォーマットです。特徴は、PNG 形式と同じような可逆圧縮を始め、JPEG 形式と同類の不可逆圧縮、そして、GIF 形式や APNG 形式のようなアニメーションをサポートしていることです。また、可逆圧縮であれば PNG 形式の約四分の三のサイズ、不可逆圧縮であれば JPEG 形式の約三分の二のサイズで、同等の品質を再現できます。これらの特徴からも分かる通り、小さいサイズで豊富な表現力を持つため、ウェブサイトのクオリティを維持しながら高速化を実現できる万能画像フォーマットです。 データ圧縮の種類 データ圧縮は、可逆圧縮と不可逆圧縮の二種類があり、WebP はその両方に対応しています。それぞれの圧縮方式の特徴について簡単に解説します。 可逆圧縮 可逆圧縮は、ロスレス（Lossless）圧縮とも呼び、「圧縮」後のデータを「逆」の完全な状態へ戻す事が「可」能である性質を持ちます。 この方式は、圧縮前のデータと伸張後のデータが完全に一致するため、テキストに対して用いられます。例えば、ウェブの世界では、HTML、CSS、JavaScriptなどのリソースに対して適用されます。なお、画像、音声、動画であれば、編集でデータ損失が発生しないという強みを享受できます。 不可逆圧縮 一方、不可逆圧縮（または、非可逆圧縮）は、ロッシー（Lossy）圧縮とも呼び、「圧縮」したデータを「逆」の完全な状態へ戻す事が「不可」能である性質を持ちます。 この方式は、圧縮前のデータと伸張後のデータが完全に一致しないため、情報が多少欠落しても影響が少ない画像、音声、動画に対して用いられます。 他の画像形式との比較 WebP は、他の画像形式と比べてどれくらいの性能になるでしょうか。実験として、標準画像データベース SIDBA にある TIFF 形式の画像「4.2.06 Sailboat on lake」を、WebP（不可逆圧縮・可逆圧縮）、PNG、JPEG の四種類の形式へエンコードします。 元画像との比較 WebP（不可逆圧縮）及び JPEG は最高品質の、WebP（可逆圧縮）及び PNG は最高圧縮レベルの条件で試してみたところ、次のような結果になりました。 形式 サイズ 差分 TIFF 786,572 Byte ※元画像のため、「0」 WebP（不可逆圧縮） 170,506 Byte ▲616,066 Byte(▲78.3%) WebP（可逆圧縮） 501,682 Byte ▲284,890 Byte(▲36.2%) PNG 659,813 Byte ▲126,759 Byte(▲16.1%) JPEG 483,250 Byte ▲303,322 Byte(▲38.6%) 圧縮性能は、断然トップの WebP（不可逆圧縮）形式、次点で JPEG 形式、その次点に惜しくも届かなかった WebP（可逆圧縮）形式、最後尾に鎮座する PNG 形式で並びます。 他の画像形式と比較 この結果をもとに WebP（不可逆圧縮・可逆圧縮）に対する PNG 形式及び JPEG 形式の圧縮性能で比較した勝敗を下表にまとめました。 WebP 相手 差分 結果 不可逆圧縮 vs PNG ▲489,307 Byte(▲74.2%) ◎ vs JPEG ▲312,744 Byte(▲64.7%) ◎ 可逆圧縮 vs PNG ▲158,131 Byte(▲23.9%) ○ vs JPEG +18,432 Byte(+0.04%) × 不可逆圧縮の WebP 形式は、サイズがとても小さくなっているにも関わらず、元画像と目視で確認する程度では違いが分からないほど、優秀なパフォーマンスを誇ります。一方で、可逆圧縮の WebP 形式は、他と比べて抜きん出た強みがなく、何とも中途半端です（※注：可逆圧縮の中だけで考えるのであれば、とてつもなく優秀）。そのため、ウェブサイトの高速化という目標に適しているものは何かと問われたら、不可逆圧縮の WebP 形式ということになるでしょうか。 断トツの性能を誇る WebP 形式（不可逆圧縮）に変換した「Sailboat on lake」の画像 WebP に変換する ダウンロード手順 WebP 公式ホームページからユーティリティツールをダウンロードする手順を紹介します。 (1) WebP コンバータのダウンロードに移動 WebP 公式ホームページを開いた後、右側にある「このページの内容」の「WebP コンバータのダウンロード」をクリックします。 (2) プリコンパイルされたユーティリティに移動 「WebP コンバータのダウンロード」の「Linux、Windows、macOS」のリンクをクリックします。 (3) ユーティリティツールのダウンロード Windows 11 をご利用の場合 libwebp-1.5.0-windows-x64.zip のリンクをクリックします。 Windows 10 以前のバージョンをご利用の場合 64bit版であれば、libwebp-1.5.0-windows-x64.zip のリンクをクリックします。 32bit版であれば、「ダウンロード リポジトリ」のリンク先ページから libwebp-1.0.3-windows-x86.zip のリンクをクリックします。 ローカル環境の整備 (1) zipファイルを解凍 ダウンロードした libwebp-1.5.0-windows-x64.zip を解凍します。解凍後は、libwebp-1.5.0-windows-x64 ディレクトリを任意の場所に配置します。 (2) パスを通す パスを通さなくても、ユーティリティツールは実行できます。ただし、ユーティリティツールのフルパスを指定して実行する必要があります。 ユーティリティツールのディレクトリのパスを通します。パスの通し方は、外部サイト「Windowsの環境パスを通す(path)」の手順を参考にしてみてください。 ユーティリティツールの実行 ユーティリティツールに様々なコマンドが含まれていますが、良く使われるものの使い方を説明します。 不可逆圧縮 WebP エンコード 不可逆圧縮時の最適な設定を探すために、様々な種類の画像に対するエンコードを試しました。その結果、オススメの設定は、品質係数「92」、圧縮方式「6(最遅)」です。 品質係数をこの数値にした理由として、「92」以降では目に見えて分かる品質の向上が実感できなくなるからです。そして、品質係数を一つ上げるごとに、サイズがおよそ3KBから4KB程度増えます。圧縮方式は、高い数字を指定するとサイズを小さくする効果があり、不可逆圧縮で最遅の「6」にしても、可逆圧縮より圧倒的に少ない時間でエンコードできます。 ゆえに、コストパフォーマンスに最も優れた設定がオススメしたものということになります。 cwebp -q 92 -m 6 -o lossy_image.webp image.jpg 可逆圧縮 WebP エンコード 可逆圧縮の WebP は、なるべく高品質でエンコードするように設定しましょう。そのためには、品質係数「100(最大)」、圧縮方式「6(最遅)」の組み合わせか、圧縮レベル「9(最遅)」か、どちらかを指定するのがオススメです。なお、不可逆圧縮と可逆圧縮のどちらに変換する場合であっても、同じコマンドを使用します。エンコーダーは、不可逆圧縮がデフォルト動作のため、可逆圧縮で出力するには「lossless」オプションの設定が必要です。 cwebp -lossless -q 100 -m 6 -progress -o lossless_image.webp image.png アニメーション WebP 変換 GIF（アニメーション含む）形式の画像を WebP 形式に変換できます。ただし、ユーティリティツールでは、APNG 形式から WebP 形式に変換する方法を提供していませんので留意が必要です。 gif2webp -q 100 -o animation_image.webp image.gif おわりに ウェブサイトの画像を WebP 形式にすると、レンダリングに関する性能が向上します。実際に、当ブログも PageSpeed Insight のパフォーマンススコアが20点ほど向上しました。このように、エンコードする小さな労力だけで、大きなリターンを得られることが明白です。最初にやるべき価値のある改善であることは疑いようもありません。ウェブサイトのパフォーマンス改善で何から手をつけようか迷っている方は、本記事のように画像を変換するところから始めると良いでしょう。 ちなみに、PageSpeed Insight で次世代フォーマットとして AVIF 形式も挙げられています。WebP 形式を選んだ理由は、WebP の方が AVIF よりも対応しているブラウザが多く、公式ウェブサイトが整備されているからです。 参考文献 WebP 公式ホームページ Windowsの環境パスを通す(path) 南カリフォルニア大学 信号画像処理研究所 画像データベース WebP 画像フォーマットの Web ブラウザ対応状況 AVIF 画像フォーマットの Web ブラウザ対応状況","link":"/articles/convert-image-format-to-webp/"},{"title":"天色＊アイルノーツ 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2013年に発売された「天色＊アイルノーツ Amairo Islenauts」をクリアしたので、作品の評価を感想付きでレビューします。 こちらは、「天色＊アイルノーツ Amairo Islenauts」のレビュー記事です。 本作を始め、ゆずソフト作品のレビューを多数投稿しているので、興味があれば是非ご覧ください。 作品概要 あらすじ 日本がバブル景気に湧いていた頃、ある日突如として上空に現れた浮島『ライゼルグ』。魔石でエネルギー供給を賄い、エルフやセリアンスロープがいるファンタジーな光景が広がっていた。 それから、数十年の時が流れ、今に至る。教鞭を執っていた主人公 鷺ノ森さぎのもり 透とおる は、学生時代の恩師の紹介でその島にある『フェン・シクリッド女学院』に転勤することになった。教え子として、ライゼルグ生まれの真咲まさき ・ガイヤールやシャーリィ・ウォリックを始め、日本から留学してきた天霧あまぎり 夕音ゆね、従妹の白鹿しらが 愛莉あいりと出会う。 今までとは違う不思議な場所の女の子ばかりの学園で、彼の新生活はどうなっていくのか？ 教師と生徒の禁断のラブストーリーが始まる。 登場キャラクター メインヒロイン シャーリィ・ウォリック（CV：北見きたみ 立花りっか、原画：こぶいち） 天霧あまぎり 夕音ゆね（CV：登代田とよた 瀬良せら、原画：むりりん） 白鹿しらが 愛莉あいり（CV：夏野なつの こおり、原画：こぶいち） 真咲まさき・ガイヤール（CV：桐谷きりたに 華はな、原画：むりりん） サブヒロイン ティア・ホーエンヴェルフェン（CV：雪野ゆきの 玉たま、原画：むりりん） 火宮ひのみや 木乃香このか（CV：雪都ゆきと さお梨り、原画：こぶいち） 各種スペック システム ストーリープレイ画面 セーブ・クイックセーブ、ロード・クイックロード、前・次の選択肢へ移動、オート、スキップ、一つ前のセリフに戻る、ウインドウ非表示、音声リピート、システム設定、バックログ エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞 システム設定 画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、ショートカットキー一覧 シナリオ 共通ルート Chapter 1 から Chapter 6 まで（チャプター総数 39） 個別ルート シャーリィルート（チャプター総数 52）、夕音ルート（チャプター総数 63）、愛莉ルート（チャプター総数 53）、真咲ルート（チャプター総数 67）、ティアルート（チャプター総数 26）、木乃香ルート（チャプター総数 26）の六つ。 なお、ティアルートと木乃香ルートは、シャーリィ・夕音・愛莉・真咲のうちいずれか一人以上のエピローグを見終えた場合に、アンロックされる条件あり。 エンディング 各ヒロインルートのエンディング六つとノーマルエンド一つの計七つ。 アフターストーリー 各ヒロインのエピローグまで見終えるごとに、そのヒロインのアフターストーリーがアンロックされる（シャーリィ・夕音・愛莉・真咲・ティア・木乃香で1話ずつ）。 ムービー曲 オープニング 「Blue-Love Chime」 歌：nao エンディング 全ルート共通ですが、メインヒロインルートでは各ヒロインのソロパートありバージョンが流れます。 「天色」 歌：あまいろ＊カルテット（北見 立花・登代田 瀬良・夏野 こおり・桐谷 華） メインヒロイン評論 シャーリィ・ウォリック オススメ度：★★★☆☆ 性格や人柄 透が担任となるクラスの生徒であり、ライゼルグ生まれで行政トップである議会代表の兄を持つ。 「うりしゃり」名義で同人活動も行っており、その界隈では一角の人物。加えて、スランプの時に書いた絵がコンクールで入賞したというエピソードを持つ指折りの実力者でもある。 明朗快活な性格に、成績優秀で生活態度も問題ない。しかし、同人誌に良いネタを見つけると、ひとり妄想劇場を垂れ流すという悪癖の持ち主であるため、人を選ぶことは間違いない。とはいえ、共通ルートと個別ルートで彼女の気質が異なり、個別ルートで悪癖が出なくなるため、食わず嫌いせずに攻略してみると良いだろう。 個別ルートの感想 個別ルートは、彷徨人に関する話や、透のフェン・シクリッド女学院への転勤理由など、本作の重要な部分の情報を知れる。しかしながら、これらを彼女のルートで語る必要があったかについては、疑問を呈したい。なぜならば、彼女で無くても成立するからだ。ヒロインたるには、ストーリーを成立させる条件にならなければいけない。これはライターの力不足という要因が大きい。しかし、彼女はとても可愛いので、その点に関しては問題はない。だからこそ、勿体ないなと余計に感じてしまうのだろう。 メインヒロインの風格を醸し出すシャーリィさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 天霧 夕音 オススメ度：★★★★☆ 性格や人柄 透が担任となるクラスの生徒であり、日本からの留学生。 本人曰く、あまり裕福でない家庭で、幼い頃より家事を手伝っていたため、家事全般が得意。 ライゼルグへの留学を決意することになったとある出来事によって、誰かに必要とされることで自分の存在意義を見出したい、と思い詰めている。 そのため、留学してからは、お世話をするご主人様を探すことで、心の拠り所を作ろうとしていた。 面倒見が良く、物腰が柔らかくて所作が綺麗で上品でありながらも、透に対しては、泣き落とししたりからかったりと茶目っ気も見せており、小悪魔な大和撫子である。 個別ルートの感想 個別ルートは、透と出会ったことで逃げてきた過去の自分自身と向き合い、成長して乗り越えていくストーリーが丁寧に描写される。また、ストーリーの質が良いだけではなく、彼女自身も可愛く、各イベントシーンの変態度も高いため、どれをとっても非常に満足できる出来に仕上がっている。 見どころが多い彼女のイベントシーンの中から、ひとつだけおすすめを選ぶとしたら、おでん屋で透にあーんをしてたまごを食べさせるシーンであろう。このシーンには、彼女の魅力が詰め込まれている。本作における至高のシーンといって過言ではない。 上品さと小悪魔感を兼ね備えた夕音ちゃん © YUZUSOFT / JUNOS INC. All Rights Reserved. 白鹿 愛莉 オススメ度：★★★☆☆ 性格や人柄 透が担任となるクラスの生徒であり、日本からの留学生で彼の従妹。 引っ込み思案の恥ずかしがり屋で、他人とコミュニケーションを取ることが苦手なうえ、勢い任せで生きているため、周囲が驚くような突拍子もない行動をすることがある。 口調を初め内面の子供っぽさや幼児体型であることを気にしており、改善しようと考えている。 幼少期から留学先で出会うまで長らく面識の無かった透に対して、素直になれずそっけない言葉や態度を取ってしまい、スマートフォン経由でしか気持ちを伝えられないほどで、彼女はコミュ障型ツンデレとも言えよう。 個別ルートの感想 個別ルートは、留学で目標を見失った彼女がやりたいことを見つけて、精神的に成長して素直になる様子が描かれる。 ストーリーの質は、夕音ルートに次いで高い。しかし、彼女がツンデレであることでデレるまでの尺が多く取られる都合上、他ヒロインと比べて可愛さや変態度は抑え気味である。そのため、火力は全体的に不足している。裏を返せば、控え目な甘さということになので、激甘が好きではない方には刺さるであろう。そんな意地っ張りな彼女が、素直になるシーンはとても感慨深い。是非ともエピローグが終わるまで見て欲しいヒロインである。 愛莉ちゃんがようやくデレてくれました © YUZUSOFT / JUNOS INC. All Rights Reserved. 真咲・ガイヤール オススメ度：★★★★☆ 性格や人柄 透が担任となるクラスの生徒で、ライゼルグ生まれのセリアンスロープ。 彼が下宿先にしている『牙と爪の獣亭』は、彼女の父親が実家で営んでいる酒場兼宿屋であり、彼女はいつも手伝いをしており、酒場の看板娘となっている。ドーナツが大好きな美食家で、明るく気さくでフレンドリーな態度に、勉強が苦手こともあってか、天真爛漫な性格に初めは見えるだろう。しかし、堅忍不抜で老成した気質も持ち合わせている。 彼女は、メインヒロインの中で最も癖が少なく、正統派の可愛さを持っているため、誰から攻略するか困っている場合は、一人目におすすめしたい。 個別ルートの感想 個別ルートは、セリアンスロープの生態に関する話題を中心に展開され、何かの問題を透や彼女が解決するわけでもなく、彼女自身の成長が描かれるわけでもないため、ストーリーの中身は無いに等しい。ただし、キャラゲーとして見た時の完成度はとても高く、彼女の可愛さだけでエピローグまで完走することは充分に可能である。 彼女が、透に普通に告白しても振られるだけだと思い、想像の斜め上にぶっ飛んだ発言を放ったシーンは、印象に残る。このシーンは、マニアックな性癖を刺激する発言であろうから、グッとくる紳士淑女もいるだろう。 美少女にお願いされて拒否できる人はいるのか？ © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 78点（良/B+ランク） キャラゲーとして評価するなら、ヒロインの可愛さに関しては文句の付け所がなく、高得点。 ただし、ビジュアルノベルとしてであれば、ギリギリ及第点と言った感じで、いまひとつな作品である。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 6/10点 構成 6/10点 演出 6/10点 合計 18/30点 グラフィック クオリティ 9/10点 ボリューム 8/10点 合計 17/20点 キャラクター 作り込み 9/10点 ボイス 10/10点 合計 19/20点 プレイ環境 音楽 9/10点 動画 8/10点 システム 7/10点 合計 24/30点 コメント シナリオ いくつかの要因によって、ストーリーの完成度は非常に低い。 主人公の配役を教師にしたのは間違いであっただろう。いずれのメインヒロインの個別ルートにおいても、教師が生徒に手を出す形になる倫理的な問題は避けられず、説得力や落とし所を作るために、余計な尺を消費しているように見えた。また、アナザービューを多く使っていることで、ダラダラになりがちでヒロインサイドを想像する余地がなく、読み進めるうえで時折膨満感があった。そのうえ、「ライゼルグ」という設定をほぼ活かせていないこともダメ押しの一手になってしまった。 グラフィック 本作も変わらず、むりりん先生・こぶいち先生のCGとこもわた遙華先生のSDは、文句なしのクオリティである。しかし、ヒロインによってCGとSDの配分に偏りがあるのはよろしくない。特に、夕音はSDよりCGが多く、シャーリィはCGよりSDが多くといった感じであった。 キャラクター 変態度の高いヒロインが好きな人にはがっちりとハマる。ただし、個性が強烈すぎて癖が強すぎるため、客観的に見れば、作り込みがうまく出来たとは言い難い。 各ヒロインについての詳しい評論は、前述のメインヒロイン総評をご覧いただきたい。 音楽・動画・システム OP「Blue-Love Chime」はとても良い曲であり、ED「天色」はとても可愛い曲である。ただし、ヒロインごとにED曲が用意されている次回作以降をプレイしていることもあってか、全ヒロインが同じED曲というのは面白みがなかった。 作品購入リンク レビューを見て本作が気になったら、DMM から購入してプレイしてみてください。 本作は、全年齢版がないため、Steam での配信はありません。 DMM R18版 天色＊アイルノーツ「鷺ノ森透」は悩んでいた。大学を卒業し、教師として就職したものの、このまま教師を続けていくべきかどうか、を。そんな迷いを持つ彼に、ある日一つの誘いが舞い込む。それは青天の霹靂...","link":"/articles/review-amairo-islenauts/"},{"title":"GitHub PagesのHexo製ブログ記事のURLを差し替える","text":"GitHub Pages+Hexo.js のブログで、Google 検索エンジンにインデックス登録済みされた投稿記事を新しい URL に差し替える方法を、備忘録も兼ねて紹介します。 はじめに 存在意義 この記事を読み終わった後に、GitHub Pages+Hexo.js のブログで、投稿済み記事を新しい URL に差し替えられるようになっていること。 推したい読者様 Google 検索エンジンにインデックス登録した後に、投稿記事の URL を変えるために _config.yml の permalink 設定値を変更したけれども、それからどうすれば良いか分からない、という人。 前提条件 Hexo.js v6.x 以降をジェネレータ―とするブログを、GitHub Pages 上でホスティングしている。 Google 検索エンジン対応 投稿記事の URL が、Google 検索エンジンのインデックスに登録済みであれば、URL が変わったことを伝えなければいけません。その方法として、新しい URL へリダイレクトするようにします。 リダイレクト方法 Google 検索エンジンは、リダイレクトを、永続的か、一時的か、厳密に認識します。 これらは、検索結果で表示する URL の取り扱い方法が異なります。 一時的なリダイレクトであれば、検索結果はそのままで、永続的なリダイレクトであれば、検索結果を新しい URL に置き換えます。 この記事の要件では、記事の URL を置き換えたいので、永続的な方法を採用する必要があります。 永続的なリダイレクトの種類 永続的なリダイレクトは、サーバーサイドでもクライアントサイドでも、どちらでも実現できます。 とはいえ、GitHub Pages でホスティングしている場合、サーバーサイドでのリダイレクト設定を、ユーザーが行うことは一切できません（ただし、Trailing Slash が必要なページ URL の末尾にスラッシュなしでアクセスした時のみ、301 リダイレクトが発動します）。 そして、クライアントサイドのリダイレクト方法のうち、JavaScript locationは、Google から推奨されていないため、使える方法は、実質的に HTML meta refresh (0 sec)の一択となります。 方法 説明 GitHub Pages で使えるか？ HTTP 301 Moved Permanently HTTP リダイレクト △（特定条件下のみ利用可） HTTP 308 Permanent Redirect HTTP リダイレクト × HTML meta refresh (0 sec) HTML リダイレクト ○ JavaScript location JavaScript リダイレクト △（Google 非推奨） HTML meta refresh http-equiv 属性の値を refresh とする meta タグを head タグに含めることで、ブラウザでページが読み込まれた時にリダイレクトさせられます。 このとき、meta タグの content 属性の値は、待機秒数（※整数で単位は不要）; url=リダイレクト先のURLの書式で記述します。 ブラウザは、0秒指定の時はすぐにリダイレクトを行い、1秒以上を指定した時はその秒数分待ってからリダイレクトを行います。 Google 検索エンジンにとっては、0秒指定のものを永続的なリダイレクト、1秒以上のものを一時的なリダイレクトとして扱います。 https://www.mozilla.org へ即時リダイレクト&lt;!doctype html&gt; &lt;html lang=&quot;ja&quot;&gt; &lt;head&gt; &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://www.mozilla.org&quot; /&gt; &lt;title&gt;Example title&lt;/title&gt; &lt;/head&gt; &lt;!-- ... 省略 ... --&gt; &lt;/html&gt; Hexo で差し替える方法 Hexo の初期状態では、投稿済み記事の URL を差し替える機能がありません。 そのため、HTML meta refreshをさせるには、次の2種類のどちらかで対応します。 テーマテンプレートの改造 プラグインの導入 テーマテンプレートの改造は、難易度が高い割に、リダイレクト元となるソースファイルも自分で用意する必要があり、コストパフォーマンスが非常に悪いです。 そのため、本記事では、とても簡単にできるプラグイン導入で対応する手順を紹介します。 プラグイン導入で対応 (1) プラグインのインストール hexo-generator-aliasプラグインの最新版をインストールします。 terminalnpm install hexo-generator-alias (2) Front Matter に追加 新 URL にリダイレクトさせたい記事の Front Matter に、旧 URL を記述（パス部分のみでOK）した alias を追加します。 下記の場合は、旧 URL のパス/2023/11/08/riddle-joker-review/から、新 URL へ、リダイレクトさせる設定となります。 Front Matter に設定する alias については、下記の2点に注意してください。 _config.yml の permalink 設定値のパターンと一致しないように記述してください。 値として記載する旧 URL は、&quot;.html&quot;で終わるように記述しなければいけません。 FrontMatter の記述例--- title: RIDDLE JOKER 感想＆評価 レビュー alias: 2023/11/08/riddle-joker-review/index.html --- (3) 動作確認 Hexo サーバーを起動します。 terminalnpm run server サーバー起動後に、ブラウザでリダイレクトの確認をします。 例えば、手順(2)の記事の動作確認をする場合は、ブラウザのアドレスバーを http://localhost:4000/2023/11/08/riddle-joker-review/ に変更して開きます。 表示確認において下記の2点を留意してご利用ください。 ローカル環境のドメインは、Hexo.js の設定により異なる可能性があります。 表示確認時のリダイレクト先は、GitHub Pages でホスティングしているページです。変更後のページが存在しない場合、404 エラーとなります。 プラグインの別の使い方 下記の使い方は、投稿済み記事(post)やドラフト記事(draft)で設定した場合、Home 等の記事一覧画面を読み込むとリダイレクトが発生して正常表示できません。 (1) 別の記事やページへリダイレクト 既に存在する記事やページへリダイレクトするように設定できます。 主たる利用目的は、特定のページから別の記事やページへ、リダイレクトさせることでしょう。 FrontMatter の記述例--- title: RIDDLE JOKER 感想＆評価 レビュー redirect: /article/riddle-joker-review/ --- (2) 外部サイトへリダイレクト 外部サイトへのリダイレクトも可能です。用途はなさそうですが、できますので紹介しておきます。 FrontMatter の記述例--- title: Example title redirect: https://www.mozilla.org --- おわりに ちなみに、Search Console で、インデックスから古い URL を削除した後に、新しい URL で新規にインデックス登録することもできます。 ただし、この方法だと、Search Console の削除履歴に残ることと、完全削除はできず期限が切れたら検索結果に復活することなど、色々と不都合があります。 そのため、本記事で紹介した方法でアプローチする方が、SEO の側面からもコストの側面からも優位性は十分にあります。 「検索にヒットしていれば、こんなに苦労することなかったのに」と思ってまとめた記事ですので、みなさんのお役に立てれば幸いです。 参考文献 リダイレクト hexojs/hexo-generator-alias リダイレクトと Google 検索 HTTP レスポンスステータスコード HTTP 301 Moved Permanently HTTP 308 Permanent Redirect HTML 仕様 meta 要素の http-equiv","link":"/articles/redirect-to-new-article-in-hexo-blog/"},{"title":"美少女ゲームで理解する！？民法における結婚のルール","text":"みなさん、ちゃろー☆ 日本国の民法（親族法）の結婚に関するルールを、美少女ゲームに登場するキャラクターを例に挙げて、分かりやすくまとめてみました。 はじめに 美少女ゲームをプレイしていると、血のつながりのない他人同士で結婚というよりも、養子であったり再婚の連れ子だったりと、そういう関係で結婚を仄めかしているものが少なくありません。 そこで、日本国民法ではそれらがどう扱われるのかが気になった、つまり、実際に結婚が許されるのかを知りたかったので、調べることにしました。 本記事では、いきなり本題に入ると良く分からない単語が出てくるかと思いますので、最初に頻出用語の簡単な説明を挟んでから本題とさせていただきます。 本題に行く前に まずは、本題のために知っておくべき用語として、血族・姻族・親族・親等を理解していた方が良いので、このセクションで簡単な説明をします。 血族と姻族 血族とは 血族（けつぞく）は、自身と血縁関係がある人々のことを指します。例えば、父母・祖父母・兄弟姉妹などです。これは、生物学上と法律上の二種類の血縁関係から成ります。 まず、生物学上の血縁関係がある人々を、自然血族と言います。ただし、婚姻関係にない男女の間に生まれた子ども（非嫡出子）の場合、父側血族とするためには父の認知が必要です（民法第779条）。 一方で、法律上の血縁関係がある人々を、法定血族と言います。現行民法では、養子縁組によって生じた血族関係だけが対象です（民法第727条）。 姻族とは 姻族（いんぞく）は、自身と婚姻関係にある配偶者の血族と、自身の血族の配偶者（ただし、自身の配偶者は含みません）を指します。例えば、夫から見た妻の父母や、妻から見た夫の姉妹、自身の兄弟の配偶者などが挙げられます。 姻族は、離婚によってのみ終了し（民法第728条）、寡婦・寡夫となった場合は、姻族関係を終了させる意志を表示（姻族関係終了届を提出）しない限り継続します（同条第2項）。 親族と親等 親族とは 親族（しんぞく）は、自身や配偶者を始め、血族または姻族による関係がある人々をまとめた呼び方です。血族と姻族は、際限なくどこまでも親族に含めるというわけではなく、血族は六親等まで、姻族は三親等までになります（民法第725条）。 親等とは 親等（しんとう）は、親子関係の数を表す単位である「世数」を用いて、親族における関係性の遠近を表すものです。 直系親族か傍系親族かで、親等の数え方が異なり、直系の場合は、世数を単純に数え（民法第726条）、傍系の場合は、祖先を遡ってから他の一人に下るまでの世数を数えます（同条第2項）。 例えば、両親は直系親族であるので一親等となり、同じく直系の祖父母は二親等、傍系親族となる兄弟姉妹は二親等で、伯叔父母ならば三親等となります。 親等は、近親者間の婚姻の禁止（民法第734条）を始め、扶養義務者（民法第877条第2項）や、直系尊属及び兄弟姉妹の相続権（民法第889条）などの規定に用いられています。 概略図 前述した血族・姻族・親族・親等を、続柄を用いて分かりやすく図示しました。 図中の血族・姻族は、親族の範囲より一親等分多く（血族は七親等、姻族は四親等）記載しています。また、姻族で続柄が未記載のものは血族の配偶者を、続柄の左側の数値は親等を表します。 結婚できる相手とできない相手 さて、これまでの説明で、血族・姻族・親族・親等を理解していただけましたか。 ここからがこの記事の本題です。民法において、結婚できる相手と結婚できない相手を、美少女ゲームに登場するキャラクターを例に挙げながら解説します。 結婚できる相手 (1) 他人 直系血族並びに直系姻族でもなく、傍系血族の三親等内でもなく、法定血族でもない、他人と言える者同士は、何ら問題なく結婚可能です。 例えば、「喫茶ステラと死神の蝶」の主人公「高嶺 昂晴」とメインヒロイン「墨染 希」は、希が18歳以上（民法第731条）になれば、婚姻禁止要件に全く該当しないため、結婚できます（民法第740条）。 (2) 従兄弟姉妹 「天色＊アイルノーツ」の主人公「鷺ノ森 透」とメインヒロイン「白鹿 愛莉」は、従兄妹の続柄です。これは透本人から見た時に、愛莉が四親等の傍系血族となる（逆もまた然り）ため、いずれ結婚することが可能です（民法第734条第1項）。 (3) 養子同士 「RIDDLE JOKER」の主人公「在原 暁」とメインヒロイン「在原 七海」は、共に養子で法律上の兄妹です。養子同士は、近親者または直系姻族または養親子等、いずれの婚姻禁止要件にも該当しないため、将来的に結婚できます（民法第740条）。 (4) 実子と養子 養子と養方の傍系血族（養親やその親族のこと。ここでは、養親の実子が該当）は、三親等内の傍系血族間における婚姻禁止の制約を受けずに、結婚できます（民法第734条第1項）。 例えば、「D.C. ～ダ・カーポ～」の主人公「朝倉 純一」とメインヒロイン「朝倉 音夢」は、養子である音夢から見て、純一は養方の傍系血族であるため、18歳以降に問題なく婚姻できます。 なお、ゆずソフトであれば、「天神乱漫」のメインヒロイン「千歳 佐奈」を含めるか悩みましたが、彼女は実方の設定が存在しないため、対象外としました。 (5) 連れ子同士 連れ子同士は、直系血族並びに直系姻族、傍系血族の三親等内ではないため、結婚できます（民法第740条）。また、再婚時に相手方の親と養子縁組した場合も、養子同士の婚姻と同じ取り扱いとなります。 例えば、「ましろ色シンフォニー」の主人公「瓜生 新吾」とメインヒロイン「瓜生 桜乃」は、お互いが再婚した親の連れ子であり、これに該当します（※養子縁組がされているかは不明）。 結婚できない相手 (1) 実子同士 実子同士は、直系血族間であり、近親者間の婚姻となるため、結婚できません（民法第734条第1項）。 例えば、「千恋＊万花」のサブヒロイン「鞍馬 小春」とその兄「鞍馬 廉太郎」は、実子の兄妹同士であるため、これに該当します。 (2) 養親と養子 養親と養子は、法定血族間であり、養親子等の間での婚姻となるため、結婚できません（民法第736条）。 他にも、養親は、養子の配偶者・養子の直系卑属・養子の直系卑属の配偶者と婚姻できませんし、養子は、養親の直系尊属とも婚姻できません（同条）。 そして、この禁止要件は、養子縁組を解消して親族関係が終了した後でも、継続適用されます（同条）。 例えば、「RIDDLE JOKER」のメインヒロイン「在原 七海」とその養父である「在原 隆之介」は、これに該当します。 (3) 義父母 義父母などの直系姻族に当たる相手とは、婚姻禁止要件に該当するため、結婚できません（民法第735条）。これは、姻族関係が終了した場合でも、継続適用されます（同条）。 例えば、自身の弟の配偶者は義妹となりますが、これは婚姻禁止要件に該当します。すなわち、一時期の美少女ゲーム界隈で隆盛を極めた義妹にも、結婚できない義妹が存在するというわけです。 しかしながら、弟の配偶者が存在する状態で始まる美少女ゲームなど見たことがないので、あの界隈では結婚できる義妹しか存在しえないとも言えます。 おわりに こうしてみると、きっちり法令順守して美少女ゲームが作られているのだと分かります。中には怪しいのもありますが、婚姻や結婚は仄めかしてないので、セーフなのでしょう。 また、ゆずソフトには、実子と養子の組み合わせや、再婚の連れ子の組み合わせになるヒロインが居ないというのも学びの一つとなりました。 文章だらけの法律は頭の中に定着しにくいので、本記事のような感じで具体例があると覚えやすくて良いのではないでしょうか。 参考文献 法律関連 親族 - Wikipedia 続柄 - Wikipedia 民法（明治二十九年法律第八十九号）| e-Gov法令検索 親戚（ひ孫から先）の名称・呼び方を知りたい | レファレンス協同データベース 美少女ゲーム関連 天色＊アイルノーツ 千恋＊万花 RIDDLE JOKER 喫茶ステラと死神の蝶 ましろ色シンフォニー D.C. ～ダ・カーポ～","link":"/articles/learn-marriage-in-the-civil-code/"},{"title":"Go 1.23で導入されたイテレータを使いこなそう","text":"Go 1.22 で実験的機能のイテレータが、Go 1.23 で本格的に利用可能となりました。 イテレータの導入に至った背景と、それが齎す恩恵について解説します。 なぜ導入されたのか かつての Go には、データ反復処理を実装するための標準的な方法が存在しませんでした。 そのため、標準ライブラリ（bufio.Scanner.Scan、bufio.Reader.ReadByte、bytes.Buffer.ReadByte、database/sql.Rowsなど）を始め、数多のモジュールで、反復処理に対する様々なアプローチがそれぞれ個別に採用された結果、利用者側に不都合が生じるようになりました。 すなわち、本質的に同じ処理でも、ライブラリやモジュールの仕様に合わせて実装する必要があり、それらの使い方を習得するコストが、利用者に対して要求されるのです。 イテレータは、その不都合な問題を解決するために Go 1.23 で導入されました。 不都合な問題が分かる例 では、イテレータがなければ、どのような不都合があるのか、分かりやすい例を一つ示します。 下記のサンプルコードは、任意のデータ列から、1行ずつ読み取ってその内容を出力するイテレーションを、最終行まで繰り返す反復処理です。 サンプルコードの完全版は、「The Go Playground」にあります。 func main() { titles := []string{ &quot;天色＊アイルノーツ&quot;, &quot;サノバウィッチ&quot;, &quot;千恋＊万花&quot;, &quot;RIDDLE JOKER&quot;, } buf := bytes.NewBufferString(strings.Join(titles, &quot;\\n&quot;)) for { line, err := buf.ReadString('\\n') if err != nil { if !errors.Is(err, io.EOF) { panic(err) } if len(line) == 0 { break } } fmt.Printf(&quot;%v\\n&quot;, strings.TrimSuffix(line, &quot;\\n&quot;)) } } このサンプルコードは極端な例ですが、反復処理の中で、本処理のデータ出力が一行であることに対して、それ以外の事前処理や事後処理がほぼ全体を占めます。 また、bytes.Buffer.ReadStringの替わりにbufio.Reader.ReadLineを使おうとした場合は、前述の通り仕様が異なるため、適合するように書き換える必要があります。 Go に慣れるとこれらの事実に対して何も感じないかもしれませんが、初心者だった頃を思い出してください。「反復処理を同じように書けないのは何故」や「終端エラー処理を写経のように毎回書くのが面倒」などと、一度くらいは脳裏を過ったことがあるはずです。 さて、イテレータがないと、どのような不都合があるか、認識していただけましたでしょうか。 次のセクションでは、イテレータが導入されたことで何が変わったのかを解説します。 何が変更されたのか イテレータを導入するために、反復処理に Range over function 機能を実装しました。 これにより、ライブラリやモジュールで固有となるデータ操作処理をイテレータの内部に分離でき、それらの利用者はイテレーションの本処理に注力できる状態になります。 Range over function Range over function とは、0個から2個までの引数を持ち bool 型の戻り値を返す「yield 関数（イテレータ）」を、for-range のループ処理の対象として指定できる機能です。 以下の3種類の関数が、Range over function に利用できる yield 関数とみなされます。 func(yield func() bool) func(yield func(V) bool) func(yield func(K, V) bool) そして、これらの中で引数を1つ以上持つイテレータには、それぞれ固有の型が定義されました。 具体的には、func(yield func(V) bool)にiter.Seq[V any]が、func(yield func(K, V) bool)にiter.Seq2[K, V any]が割り当てられています。 現状で使いどころが不明なfunc(yield func() bool)を除き、他のイテレータについては、実例をみていきましょう。 (1) func(yield func(V) bool) 不都合な問題が分かる例のサンプルコードを、イテレータを用いて書き換えたものが下記となります。 サンプルコードの完全版は、「The Go Playground」にあります。 -- main.go -- func main() { titles := []string{ &quot;天色＊アイルノーツ&quot;, &quot;サノバウィッチ&quot;, &quot;千恋＊万花&quot;, &quot;RIDDLE JOKER&quot;, } buf := bytes.NewBufferString(strings.Join(titles, &quot;\\n&quot;)) for line := range buf.ReadLines() { fmt.Printf(&quot;%v\\n&quot;, line) } } -- bytes/buffer.go -- func (b *Buffer) ReadLines() iter.Seq[string] { return func(yield func(string) bool) { for { line, err := b.ReadString('\\n') if err != nil { if !errors.Is(err, io.EOF) { panic(err) } if len(line) == 0 { return } } yield(strings.TrimSuffix(line, &quot;\\n&quot;)) } } } bytes.Buffer.ReadString に関する処理がbytes/buffer.goに分離され、利用者側main.goからは隠蔽できていることが分かりますでしょうか。 bytes パッケージは、標準ライブラリなのでイテレータ対応関数が将来的に用意されるでしょうけれども、bytes.Buffer.ReadString関数は、ユースケースによって不都合が生じるため、自前でカスタムイテレータを用意する方が便利かもしれません。 (2) func(yield func(K, V) bool) イテレータ対応版に書き換えた (1) のコードを、func(yield func(K, V) bool)バージョンへさらに書き換えたものが、下記になります。 サンプルコードの完全版は、「The Go Playground」にあります。 -- main.go -- func main() { titles := []string{ &quot;天色＊アイルノーツ&quot;, &quot;サノバウィッチ&quot;, &quot;千恋＊万花&quot;, &quot;RIDDLE JOKER&quot;, } buf := bytes.NewBufferString(strings.Join(titles, &quot;\\n&quot;)) for line, err := range buf.ReadLines() { if err != nil { fmt.Printf(&quot;%v\\n&quot;, err) break } fmt.Printf(&quot;%v\\n&quot;, line) } } -- bytes/buffer.go -- func (b *Buffer) ReadLines() iter.Seq2[string, error] { return func(yield func(string, error) bool) { for { line, err := b.ReadString('\\n') switch { case err != nil &amp;&amp; !errors.Is(err, io.EOF) &amp;&amp; !yield(&quot;&quot;, err): return case len(line) == 0: return case !yield(strings.TrimSuffix(line, &quot;\\n&quot;), nil): return } } } } (1) と比較して、イテレータ側でエラーが発生した時に panic を起こさず、ユーザー側で詳細を取得できるようになっていますので、より実用的になっています。 また、for-range において順序非保証である map と同様の構造をとりつつも、こちらは順序保証の slice であるのも強みです。 ちなみに、ユーザー側ループ処理で break した場合は、yield 関数の戻り値が false になります。そうなった場合は、イテレータが処理を続行できなくなる仕様です。 したがって、イテレータ側で yield 関数の戻り値をチェックし、false であれば制御を戻すように記載する必要がありますので、忘れないようにしてください。 おわりに Go 1.23 で、イテレータが正式に導入されました。 今後は、ライブラリやモジュールの提供者が、イテレータに順次準拠していくことが想定されます。 この状況は、利用者としては、データ反復処理が簡単に書けるようになるので、嬉しい限りです。 まとめ イテレータとは何か？ Go では、0個から2個までの引数を持ち、bool 型の戻り値を返す3種類の yield 関数を指す。 イテレータが導入された理由は？ データ反復処理の標準的な方法が存在せず、ライブラリやモジュールの提供者が好き勝手に実装した結果、利用者の習得コストが大きく跳ね上がった不都合を解消するため。 イテレータで解決したことは何か？ Range over function によってデータ反復処理が標準化され、ライブラリやモジュール固有の処理を隠蔽できるようになり、利用者が本処理に注力できるようになった。 参考文献 Go 言語公式サイト Go 1.23 Release Notes - The Go Programming Language Range Over Function Types - The Go Programming Language","link":"/articles/describe-introducing-iteration-in-go-1-23/"},{"title":"グロービスMBAマネジメント・ブック 第一部要約 前編","text":"近頃、グロービスMBAマネジメント・ブックを理解する必要があり、何度も読み直すのは効率が悪いため、内容を要約しました。この記事は、第一部前編となります。 ギャップを埋める経営戦略 明確な経営戦略を打ち出すことは、勝ち組の企業になるための条件の１つである。企業が保有する経営資源には限りがあり、選択と集中について考えなければいけないからである。 経営戦略を策定することで、どのような強みを磨いていくか明らかになり、企業活動を支える内外関係者の共感を得たり、従業員の能力を十分に引き出したりすることが可能となる。 経営理念とビジョン まず、経営理念は、企業の存在意義や使命を普遍的な形で表した基本的価値観であり、時代の流れを超えた長期的な視点で、社会と従業員に関する考えを語ったものである。 次に、ビジョンは、その経営理念で規定された経営姿勢や存在意義に基づき、自社が目指す中期的なイメージを、投資家や従業員、社会全体に向けて示したものである。 経営戦略 経営戦略は、経営理念及びビジョンと、企業の現実の姿との間にあるギャップを埋めるための具体的な方法論を示すものであり、全社戦略、事業戦略、機能戦略の３つの戦略レベルから成る。 全社戦略で考えること 全社戦略は、戦う土俵（ドメイン）を決め、他社よりも優位に立てる能力（コア・コンピタンス）を発揮し、維持するためのヒト・モノ・カネなどの配分（資源配分）を考える必要がある。 ドメイン ドメインは、組織活動の指針となるものであり、企業の方向性を示すうえで非常に重要である。これを決定するということは、「戦う場所」を決めるだけではなく、「戦わない場所」を明らかにすることでもある。それは、次の２つの方法で決める。 (1) 製品軸から定義する方法 自社の持つ製品の優位性や特徴などを最も効果的に発揮できる領域を選んで、事業展開を図る。 (2) 市場軸から定義する方法 同じような性格を持つ顧客をひとくくりにして、その顧客層をターゲットとした事業を選択する。 コア・コンピタンス コア・コンピタンスは、「顧客に対して、他社には真似のできない自社ならではの価値を提供する、企業の中核的な力」と定義される。 見極めるための要素 これを見極めるためには、模倣可能性、移転可能性、代替可能性、希少性、耐久性の５つの要素について考える必要がある。一般に、競争優位は、他社が簡単に真似することや保有することが難しくて代替品も少なく、手に入りにくい上耐久性に優れていると、持続しやすくなると言われる。 どの要素が有効かは市場環境や競争環境によって異なり、競争優位を築けたとしても市場環境変化により陳腐化する恐れがあるため、継続的投資やコア・コンピタンスの再定義、新しい能力の育成などの努力が欠かせない。 資源配分 複数の事業を持つ企業の場合は、個々の事業の成否だけではなく、全社的な視点で適正な資源配分を考えなければいけない。適正な資源配分を行うためには、まず各事業の現状を明らかにしたうえで、事業目的の設定や投資方法の決定を行う必要がある。また、どのような事業を組み合わせるとよいかという判断も重要である。 外部資源の利用 不足している経営資源や能力は、社内育成以外に、他企業を買収して取り込む方法や、アライアンスやアウトソーシングなどのように外部資源を用いて補完する方法がある。 経営スピードや高効率性が求められる競争環境においては、自社に必要な機能や能力を十分に見極めることと、以下のメリットとデメリットを考慮しながら外部資源の有効利用を考えることが重要である。 メリット コスト削減効果、自社で行うよりも高い付加価値が享受できる デメリット 情報流出リスク、社内にノウハウが蓄積されない 事業の捉え方と考え方 事業ライフライクル 事業ライフサイクルは、「ある製品や市場は必ず誕生から衰退までの流れを持ち、その段階に応じてとるべき戦略は異なる」とする考え方であり、それを４段階に分けて事業をとらえる。 (1) 導入期 世の中の流れやニーズに即応したアイディアを持ち、それを事業化するノウハウが求められる。 (2) 成長期 競合他社の参入が増える。他社との差別化や、事業拡大に応じてマネジメントノウハウの改良が必要。 (3) 成熟期 競争上の優位性を築けなければ敗者。業界構造が固定化され少数企業が大部分のシェアを獲得し、低価格大量販売の戦略をとる。 (4) 衰退期 新規投資不要のため一部のリーダー企業は利益を出せるが、収益安定継続のために効率性追及が不可欠。他企業は、撤退か新たな価値創造を求められる。 事業ポートフォリオ 事業ポートフォリオは、様々な事業機会と自社の経営資源のバランスをとりながら、事業の選択や組み合わせを考えていく方法である。検討するに当たって、少なくとも３つの視点で考えると良い。 これを考えるためのフレームワークとして、次の2つがある。 PPM（プロダクト・ポートフォリオ・マネジメント）モデル ビジネス・スクリーン どちらが優れているかではなく、両社の利点と限界を理解しながら、目的に応じて使い分けること。 (1) PPM モデル 「PPM（プロダクト・ポートフォリオ・マネジメント）モデル」は、BCG（ボストン・コンサルティング・グループ）が考案した。 これは、前述の「事業の魅力度」と「競争上の優位性」の評価を単純化したもので、「事業ライフサイクル」と「経験曲線」の考え方をベースにして、「市場成長率」と「相対マーケットシェア」という２軸でマトリクスをつくり、事業を次の４つの事象に類別する。 しかし、市場成長が鈍化しても市場が衰退せずに再活性化することや、低いシェアでもプラスキャッシュフローや利益を生んでいることもあるため、PPMはシンプルで分かりやすいがそういったことに気を付けなければならない。 (2) ビジネス・スクリーン 「ビジネス・スクリーン」は、GE（ゼネラル・エレクトリック）とマッキンゼー（マッキンゼー・アンド・カンパニー）が考案した。 これは、各事業を「事業地位」と「業界の魅力度」の２軸で３段階評価し、９個の象限で３つずつ色分けしたマトリクス上に位置付ける。 ３段階評価で分類が精密になり、撤退や資金回収について性急な結論に達する恐れが少なくなるメリットがあるが、指標の主観的な取り方に加えて内部データを多用していることから他社との比較が困難というデメリットがある。 成長ベクトルの選択 事業拡大マトリクス 事業の拡大は、それまでに築いた資産や既存事業での成功体験の上に次の事業を展開するほうが、成長の確率が高くなる。これを概念的に示したのが、アンゾフが提唱した「事業拡大マトリクス（製品・市場マトリクス）」である。 このマトリクスは、事業拡大を「製品軸」と「市場軸」で捉える。企業の事業拡大は、既存事業の市場浸透から始まり、成長が難しくなると、下記のように、右（新製品）、下（新市場）、 右下（新製品・新市場）の３種類の方向へ拡大する。 多角化において、既存事業との関連性は、市場と製品が新しければ低くなり、流通や技術などの共通性があれば高くなる。これらの共通性を反映して、アーカー教授は、アンゾフのマトリクスに第３の軸を加えている。 多角化のメリットとジレンマ 多角化は、流通チャネルや技術、製造、人材、ブランド、ノウハウ、管理などに関して、コスト面や付加価値面でのシナジーが得られ、企業全体として収益源が複数になることで、リスク分散の効果が期待できるメリットを持っている。 一方で、次のような４つのジレンマが存在する。 将来にわたり成長が見込まれる魅力度の高い分野を選ぶ企業が多く、競争が激化しがちである。 自社の経営資源をすぐに有効活用できる分野を新規事業に選ぶと、結果的に既存事業での競争関係がそのまま持ち込まれてしまい、優位性構築ができない恐れがある。 新規事業を成功させるために本業とは違う行動様式や企業文化が必要な場合、既存のものが事業展開の障害となる。 多角化を重ねることで自社の事業ドメインが曖昧になって本業を見失い、企業の求心力が弱まったり、経営資源の分散化によってどの分野でも優位性を保てなくなる。 しかしながら、多角化を諦めて現状維持すると、既存事業の成熟化と共に企業自体が衰退していく恐れがあり、成長と持続的競争優位を確立するためには、これらのジレンマを理解した上で可能な限り解決する努力が求められる。","link":"/articles/summarize-globis-mba-management-book-part1-vol1/"},{"title":"山手線駅の乗換路線で終点まで長距離の終電は何駅発？","text":"山手線の各駅から乗り換えられる路線で、終着駅まで長距離を走行する終電が発車する駅を、机上調査してランキング形式にまとめました。 この記事は、2024年10月時点の各路線の時刻表に基づき作成されています。2025年以降のダイヤ改正で、ランキングの結果が変わる可能性があることを予めご了承ください。 はじめに 社会人生活において、残業や飲み会などと切っても切れないものがあります。それは、終電です。 最寄り駅までの距離が遠ければ、自ずと終電が早くなりますから、何らかの手段で朝まで粘って帰るか、後ろ髪を引かれながら早めに帰るか、どちらか二択を迫られるわけです。 では、何の路線のどこの駅なら遠い距離でも終電で帰れるのか、と私は気になりました。ならば調べてみよう。と思い立ったが吉日。この記事は、そうやって生まれたのです。 ランキングのルール 対象となる路線の列車 次の4つの条件を全て満たす路線の列車を対象とみなします。 平日の時刻表の時刻に発車する列車 鉄道事業法準拠（普通鉄道・モノレール・案内軌条式鉄道など）の鉄道路線を走る列車 うち、山手線と新幹線各路線を除く うち、全車有料特急列車と全車有料着席列車は対象路線の列車から除く 山手線車内の案内表示装置や自動案内放送で乗換扱いとみなされる路線 山手線駅を終点する列車を全て除外した中から最後に発車する列車 対象となる路線について次項で表にまとめますので、対象とならないものをそれぞれ例に挙げると、路線は、大塚駅の都電荒川線（条件2を満たさない）や、新宿駅の西武新宿線（条件3を満たさない）があり、列車は、京浜東北線の田町駅で最終列車となる上野行（条件4を満たさない）などがあります。 対象の山手線乗換路線 集計対象となる山手線各駅の乗換路線は、下表の通りです。なお、鶯谷駅・大塚駅・目白駅・新大久保駅・高輪ゲートウェイ駅は、条件を満たす乗換路線がないため、表に含まれません。 さらに、乗換路線を走行する列車のうち、サンライズ瀬戸・THライナー・スカイライナー・ちちぶ・S-Train・はこね等の全車有料特急列車及び全車有料着席列車は、除外とします。 駅No 駅名 路線名 JY01 東京駅 東海道線、横須賀線、総武線快速、京葉線、常磐線、東京メトロ丸ノ内線 JY02 神田駅 中央線、東京メトロ銀座線 JY03 秋葉原駅 総武線各駅停車、つくばエクスプレス線、東京メトロ日比谷線 JY04 御徒町駅 都営大江戸線 JY05 上野駅 宇都宮線（東北線）、高崎線、常磐線、上野東京ライン、東京メトロ銀座線、東京メトロ日比谷線 JY07 日暮里駅 常磐線、京成線、日暮里・舎人ライナー JY08 西日暮里駅 日暮里・舎人ライナー、東京メトロ千代田線 JY09 田端駅 京浜東北線 JY10 駒込駅 東京メトロ南北線 JY11 巣鴨駅 都営三田線 JY13 池袋駅 湘南新宿ライン、埼京線、東武東上線、西武池袋線、東京メトロ丸ノ内線、東京メトロ有楽町線、東京メトロ副都心線 JY15 高田馬場駅 西武新宿線、東京メトロ東西線 JY17 新宿駅 中央線、中央線各駅停車、湘南新宿ライン、埼京線、小田急線、京王線、東京メトロ丸ノ内線、都営新宿線、都営大江戸線 JY18 代々木駅 中央線各駅停車、都営大江戸線 JY19 原宿駅 東京メトロ千代田線、東京メトロ副都心線 JY20 渋谷駅 湘南新宿ライン、埼京線、東急東横線、東急田園都市線、京王井の頭線、東京メトロ銀座線、東京メトロ半蔵門線、東京メトロ副都心線 JY21 恵比寿駅 湘南新宿ライン、埼京線、東京メトロ日比谷線 JY22 目黒駅 東急目黒線、東京メトロ南北線、都営三田線 JY23 五反田駅 東急池上線、都営浅草線 JY24 大崎駅 湘南新宿ライン、埼京線、相鉄線直通、りんかい線 JY25 品川駅 東海道線、横須賀線、京急線 JY27 田町駅 京浜東北線 JY28 浜松町駅 東京モノレール羽田空港線、都営大江戸線 JY29 新橋駅 東京メトロ銀座線、都営浅草線、ゆりかもめ JY30 有楽町駅 東京メトロ有楽町線、東京メトロ日比谷線 長距離終点の終電発車駅 TOP5 各駅の最終電車データをまとめると、とても興味深い結果が出ました。 長距離終点の終電発車駅でランク付けすると、都心周辺にある東部の駅が優位で、副都心（池袋・新宿・渋谷）周辺にある西部の駅は軒並み劣位でした。 一方で、終電の発車時刻が遅い駅でランク付けすると、副都心周辺の西部側駅が優勢で、都心周辺の東部側駅は劣勢と、真逆の関係にあります。 閑話休題。それでは、第五位から第一位までの駅と最終列車を順番に見ていきましょう。また、寝過ごした場合に深夜チェックインできるホテルも併せて紹介します。 第五位 第五位は、秋葉原駅。当駅の最終列車は、0:34に発車するJR総武線各駅停車の中野行です。秋葉原駅から中野駅までの営業キロは13.0kmで、五番目に長く走ります。 終点の中野駅まで行った場合は、南口より徒歩2分の「LUANAホテルin中野」（ただし、超高額）、同じく徒歩10分の「ビジネスホテル クレセント」があります。 第四位 第四位は、日暮里駅。当駅の最終列車は、この駅を0:36に発車するJR常磐線快速の松戸行です。日暮里駅から松戸駅までの営業キロは15.7kmで、四番目に遠くまで行きます。 終点の松戸駅まで寝過ごした場合は、東口から徒歩3分で「東横INN松戸駅東口」に行けます（周辺にもホテルは数軒ありますが、深夜チェックインできるか不明）。 第三位 第三位は、上野駅。当駅の最終列車は、0:33に発車するJR常磐線快速の松戸行で、第四位と同じ列車です。上野駅から松戸駅までの営業キロは17.9kmで、三番目の距離になります。 こちらも第四位と同じく、「東横INN松戸駅東口」があります。 第二位 第二位は、駒込駅。当駅の最終列車は、0:28に発車する東京メトロ南北線（埼玉高速鉄道線直通）の浦和美園行です。駒込駅から浦和美園駅までの営業キロは20.9kmで、二番目の長距離走行です。 終点の浦和美園駅まで寝落ちした場合でも、東口から徒歩3分の「東横INN浦和美園駅東口」があります。ただし、駅周辺のホテルはここだけなので、繁忙期には寝過ごさないよう気を付けましょう。 第一位 第一位は、東京駅。当駅の最終列車は、0:24に発車するJR京葉線の新習志野行です。東京駅から新習志野駅までの営業キロは28.3kmで、他の追随を許さない距離を走破します。 終点の新習志野駅まで乗り通した場合、駅周辺にホテルが二軒あり、南口から徒歩2分で「天然温泉 湯～ねる」に、同じく徒歩6分で「トーセイホテル＆セミナー幕張」に行けます。 おわりに 長距離終点の終電発車駅のランキングは、いかがでしたか。 なるべく遠くに住みながらも終電までに帰宅したいのなら、JR京葉線の八丁堀-新習志野間、東京メトロ南北線・埼玉高速鉄道線の西ヶ原-浦和美園間、JR常磐線快速の三河島-松戸間、JR中央線各駅停車の御茶ノ水-中野間の沿線住みが、最良でしょう。 参考文献 乗換路線の時刻表 時刻表 - ジョルダン 終電検索 - 駅探 深夜チェックインのホテル検索 【楽天トラベル】24時からの予約 今夜の宿-じゃらんnet","link":"/articles/research-last-train-on-yamanote-line-stations/"},{"title":"サノバウィッチ 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ ゆずソフトより2015年に発売された「サノバウィッチ SABBAT OF THE WITCH」の全ルート詳細攻略ガイドを掲載します。 こちらは、「サノバウィッチ SABBAT OF THE WITCH」の攻略記事です。 他にも、ゆずソフトの他作品の攻略ガイド記事もありますので、そちらも是非ご覧ください。 おすすめ攻略順 因幡いなば めぐる、仮屋かりや 和奏わかな、戸隠とがくし 憧子とうこ、椎葉しいば 紬つむぎ、綾地あやち 寧々ねねの順で攻略を推奨する。 このうち、戸隠 憧子、椎葉 紬、因幡 めぐる、仮屋 和奏（※二人目以降に攻略可）の四人は、プレイヤーの好みの順番で攻略して構わない。 ただし、綾地 寧々は、内容が濃くエンディングまで多くの時間を要することに加え、本作の根幹となるストーリーであるため、最後に攻略するべきであろう。 ルート分岐データ 本セクションを始め、以降の「共通ルート詳細データ」と「個別ルート詳細データ」に記載のシーン名は、説明の便宜上名付けた非公式のものであるため、取り扱いにご注意ください。 分岐確定条件 下表の条件を満せば、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 なお、誰か一人のエピローグを見終わっている状態で、因幡 めぐる以外のルートに分岐したい場合は、仮屋 和奏の分岐条件を満たしてはいけない。 そのためには、「喫茶店の初来店時に彼女の制服姿を二回褒めない」、「映画の予定変更後にみんなで移動する」、「喫茶店に再来店時に彼女とじゃれあわない」のいずれかをやっておこう。 名前 条件 綾地 寧々 人気者になる方法の見本を頼み、困りごとは正直に言い、二回手を握って貰ってからコスプレコンテストの投票先に選ぶ。 因幡 めぐる 人気者になる方法の練習を続け、映画の予定を悩んだ後で恋人のフリをしてから一人称を受け入れて、コスプレコンテストの投票先に選ぶ。 椎葉 紬 勉強会中に諦めて気分を変え、コスプレコンテストの投票先を回答しない。 戸隠 憧子 勉強会で教えてもらい、コスプレ姿を褒めてからコンテストの投票先に選ぶ。 仮屋 和奏 (1) 寧々・めぐる・紬・憧子のうちだれか一人のエピローグを見終える。 (2) 喫茶店の制服を正直に褒め、映画の予定を変更した後にひとりで空腹を解消し、喫茶店に再び行った時にじゃれてみる。 要約フローチャート 本作は、寧々及び和奏、または、めぐるを軸として、紬と憧子の二人を加えた二種類の攻略フローチャートを作ることが可能。 その組み合わせは様々あるが、最高効率に近しいであろうものを掲載する。 ストーリーの仕様上、最低でも二人は同じ内容を見ることになるので、それについては留意して欲しい。 前述のおすすめ攻略順に従う場合は、下記の順番でフローチャートを進めること。 ちなみに、図中の赤太字の記載（例：セーブ01）がある選択肢は、ルート分岐おける重要なチェックポイントである。 該当のシーンに到達したらセーブを忘れない、を意識しながらプレイしよう。 Aグループのめぐるルートをクリア セーブ01「人気者になる方法」をロードし、Bグループの和奏ルートをクリア セーブ03「誰に投票する？」をロードし、憧子ルートをクリア セーブ02「古典の勉強は？」をロードし、紬ルートをクリア セーブ04「上映時間はどうする？」をロードし、寧々ルートをクリア Aグループ（憧子・紬・めぐる） Bグループ（和奏・紬・寧々） 共通ルート詳細データ Chapter 1 選択肢なし Chapter 2 和奏の制服姿が… 選択肢 前提条件 結果 もう１回正直に褒める なし 和奏の評価+1、和奏ルートフラグ=ON しつこいからもういいか なし なし 人気者になる方法 【重要】寧々か、めぐるか、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 綾地さんに頼む なし 寧々の評価+1、寧々ルートフラグ=ON このまま因幡さんと続ける なし めぐるの評価+1、めぐるルートフラグ=ON Chapter 3 映画を見る予定は？ 選択肢 前提条件 結果 ……悩む なし 「恋人のフリをする？」発生 時間を変更する なし 「上映時間までどうする？」発生 恋人のフリをする？ 選択肢 前提条件 結果 いや、普通に映画に集中 「映画を見る予定は？」で「……悩む」を選択 なし ……これもリハーサル めぐるの評価+1 上映時間までどうする？ 「空腹を解消したい」を選択した時、アフターストーリーのプレイアブル人数によって、和奏の評価が上がるかどうか決まる。 選択肢 前提条件 結果 このままみんなで移動 「映画を見る予定は？」で「時間を変更する」を選択 なし 空腹を解消したい 「映画を見る予定は？」で「時間を変更する」を選択AND Afterプレイアブル人数&gt;0 和奏の評価+1 「映画を見る予定は？」で「時間を変更する」を選択AND Afterプレイアブル人数=0 なし 一人称が名前は変？ 選択肢 前提条件 結果 かもね なし なし 別に なし めぐるの評価+1 仮屋に会いに… 選択肢 前提条件 結果 ちょっとじゃれてみる なし 和奏の評価+1 普通に言う なし なし 何か困りごとは？ 選択肢 前提条件 結果 誤魔化す なし なし 正直に言う なし 寧々の評価+1 Chapter 4 古典の勉強は？ 【重要】紬か、憧子か、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 諦めて気分を変える なし 紬の評価+1、紬ルートフラグ=ON いい機会だから教えてもらう なし 憧子の評価+1、憧子ルートフラグ=ON 明けても暮れてもベースばかり 「今日は個人練習で」シーン（Chapter 4-5へ切り替え）であれば、ここで和奏ルートへ分岐する。 和奏ルートは、条件を満たすと優先的に分岐するため、寧々・紬・憧子を攻略対象にしている時は、評価（好感度）の管理を気を付けなければならない。 後続シーン 前提条件 備考 今日は個人練習で 和奏ルートフラグ=ON AND 和奏の評価=3 和奏ルート分岐 中間考査の結果は 上記以外 なし 手を… 選択肢 前提条件 結果 もう一度握ってもらう なし 寧々の評価+1 さすがにそんなことは言えない なし なし コスプレは似合ってる？ 選択肢 前提条件 結果 褒める なし 憧子の評価+1 目をそらす なし なし 誰に投票する？ 選択肢 前提条件 結果 因幡さん、かな なし めぐるの評価+1 綾地さんがいいかな なし 寧々の評価+1 やっぱり……戸隠先輩？ なし 憧子の評価+1 今はバンドの事で頭がいっぱい なし 紬の評価+1 舞台でバンド演奏 複数のメインヒロインで分岐条件を同時に満たすことはできないため、優先度はない。 後続シーン 前提条件 備考 似た者同士 寧々ルートフラグ=ON AND 寧々の評価=4 寧々ルート分岐 記念撮影 めぐるルートフラグ=ON AND めぐるの評価=4 めぐるルート分岐 遊び人？ 紬ルートフラグ=ON AND 紬の評価=2 紬ルート分岐 ご褒美の約束 憧子ルートフラグ=ON AND 憧子の評価=3 憧子ルート分岐 決意表明 それ以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面に AFTER と EXTRA のモードが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの AFTER と EXTRA のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、EXTRA の立ち絵鑑賞機能が解禁となる。 寧々・紬・憧子・和奏 寧々・紬・憧子・和奏ルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、バックログのシーンセレクト等の機能を使用して、全ての選択肢を選ぼう。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておくこと。 寧々ルート Chapter 5-8 Chapter 6-2 Chapter 7-2 RESTART Chapter 2-3 RESTART Chapter 2-9 RESTART Chapter 2-9 続き RESTART Chapter 3-6 RESTART Chapter 3-6 続き 紬ルート Chapter 7-2 Chapter 7-6 Chapter 7-6 続き Chapter 8-3 Chapter 8-3 続き 憧子ルート Chapter 6-6 Chapter 7-4 和奏ルート Chapter 6-3 Chapter 6-7 めぐる めぐるルートは、攻略途中で選択肢によって眼鏡ありと眼鏡なしの CG 差分が発生するため、詳細データを別途掲載する。 他ヒロインルートと同じく、セーブ＆ロード、選択肢ジャンプ、バックログのシーンセレクト等の機能を駆使することで、CG を全回収できる。 もちろん「Hシーン選択肢固定」機能のこともお忘れなきよう。 Chapter 9-2 以外 Chapter 8-8 Chapter 9-5 Chapter 9-5 続き Chapter 9-2 眼鏡が外れちゃう 選択肢 前提条件 結果 外れたままでいい なし 眼鏡フラグ=OFF それだけは絶対着けて なし 眼鏡フラグ=ON もう我慢できない 選択肢 前提条件 結果 このまま口に出す 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 今日は顔にかけたい 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG もう我慢できない 続き 選択肢 前提条件 結果 抜くなんてあり得ない 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 急いで抜けば耐えきれるかも 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG もう我慢できない 続き2 選択肢 前提条件 結果 最後まで中に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 寸前で外に 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。","link":"/articles/guide-sabbat-of-the-witch/"},{"title":"GitHub Actionsでプルリクエストを作成する方法","text":"GitHub Actions のワークフローを用いて、プルリクエスト作成工程を自動化する方法をまとめました。 はじめに 記事の存在意義 この記事を読み終わった後に、GitHub Actions のワークフローを経由で、プルリクエストを作成できるようになっていること。 記事を推したい読者様 任意のユースケースにおけるプルリクエストを作成する工程を、GitHub Actions を用いて自動化しようとしている人。 汎用的な作成方法 テストパス時やビルド・デプロイ完了時にプルリクエストを作成したり、追加でコミットをプッシュさせてからプルリクエストを作成したりなど、様々なユースケースに対応できる汎用的な方法です。 これは、万能 Action であるactions/github-scriptを用いる方法と、GitHub CLI のコマンドを用いる方法の二つがあります。 万能 Action を使う actions/github-scriptは、GitHub でやりたいことをほぼ何でもできる万能 Action です。ゆえに、これを使えば大抵のユースケースに対応できます。しかし、それを実現するためのある程度の知識や技能が要求されることが唯一の難点です。 実装例 ブランチへのコミットプッシュ、または、プルリクエストの何らかのイベントで、プルリクエストを作成する実装例です。 なお、actions/github-scriptでプルリクエストを作成する場合、base や head のパラメータに指定する値は、ブランチの名前でなければいけません。 よって、値が refs から始まるgithub.refを使うことはできず、push イベントはgithub.ref_nameを、pull_request イベントはgithub.event.pull_request.head.ref（github.head_refでも可）を使う必要があります。 そのため、実装例ではgithub.event_nameに合わせて、プルリクエストの head となるブランチの名前の取得方法を変えています。イベントを固定できる場合は、実装例のようにする必要はありませんので、留意してください。 actions/github-script を用いる方法jobs: raise_pull_request: runs-on: ubuntu-latest permissions: pull-requests: write contents: read steps: - name: Get a pull request head ref id: pull_request_head run: | case &quot;${{ github.event_name }}&quot; in &quot;pull_request&quot;) echo &quot;ref=${{ github.event.pull_request.head.ref }}&quot; &gt;&gt; GITHUB_OUTPUT ;; &quot;push&quot;) echo &quot;ref=${{ github.ref_name }}&quot; &gt;&gt; $GITHUB_OUTPUT ;; *) exit 1 ;; esac - name: Create a pull request uses: actions/github-script@v7 with: github-token: ${{ secrets.GITHUB_TOKEN }} script: | const headRef = '${{ steps.pull_request_head.outputs.ref }}' const createParams = { owner: context.repo.owner, repo: context.repo.repo, base: 'main', head: headRef, title: `${headRef.substring(0,1).toUpperCase()}${headRef.substring(1)}` } const { data } = await github.rest.pulls.create(createParams) return data パラメータ解説 github.rest.pulls.createで、使用頻度の高いパラメータの一覧は、以下の通りです。 名前 必須か？ 説明 owner はい レポジトリのアカウント所有者。大文字と小文字は区別されません。 repo .git拡張子なしのレポジトリ名。大文字と小文字は区別されません。 head 変更が実装されるブランチ名。 base 変更を取り込むブランチ名。 title 作成するプルリクエストの題名。 body いいえ プルリクエストの内容。 draft プルリクエストがドラフトであるか。 コマンドだけで実現する 外部 Action の使用制限があって、actions/github-scriptを使えない場合は、GitHub CLI のコマンドを用いる方法で解決します。積極的に利用する方法ではありませんが、覚えておくとどこかで役に立つかもしれません。 実装例 こちらも、ブランチへのコミットプッシュ、または、プルリクエストの何らかのイベントで、プルリクエストを作成する実装例です。github.refに関する注意事項は同じですので、詳細は前セクションをご覧ください。 GitHub CLI のコマンドを用いる方法jobs: raise_pull_request: runs-on: ubuntu-latest permissions: pull-requests: write contents: read steps: - name: Get a pull request head ref id: pull_request_head run: | case &quot;${{ github.event_name }}&quot; in &quot;pull_request&quot;) echo &quot;ref=${{ github.event.pull_request.head.ref }}&quot; &gt;&gt; GITHUB_OUTPUT ;; &quot;push&quot;) echo &quot;ref=${{ github.ref_name }}&quot; &gt;&gt; $GITHUB_OUTPUT ;; *) exit 1 ;; esac - name: Checkout branch uses: actions/checkout@v4 with: ref: ${{ steps.pull_request_head.outputs.ref }} - name: Create a pull request env: GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} run: | gh pr create -B main -t &quot;Pull request title&quot; -a &quot;${{ github.actor }}&quot; 特定の場合の作成方法 Actions 上で、新規または既存のブランチに対して、ファイル追加・編集・削除などのコミットをプッシュしてから、プルリクエストを作成するユースケースの場合、actions/github-scriptではなく、peter-evans/create-pull-requestを用いることで、より簡単に実現できます。 ただし、peter-evans/create-pull-requestは、上述のユースケース以外で用いようとしても、上手く動かないことに注意が必要です。 実装例 汎用的な方法と同じく、ブランチへのコミットプッシュ、または、プルリクエストの何らかのイベントで、プルリクエストを作成する実装例です。github.refに関する注意事項は同じですので、詳細は前セクションをご覧ください。 peter-evans/create-pull-requestは、変更があるファイルが存在すれば、コミットをプッシュしてプルリクエストを作成するまでを一つのステップで実行できます。しかし、一つのコミットにすべての変更をまとめたくない場合は、含めたくない変更だけを git コマンドでコミットしておく必要があります。 peter-evans/create-pull-request を用いる方法jobs: raise_pull_request: runs-on: ubuntu-latest permissions: pull-requests: write contents: write steps: - name: Get a pull request head ref id: pull_request_head run: | case &quot;${{ github.event_name }}&quot; in &quot;pull_request&quot;) echo &quot;ref=${{ github.event.pull_request.head.ref }}&quot; &gt;&gt; GITHUB_OUTPUT ;; &quot;push&quot;) echo &quot;ref=${{ github.ref_name }}&quot; &gt;&gt; $GITHUB_OUTPUT ;; *) exit 1 ;; esac - name: Checkout branch uses: actions/checkout@v4 with: ref: ${{ steps.pull_request_head.outputs.ref }} - name: Make changes to pull request run: date +%s &gt; report.txt - name: Create a pull request uses: peter-evans/create-pull-request@v6 with: base: 'main' branch: ${{ steps.pull_request_head.outputs.ref }} commit-message: Update report パラメータ解説 peter-evans/create-pull-requestで、使用頻度の高いパラメータの一覧は、以下の通りです。 名前 説明 branch 変更が実装されるブランチ名。 base 変更を取り込むブランチ名。 title 作成するプルリクエストの題名。 body プルリクエストの内容。 draft プルリクエストがドラフトであるか。デフォルトはfalse。 labels コンマまたは改行で区切られたラベルリスト。 assignees コンマまたは改行で区切られた担当者リスト。 reviewers コンマまたは改行で区切られたレビュワーリスト。 milestone プルリクエストに関連付けるマイルストーンの番号。 commit-message 変更をコミットする時に使用するメッセージ。 committer コミッタの名前とメールアドレス。デフォルトはGitHub Actions Bot。 おわりに GitHub Actions でプルリクエストを作成する方法をいくつかまとめました。 ユースケースやご自身の環境に合わせて、この記事でご紹介した方法をご活用いただければ幸いです。 参考文献 GitHub Marketplace GitHub Script · Actions · GitHub Marketplace Create Pull Request · Actions · GitHub Marketplace Checkout · Actions · GitHub Marketplace GitHub actions/github-script peter-evans/create-pull-request actions/checkout","link":"/articles/create-pull-request-by-github-actions/"},{"title":"千恋＊万花 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ ゆずソフトより2016年に発売された「千恋＊万花（せんれんばんか）」の全ルート詳細攻略ガイドを掲載します。 こちらは、「千恋＊万花」の攻略記事です。 他にも、ゆずソフトの他作品の攻略ガイド記事もありますので、そちらも是非ご覧ください。 おすすめ攻略順 朝武ともたけ 芳乃よしの、馬庭まにわ 芦花ろか、鞍馬くらま 小春こはる、常陸ひたち 茉子まこ、ムラサメ、レナ・リヒテナウアーの順を推奨する。 他作品と異なり、本作については、原則として上述の順番以外をオススメできない。 だたし、小春と芦花の前後の順番と、ムラサメとレナの前後の順番は、入れ替えても構わない。レナに関しては、本作のグランドエンディングになるため、ネタバレが嫌いな場合は、最後に残しておこう。 ルート分岐データ 分岐確定条件 下表の条件を満せば、他の選択肢の選択内容に関わらず、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 名前 条件 朝武 芳乃 山でのリフレッシュに釣りを選び、自分で彼女に釣りを教えて、心配で眠れない彼女を安心させる。 常陸 茉子 穂織か都会かの問いに穂織を選び、山でのリフレッシュに山菜集めを選ぶ。 ムラサメ 山でのリフレッシュに単独行動を選び、欠片を見つけたお礼として頭を撫でる。 レナ・リヒテナウアー 着替えの感想で可愛いと答え、山でのリフレッシュに釣りを選び、芳乃に釣りを教えるのを廉太郎に任せる。 鞍馬 小春＆馬庭 芦花 (1) 芳乃・茉子・ムラサメ・レナのうちだれか一人のエピローグを見終える。 (2) 芦花に見惚れていたことを正直に言い、小春の料理を信じる。 要約フローチャート 本作は、芳乃・レナ・小春・芦花、または茉子・ムラサメで、二種類の攻略フローチャートが作れる。 その組み合わせは様々あるが、最高効率に近しいであろうものを掲載する。 前述のおすすめ攻略順に従う場合は、下記の順番でフローチャートを進めること。 図中の青太字記載（例：セーブ01）の選択肢は、ルート分岐における重要チェックポイントである。 該当のシーンに到達したらセーブを忘れない、を意識しながらプレイしよう。 Aグループの芳乃ルートをクリア セーブ03「不安げな朝武さんに……」をロードし、小春＆芦花ルートをクリア セーブ01「どうする？」をロードし、Bグループの茉子ルートをクリア セーブ01「どうする？」をロードし、ムラサメルートをクリア セーブ02「廉太郎に任せる？」をロードし、レナルートをクリア Aグループ（小春・芦花・レナ・芳乃） Bグループ（ムラサメ・茉子） 共通ルート詳細データ Chapter 1 芦花に見惚れて… 選択肢 前提条件 結果 正直に言う なし 芦花の評価+1、小春＆芦花ルートフラグ=ON 誤魔化す なし なし Chapter 2 ココと都会とどっち？ 選択肢 前提条件 結果 都会の方かな なし なし どうだろ？ なし 茉子の評価+1、茉子ルートフラグ=ON Chapter 3 変ではありませんか？ 選択肢 前提条件 結果 可愛いと思う なし レナの評価+1、レナルートフラグ=ON 変じゃないよ なし なし どうする？ 【重要】茉子か、ムラサメか、その二人以外かを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 釣り なし 「廉太郎に任せる？」発生 山菜 なし 茉子の評価+1 単独行動 なし ムラサメの評価+1、ムラサメルートフラグ=ON 廉太郎に任せる？ 【重要】芳乃か、レナか、どちらを選ぶかを問われる。選ばなかった方は、攻略対象から外れる。 選択肢 前提条件 結果 やっぱダメ 「どうする？」で「釣り」を選択 芳乃の評価+1、芳乃ルートフラグ=ON そういうことなら…… レナの評価+1 ムラサメへのお礼 選択肢 前提条件 結果 言葉でお礼を言う なし なし 頭を撫でてあげる ムラサメルートフラグ=ON ムラサメの評価+1 ムラサメルートフラグ=OFF なし 小春の料理は… 選択肢 前提条件 結果 ちょっと心配だ…… なし なし 小春の言葉を信じる なし 小春の評価+1 欠片集め 後続シーン 前提条件 備考 茉子と猫 茉子ルートフラグ=ON なし 2人でお祓い 上記以外 なし 不安げな朝武さんに… 選択肢 前提条件 結果 朝武さんを安心させる なし 芳乃の評価+1 変なことは言わない方がいいか なし なし 眠れない芳乃 後続シーン 前提条件 備考 イザナウ レナルートフラグ=ON AND レナの評価=2 レナルート分岐 山の中へ 上記以外 なし 最後の一つは？ 後続シーン 前提条件 備考 芳乃と語らい 芳乃ルートフラグ=ON AND 芳乃の評価=2 芳乃ルート分岐 茉子との語らい 茉子ルートフラグ=ON AND 茉子の評価=2 茉子ルート分岐 これからについて 上記以外 なし これからについて 各個別ルートへの分岐優先度は、ムラサメ＞小春＆芦花の順である。 後続シーン 前提条件 備考 再始動 ムラサメルートフラグ=ON AND ムラサメの評価=2 ムラサメルート分岐 新たな日々 Afterプレイアブル人数&gt;0 AND小春＆芦花ルートフラグ=ON AND小春＆芦花の評価=2 小春＆芦花ルート分岐 俺たちの戦いは以下略 上記以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面に AFTER と EXTRA のモードが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの AFTER と EXTRA のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、EXTRA の立ち絵鑑賞機能が解禁となる。 芳乃・茉子・ムラサメ・レナ 芳乃・茉子・ムラサメ・レナルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、フローチャートのシーンジャンプ等の機能を使用して、全ての選択肢を選ぼう。 なお、芳乃の CG 回収に関しては、ストーリー攻略では終わらず、回想モードの全シーンごとに獣耳ありを選ぶことで達成できることを留意したい。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておこう。 芳乃ルート Chapter 6-2「ついに２人は……」 Chapter 7-2「芳乃とお風呂で」 Chapter 7-2「お風呂の続き」 Chapter 7-3「芳乃の夜這い」 Chapter 7-3「夜這いの続き」（選択肢二つあり） 茉子ルート Chapter 6-5「ついに茉子と」 Chapter 7-1「茉子とイチャイチャ」 Epilogue「忍者服の茉子と」 Epilogue「忍者服の続き」 ムラサメルート Chapter 5-4「ムラサメちゃんの願い」 Chapter 6-4「２度目の初体験」 Chapter 6-4「２度目の初体験続き」 Chapter 8-5「夜の神社で」 レナルート Chapter 6-2「レナと初体験」 Chapter 6-2「初体験続き」 Chapter 7-1「お風呂で」 Chapter 8-1「夕暮れの教室で」 Chapter 8-1「教室で続き」 小春・芦花 小春・芦花は、個別ルート内でさらに分岐があるため、詳細データを掲載する。その選択肢以降は、分岐は発生しないので、選択肢があるチャプターだけをリストにまとめた。 見たい笑顔は…… 選択肢 前提条件 結果 小春の笑顔 小春＆芦花ルート分岐 小春ルートフラグ=ON 芦花姉の笑顔 小春＆芦花ルート分岐 芦花ルートフラグ=ON 決断の時 後続シーン 前提条件 備考 やっぱり小春が 小春ルートフラグ=ON 小春ルート分岐 やっぱり芦花姉が 芦花ルートフラグ=ON 芦花ルート分岐 小春ルート Chapter 8-2「小春とお勉強」 Chapter 8-2「お勉強続き」 Chapter 8-4「気持ちを教える」 芦花ルート Chapter 8-1「裸を見せて」 Chapter 8-1「裸続き」 Chapter 8-2「リフレッシュ」 アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。 ここでは、芳乃のみタイツ破れ有無の CG 差分が発生するため、詳細データを別途掲載する。 芳乃 アフターストーリー 芳乃のタイツで…… 選択肢 前提条件 結果 破くしかない！ なし タイツ破れフラグ=ON 破くなんて愛がない！ なし タイツ破れフラグ=OFF タイツの続き 選択肢 前提条件 結果 このまま奥深くで搾り取られる タイツ破れフラグ=ON タイツ破れありCG タイツ破れフラグ=OFF タイツ破れなしCG いっそ制服を汚してしまう タイツ破れフラグ=ON タイツ破れありCG タイツ破れフラグ=OFF タイツ破れなしCG","link":"/articles/guide-senren-banka/"},{"title":"グロービスMBAマネジメント・ブック 第一部要約 後編","text":"今回は、先月に引き続いて、グロービスMBAマネジメント・ブックの書籍要約をお届けします。この記事は、その第二弾となる、第一部の後編です。 こちらは、グロービスMBAマネジメント・ブックの書籍要約シリーズの記事です。 前編となる第一部要約記事や、この書籍に関する他の記事もありますので、是非ご覧ください。 戦略策定プロセス 基本的な戦略策定プロセスは、通常の以下のような流れを辿る。必ずしも一方向の流れではなく、仮説・検証を繰り返しながら進んでいく。また、一度策定した戦略がある時点で成功したからといって、それで戦略策定が終わるのではない。経営環境が同じ状態に留まることはないから、環境変化に応じて戦略を見直し、再定義しなくてはならない。 戦略策定に要求される条件 優れた戦略を策定・実施するためには、「合理性と論理性」並びに「創造性と革新性」という２つの異なる条件を満たすことが求められる。 戦略策定では、事実を客観的に観察して論理的に分析、推論と事実の両面から問題の構造に迫り、対応・解決する方策を組み立てる、という場面において、合理性や論理性の発揮が求められる。 一方で、戦略の策定や実施に関わる人々を動かすには、信念や夢、リスクへの挑戦、既存組織風土打破、核心的見方など、人間的な側面に働きかける力が必要になる。 戦略が有効であるためには、合理性や論理性に加え、創造性や革新性なども体現しなければならない。 競争優位を築くための戦略 事業戦略や競争戦略の策定では、他社に対していかに競争優位を築くかが焦点となる。 ポーター教授は、競争優位の構築には、「コスト・リーダーシップ戦略」、「差別化戦略」、「集中戦略」の３つの基本的な戦略パターンがあるとしている。 様々な角度から分析する 経済性 (1) 規模の経済 一般的に企業のコストは、生産量に関わらず一定の固定費と、生産量に比例する変動費に分解できる。 生産量が増えると、単位当たりの変動費は一定であるが、単位当たりの固定費は低下する。このように、事業の規模が大きくなるほど固定費にかかるコスト効率が向上することを「経済の規模（エコノミーズ・オブ・スケール）」と言う。 規模の経済は、固定費だけでなく、変動費にも働いている。これは、開発・生産・調達・マーケティング・営業活動のあらゆる段階で考えられる。 (2) 経験曲線 現時点においてどれだけの生産量があるかという観点が「規模の経済」であるのに対し、現時点までの累積生産量すなわち累積経験値が増えるほどコスト低下に結びつくとする「経験曲線（エクスペリエンス・カーブ）」という考え方がある。 労働者の熟練による生産効率向上、作業標準化及び作業方法改善による生産性向上に加え、あらゆるコスト要素に累積経験が効くと言われる。 (3) 範囲の経済 企業が複数の事業活動を持つことにより、より経済的な事業運営できるようになることを「範囲の経済（エコノミーズ・オブ・スコープ）」と言う。 範囲の経済は、複数事業で経営資源を共有することによるプラスとマイナスの効果を正しく見極める必要があり、事業の選択を誤れば働かないことに注意が必要である。 外部環境 (1) マクロ環境分析 企業を取り巻く外部環境の中で、自社でコントロールできないが、企業活動に影響を与える要因を検証する。分析対象として代表的な項目として、「政治（Politics）」、「経済（Economy）」、「社会（Society）」、「技術（Technology）」があり、これらの頭文字を取って「PEST」と呼ばれる。 (2) 3C分析 マクロ環境よりもさらに個別具体的な分析を行う時のフレームワークとして「3C分析」がある。これは、外部分析に相当する「市場（顧客）（Customer）」と「競合（Competitor）」、内部分析に相当する「自社（Company）」の頭文字を取ったものである。 (3) SWOT分析 外部環境を分析する目的は、市場における「機会（Opportunities）」を探り、自社にとっての「脅威（Threats）」を見つけ出すことにあり、内部環境では自社の「強み（Strengths）」と「弱み（Weaknesses）」を把握することに主眼が置かれる。これら４つの要素を組み合わせたものが「SWOT分析」である。 業界 『５つの力』分析 事業戦略を立てる際のポイントは、企業をその環境との関係で見ることだが、業界の中での競争状態だけを見ていると、構造的側面を見落とすことがある。企業の収益性は業界内での競争力のみで決まるわけではなく、業界そのものの収益性にも影響を受け、業界の収益性は業界構造によって規定される。 このような観点から、業界構造を分析するときに役立つフレームワークが、ポーターの「『５つの力』分析（Five Forces Analysis）」である。５つの力とは、「新規参入の脅威」、「代替品の脅威」、「買い手の交渉力」、「売り手の交渉力」、「業界内の競合他社」を指す。 これらのうちどれが構造を決める重要な要因になるかは、業界によって異なり、分析することによって、業界の収益構造や競争の鍵を発見したり、将来の競争の変化を予測できる。 アドバンテージ・マトリクス 業界の競争要因（戦略変数）の多寡という観点と、それらの競争要因が優位性構築につながる可能性の大小という観点で、事業を４タイプに分けて考える手法が、BCGが考案した「アドバンテージ・マトリクス」である。 競争要因が少ないということは、その手段が少ないことを意味し、勝ち負けが単純に決まるということであり、優位性構築の可能性が大きいということは、その競争要因によって他社に対して明らかな競争優位を獲得できることを意味する。 内部 バリューチェーン 内部分析の目的は、競合と比較したときの自社の強みと弱みを把握することにあり、それによって自社の優位性を生かす方向や克服すべき課題が見えてくる。 その分析に役立つのが、ポーターの「バリューチェーン（価値連鎖）」という考え方で、事業活動を機能ごとに分解し、どの機能で付加価値が生み出されているかを分析することで、事業戦略の構築や改善に役立てようというものである。 この分析では、諸活動を厳密に分類することが目的ではなく、それぞれの活動の役割、コスト、及び全体としての事業戦略への貢献度を明確にすることがポイントである。 コスト・ドライバー 戦略策定には、経済性の裏付けは欠かせず、最適なものにするには、下記のコスト・ドライバーがどのように自社のバリューチェーンに影響を与えるかを定量的に把握することが大切である。 ただし、全ての要素が大きな影響を与えるとは限らないため、状況や分析ニーズに合わせて重要な要素だけに絞り込んで分析するとよい。 戦略を考える上での制約 競争上の地位 同じ業界に属していても、企業が取りうる戦略は競争上の地位によって制約を受ける。コトラー教授は、企業をその地位に応じて、「リーダー」、「チャレンジャー」、「フォロワー」、「ニッチャー」に分類し、それぞれに応じた戦略を取ることが望ましいとしている。 事業ライフサイクル 成熟期から衰退期にかけては、競争が激化して収益性が低下し、市場構成は新規需要から代替需要へと移り、商品知識を身につけた消費者は価格や製品比較に厳しくなることが多い。 技術革新も停滞し、新製品や新用途が現れにくくなり、競争要因がコストやサービスに移る傾向がある。このような状況になったら、企業は環境変化に即して戦略を転換させ、優位性を失った事業からの撤退や新たな事業創造を検討しなくてはならない。 経営戦略トピックス リソース・ベースド・ビュー リソース・ベースド・ビュー（RBV）は、社内資源に目を向け、その有効活用を図るべく戦略を構築しようとする考えである。ここで言うリソースは、生産設備や個々の人材にとどまらず、コア・コンピタンスやケイパビリティ（組織能力）などの目に見えないノウハウやスキルも包含している。 バリューチェーンの再構築 イノベーションの影響で企業活動における付加価値構造が破壊され、新しいビジネスシステムへの作り直されることにより、これまで当然とみなされていた事業の定義やルールが根本的に変わることを、「バリューチェーンの再構築」と呼ぶ。 優位性を失い、収益性の悪化に苦しむような事態を避けるためには、変化を先取りし、新たな戦略を打ち出さなくてはならず、自社の事業がバリューチェーンの再構築の影響を受けるかどうかを把握し、新たな戦略を打ち出さなくてはならない。 そのためのチェックリストとして、BCGは以下の５つの問いかけが有効であるとしている。 バリューチェーン全体の中でコストの割に価値の低い部分はどこか バリューチェーン全体の中で自社事業は顧客とどのような関係にあるか 自社の事業でネットワーク化の影響を受けるのはどこか バリューチェーンが変わることで、現在の戦略的資産のうち重荷となるものはどれか 新しいバリューチェーンではどのような新しい活動・能力が必要となるか また、バリューチェーンの再構築は、新しく競争優位を築くチャンスとしてとらえることも可能である。BCGは、新しいビジネスの創出パターンを以下の４つに分類している。","link":"/articles/summarize-globis-mba-management-book-part1-vol2/"},{"title":"喫茶ステラと死神の蝶 感想＆評価 レビュー","text":"みなさん、ちゃろー☆ ゆずソフトより2019年に発売された「喫茶ステラと死神の蝶（カフェステラ）」をクリアしたので、作品の評価を感想付きでレビューします。 こちらは、「喫茶ステラと死神の蝶（カフェステラ）」のレビュー記事です。 本作を始め、ゆずソフト作品のレビューを多数投稿しているので、興味があれば是非ご覧ください。 作品概要 あらすじ とある日、『一星大学ひとつぼしだいがく』の学生である主人公 高嶺たかみね 昂晴こうせい は、朝起きて半日を過ごしてから、夕方に不慮の事故に遭い命を落とす、リアルな夢を見る。 彼は、夢から覚めた後も、次々と同じ出来事が再現されていくことに恐怖を覚えつつ、その時刻に現場を訪れる。しかし、事故は起こらず、彼は、『死神』の 明月あきづき 栞那かんな と『人語を喋る猫ケット・シー』のミカドに出逢う。 夢は一回目の現実であり、二回目の今も死から逃れられてない、と彼女らから聞いた彼は、それを回避するために死神の仕事を手伝うことになる。それは、四季しき ナツメ の幼少からの夢であった喫茶店カフェを開店させることだった。 これは、大人の階段を登りたい執念深い男が、現実すら捻じ曲げ世界の時を巻き戻して始める、迫りくる死の運命を回避しながら、生きることを紡ぐ恋の物語である。 登場キャラクター メインヒロイン 明月あきづき 栞那かんな（CV：麻倉まくら 亞恋あれん、原画：こぶいち） 四季しき ナツメ（CV：夏和小かなこ、原画：むりりん） 墨染すみぞめ 希のぞみ（CV：上原うえはら あおい、原画：むりりん） 火打谷ひうちだに 愛衣めい（CV：音来内ねらいうち 麗うらら、原画：こぶいち） サブヒロイン 汐山しおやま 涼音すずね（CV：木之きの みき） 各種スペック システム 前作「RIDDLE JOKER」と比較して、本作から導入された新機能は太字で記載している。 本作では、メインヒロインのエピローグ終了時・全ヒロイン攻略達成後・アフターストーリー完全読了後の計6回、タイトル画面のスチルが更新される（解放済みスチルであれば、リストから任意変更可）。 ストーリープレイ画面 セーブ・クイックセーブ、ロード・クイックロード、前のテキストへ移動、前・次のシーンへ移動、前・次の選択肢へ移動、オート、スキップ・バックスキップ、ウインドウ非表示、音声リピート、お気に入りボイス登録、システム設定、バックログ、フローチャート、スクリーンショット保存、タイトル画面へ移動 エクストラモード CG鑑賞、BGM鑑賞、シーン鑑賞、ムービー鑑賞、立ち絵鑑賞、お気に入りボイス鑑賞＋シーン回想 システム設定 簡易設定、画面表示、ゲーム進行、テキスト、サウンド、ダイアログ、マウス、キーボード、ゲームパッド シナリオ 共通ルート PROLOGUE から Chapter 4 まで（チャプター総数 32） 個別ルート 栞那ルート（チャプター総数 20）、ナツメルート（チャプター総数 27）、希ルート（チャプター総数 21）、愛衣ルート（チャプター総数 28）、涼音ルート（チャプター総数 15）の五つ。 なお、涼音ルートは、栞那・ナツメ・希・愛衣のうちいずれか一人以上のエピローグを見終えた場合に、アンロックされる条件あり。 エンディング 全部で七つあり、うち五つは各ヒロインルートのエンディング、残り二つはノーマルエンド一つとバッドエンド一つで構成される。 アフターストーリー 各ヒロインのエピローグまで見終えるごとに、そのヒロインのアフターストーリーがアンロックされる（栞那・ナツメ・希・愛衣・涼音で 1 話ずつ）。 ムービー曲 オープニング 「Smiling-Swinging!!」 歌：米倉千尋 エンディング 栞那ルート 「スイートマリアージュ」 歌：神代あみ(Angel Note) ナツメルート 「@Your Side」 歌：羽生みいな(Angel Note) 希ルート 「ほんとにありがとう」 歌：中山♡マミ(Angel Note) 愛衣ルート 「光」 歌：葉月(Angel Note) 涼音ルート 「Cold&amp;Sweet」 歌：emari+ メインヒロイン評論 明月 栞那 オススメ度：★★★★★ 性格や人柄 百年以上、現世に滞在している死神。 普段は大人びた雰囲気のお姉さんでありながら、たまに子供っぽい茶目っ気も見せる。自分自身を慎み深い乙女だといつも豪語しているが、何かと発想や思考が下ネタ方面に行ってしまうド変態である。 ケット・シーのミカドには、頭の中がオッサン臭い色情淫乱死神娘、ナツメには、処女を拗らせている、と評されている。 機械の操作が苦手なため、スマートフォンのような最新機器は持っておらず、最新の流行にも疎い。 個別ルートの感想 個別ルートは、死神と蝶がどのような存在か、彼女は何者なのか、そういった本作の根幹部分の種明かしがされる、彼女と昂晴が密接に関与するストーリーである。 序盤から中盤にかけて、彼女と昂晴が互いに惹かれあう様子と、楽しい思い出を積み重ねる描写がされながら、二人の間にあった因縁が、昂晴の見る夢という形で少しずつ開示される。中盤で、昂晴と彼女のお付き合いが無事に始まったかと思いきや、まさかの展開が。この時に、面識がないはずの昂晴に対して、彼女が高い信頼を寄せている理由や事情が判明するため、間違いなく涙腺が崩壊するだろう。 もちろん最後は、安心のハッピーエンド。あらゆる観点で高品質なので、是非ご一読願いたい。 全てを知った後で栞那ちゃんのこの台詞は重い © YUZUSOFT / JUNOS INC. All Rights Reserved. 四季 ナツメ オススメ度：★★★★★ 性格や人柄 昂晴と同い年で、一星大学に通う三年生。容姿端麗のためか、告白された回数は数えきれず、その全てを断ってきたことから、孤高の撃墜王として有名。 淡白でつれない発言や態度でクールに見えるが、満面の笑顔が苦手なひねくれ者であるだけで、冗談を言ったり、ドジだったりと、意外と親しみやすいキャラクターである。 また、コーヒー、ゴーヤー、ピーマンなど苦味のある飲食物が苦手で、性的な話題も不慣れなためか初心な反応を見せる、可愛らしいところもある。 個別ルートの感想 個別ルートは、死神が彼女に関与する理由と、カフェ開業に奔走するに至る因果を、ストーリーを介してプレイヤーへ説明する重要なシナリオである。 序盤は、昂晴と仲を深めて積極的になった彼女の、男心を擽るからかいが巧く、グッと来て最高だった。しかし、中盤になると、風向きが変わってシリアスな展開に。彼女は、幼少期に病弱で入退院を繰り返し、生きることへ消極的になっていた。そんな彼女に希望を抱いて貰うために昂晴が行動を起こす。そのため、作中で彼が最も主人公然としていたのではなかろうか。 終盤には、彼女との至高のイチャイチャタイムが待ち受けているので、最後まで美味しく頂ける物語にまとまっていたと言える。 酔った勢いで危ない発言を繰り出すナツメさん © YUZUSOFT / JUNOS INC. All Rights Reserved. 墨染 希 オススメ度：★★★★★ 性格や人柄 昂晴より年下の幼馴染で、白瀧学園に通う高校二年生。 赤磐神社の神職を代々継いできた社家が実家のため、たまに手伝いで巫女をしている。霊感体質で、蝶を見ることはできないが、気配を感じ取ることはできる。 毎日美味しいご飯を作って朝起こしてくれる、甘やかしお姉さん気質。そして、昂晴のふざけた冗談にもノリを合わせる、明朗で優しい性格も兼ね備える。その一方で、独占欲が強く、嫉妬深い一面もある。 個別ルートの感想 個別ルートは、赤磐神社とそこに現れる赤い蝶、そして年末開催の奉納式を軸に、昂晴と彼女が仲を深めながら、物語が進展する。 序盤は、彼女も昂晴も幼馴染の距離感に甘んじていて、友達以上恋人未満の関係性から変わらず、じれったくてやきもきすることも。しかし、彼女が奉納式で舞を披露することになり、一緒にいる時間が増える中盤に差し掛かれば、ニヤニヤできるシーンが多くなり満足感を得られた。そして、終盤は、赤磐神社と赤い蝶の関係性、彼女が霊感体質である理由が解き明かされていき、ほろりと涙がこぼれる感動モノに仕上がっていた。 千恋万花では見れなかった、祝詞付きでの舞の奉納イベントシーンがあるので、前々作で不完全燃焼だった方は是非攻略してほしい。 希ちゃんの好きが溢れる切なげな表情がたまらない © YUZUSOFT / JUNOS INC. All Rights Reserved. 火打谷 愛衣 オススメ度：★★★★☆ 性格や人柄 四季ナツメの母校である巻機女学院に通う高校二年生で、墨染希とは中学校時代の級友。縁故採用ではなく、開業前の店外に掲示したアルバイト募集の張り紙を見て応募してきた。 表裏がなく単純な性格で、何事にも物怖じせず周囲に明るく元気な笑顔を振り撒くムードメーカー。その反面、精神面は、打たれ弱く卑屈で脆さがある。我を失うほど可愛いもの全般が好きで、その中でも特にぬいぐるみが好きだが、ガサツな自分には似合わない趣味だと考えている。 個別ルートの感想 個別ルートは、蝶を捕まえられる虫喰の瞳を左目に宿した、彼女を中心としたストーリーで展開される。 序盤は、彼女が瞳の秘密を打ち明けたり、昂晴と一緒に切磋琢磨しながらカフェで働いたりすることで、次第に仲良くなっていく様子が丁寧に描かれる。中盤から終盤にかけては、彼女がカフェで働く前にやっていた、水泳をやめることになった原因である友人との確執を、昂晴の手助けや彼女自身の成長により解決に導いていく、良くも悪くも王道モノだった。 ぶっちゃけ、ストーリーは添え物と言った感じで、からかい甲斐と可愛がりたくなる後輩感がある彼女の可愛さがあって成立している点も否めないので、無心でプレイしたい人にはオススメできる。 恒例の眼鏡キャラは愛衣ちゃんが本作担当です © YUZUSOFT / JUNOS INC. All Rights Reserved. 作品評定 評点 94点（秀/AAランク） シナリオ・グラフィック・キャラクター・プレイ環境のすべてにおいて最高水準の品質である。 キャラゲーとしての側面も持ちつつ、シナリオゲーとしての側面も兼ね備えた至高の名作であろう。 評点の内訳 採点基準は、このブログについてページをご覧ください。 カテゴリ 項目 点数 シナリオ 世界観 9/10点 構成 9/10点 演出 9/10点 合計 27/30点 グラフィック クオリティ 10/10点 ボリューム 10/10点 合計 20/20点 キャラクター 作り込み 9/10点 ボイス 10/10点 合計 19/20点 プレイ環境 音楽 9/10点 動画 9/10点 システム 10/10点 合計 28/30点 コメント シナリオ 全てのメインヒロインの個別ルートにおいて、「蝶」を軸としたテーマとしたストーリーとなっており、シナリオゲーとしてもかなり出来が良い。 本作は、過去作にあった説得力のない強引な展開やダラダラとした展開がなく、コンパクトに丁寧で納得する内容である。そして、涙腺が緩んだり、笑みが浮かんだり、感情が適度に揺さぶられるため、しっかりとした充足感がある。 完璧ではないが、ゆずソフトの作品の中で、最高品質であるのは間違いない。 グラフィック 今作も期待を裏切らず、むりりん先生・こぶいち先生のCGとこもわた遙華先生のSDは、文句なしのクオリティを誇る。加えて、通常シーンとHシーンのイベントスチルのボリュームバランスも良いため、飽きさせない工夫が凝らされている。 キャラクター 万人受けするような程よい味付けの個性に、マイルドな可愛らしさも持ち合わせていて、ヒロインとしての魅力を上手に演出できている。 それぞれのヒロインについての詳細は、前述のメインヒロイン評論をご覧いただきたい。 音楽・動画・システム OP「Smiling-Swinging!!」は、作品のテーマにフィットした良曲で、EDも各ヒロインの個別ルートの内容に合わせた曲となっている。 また、システムにおいても、ノーストレスにプレイでき、ビジュアルノベルゲームとしては理想を体現した仕上がりである。 作品購入リンク レビューを見て本作が気になったら、DMM または Steam から購入してプレイしてみてください。 DMM R18版 喫茶ステラと死神の蝶【こちらの商品は 「修正パッチ Ver.1.3.1」を適用済みです】※2021/2/16 18時以降に適用されています。ダウンロード版のメーカーサポートお問い合わせの際は、ゲ... Steam 全年齢版 Café Stella and the Reaper's Butterflies on SteamTakamine Kousei was living a carefree college life until, one day, he tragically died in an accident. But then, the bizarre happened: Takami...","link":"/articles/review-cafe-stella-and-the-reapers-butterflies/"},{"title":"グロービスMBA 第二部 マーケティング 要約 前編","text":"今回は、書籍「グロービスMBAマネジメント・ブック」第二部「マーケティング」の要約となる前編記事をお届けします。 こちらは、グロービスMBAマネジメント・ブックの書籍要約シリーズの記事です。 この書籍に関する他の記事もありますので、是非ご覧ください。 マーケティングとは 収益を齎す顧客の創造と維持が企業の継続的成長に欠かせないため、顧客ニーズを満たす製品を生み出し、顧客満足を高める努力が、マーケティングでは常に必要である。 セリングとマーケティング マーケティングとは、「顧客に買ってもらえる仕組みをつくること」であり、「売り込む手段」を考えるセリング（販売）とは、明らかに異なる考え方である。 セリングの目的は、顧客との信頼関係を勝ち得る努力は重視せずに、目先の製品の１回の売上を最大化することである。これに対して、マーケティングの目的は、長く利益を齎す存在として顧客を中心として考え、繰り返し買ってもらうことで継続的に成長することである。 ニーズとウォンツ 顧客の欲求を表す概念として「ニーズ」と「ウォンツ」がある。 ニーズとは、衣食住などの生理的なことから、社会的・文化的・個人的なことに至る様々な事柄に対して、人間が感じる「満たされない状態」であり、ウォンツは、ニーズを満たすために製品化されたものを求める「具体的な製品やサービスへの欲求」である。 マーケティングは、顧客の本質的なニーズを捉え具体的なウォンツに繋げることが、中心課題である。 マーケティング部門の役割 外部環境の中で最重要要素の一つは、日々変化していく市場環境である。その構造的変化をいち早く捉え、現在または将来の環境に合致した経営戦略を策定することで、市場から拒否されないようにする必要がある。そのような市場環境の変化を踏まえて、企業の進むべき方向性を見出し、経営戦略や事業活動に落とし込んでいく役割を果たすのがマーケティングである。 マーケティングは、顧客の期待を明確化し、ニーズの充足を保証するために、企業が持つ生産・営業・開発・財務・人事などの様々な機能を統合し、それぞれの役割を最大限に果たさせる役割を担っている。 マーケティング・プロセス マーケティングの観点からビジネスを構築していくためのプロセスは、以下の６つのステップに大別される。このプロセスは、必ずしも一方向的な流れではなく、行きつ戻りつすることもある。また、実際には、制約条件等により動かせない要素があるため、遡って整合性をとることも多い。 (1) 環境分析と市場機会の発見 マーケティング環境を分析することにより、市場の機会と脅威、自社の強みと弱みを見極め、自社にとってのマーケティング機会を発見する。 (2) セグメンテーション 環境分析の結果から、不特定多数の人々を「セグメント（同じニーズを持つかたまり）」に分ける。 (3) ターゲティング 分類したセグメントの中から、自社が事業を展開するのに最も相応しいセグメントを選定する。 (4) ポジショニング 競合製品に対して、自社製品をどのように差別化するかを決定する。自社製品が特別な価値を有するものと、顧客に位置付けられるようにするための活動である。 (5) マーケティング・ミックス ターゲットとするセグメントに対して働きかけるための具体的なマーケティング施策を考えていく。この時、Product（製品）、Price（価格）、Place（流通）、Promotion（コミュニケーション）の４Ｐについて、組み合わせが最良であり、整合性をとれるようにする。 (6) 施策の実行及び評価 施策の実行後には必ず結果を評価して、上手くいっていない部分については原因を探り、戦略を見直す。 マーケティング環境分析 マーケティング環境分析では、マクロ環境・市場（顧客）・競合に関する外部環境と、自社の経営資源・強みと弱みなどの内部環境を明らかにしてから、SWOT 分析を行い、Key Success Factor（成功の鍵となる要因）を発見する。 マーケティング・リサーチ マーケティング戦略を策定するときは、市場で起こっていることを把握し、自社のアイディア（仮説）が市場に受け入れられるかどうかを確認する必要がある。また、戦略をレビューする際にも、実施した施策がどれだけ効果的だったのか検証しなくてはならない。 そのため、マーケティングでは、市場調査やシェア分析、製品選好分析、販売予測、広告効果分析など、目的別に様々なリサーチが行われる。 仮説なきリサーチの弊害 リサーチでは、現状から考えられる仮説と予測される結果を必ず事前に考え、調査結果との違いを評価する「仮説検証型」のアプローチが望ましい。とりあえず手に入るデータを集めて、そこから最終結論を導く方法は、無駄が多く、誤った結論を得る可能性が高い。 リサーチのプロセス リサーチは、目的の設定、仮説の設定、設計と実施、仮説の検証という４つの手順で行われる。 (1) リサーチ目的の設定 だれが、どのような目的のために、どのような情報を必要としているのかを明確にする。 (2) 仮説の設定 場当たり的に調べるのではなく、仮説を立てて分析すると、効率よく調査できる。 (3) リサーチの設計と実施 必要なデータを特定し、そのデータを収集するためのリサーチ手法やサンプリング、質問内容を決める。 (4) 仮説の検証 検証したい事柄に応じて様々な分析手法を用いる。例えば、製品やサービスを総合的に評価する時には、コンジョイント分析を用いる。定量リサーチでは、一つの変数だけを単独で分析するのではなく、それらの相関について分析する場合が多く、簡単な表計算ソフトが必要である。 市場戦略 市場全体に対して同一製品を同一のマーケティングで販売できれば、企業は効率的に収益を上げることができる。一方で、顧客満足度を最大化したければ、顧客一人ひとりに専用品を提供することが望ましい。 しかし、企業の経営資源が限られているため、各個人のニーズに応えることは難しい。対応できたとしても、膨大なコストがかかるだろう。そこで、企業にとっての「効率」と、顧客にとっての「効果」とのギャップを埋めるための考え方が、セグメンテーションである。 セグメンテーション変数 セグメンテーションは、どのような軸（セグメンテーション変数）で分けるか、がポイントであり、複数軸を組み合わせて使うことも多い。 以前は、切り分けが容易な地理的変数や人口動態変数が多用されていたが、最近は、消費者ニーズの多様化や個性化に合わせて、心理的変数や行動変数が重視されるようになった。例えば、行動変数としては、購買頻度や購買動機などがある。特に、顧客が購買にあたって何を重視するかという「KBF（Key Buying Factor: 購買決定要因）」は、重要な切り口となる。 セグメントは、単に細かく分ければ良いというものではなく、十分な売上高や利益を確保できる規模があることや、重要度に応じて優先順位を付けられるなどの条件を満たす必要がある。また、顧客層にアプローチし、顧客の反応を測定・分析することができるか等の実現可能性にも考慮しなくてはならない。 ターゲティング どの顧客層（セグメント）をターゲットにするかを決めるのが、ターゲティングである。このとき、特に以下に述べる６点（６R）に注意し、総合的に判断しなければならない。 ポジショニング ポジショニングは、ターゲット顧客に自社製品のユニークな価値を認めてもらうことで、競合製品に対して優位に立つことを目的とした活動である。ポジショニングの決定は、マーケティング・プロセスの中で重要なステップであり、その巧拙は製品の売れ行きや収益性に大きな影響を与える。 まったく同じ内容の製品やサービスであっても、ポジショニングが変わればマーケティングの施策は異なったものになり、高付加価値商品として売り出すなら、相応しい製品設計や価格設定、流通チャネル、販売方法などを考え、普及品としてであれば、手ごろな値段を付けて売ることになるだろう。 ポジショニング成功のための鉄則 ポジショニングは、製品コンセプトに落とし込まれ、注通チャネルやコミュニケーションなどのマーケティング・ミックス戦略を規定していく。そのため、ポジショニングを決定する時には、以下の４点を留意しながら、様々な角度から実現可能性を検討する必要がある。 (1) 顧客像が明確かつ適切 優れたポジショニングが想定する顧客イメージは、顧客の実像と彼らが他人にどう思われたいかが異なることが多く、実際にその製品を購入すると想定されるターゲット顧客と違う場合がある。 (2) 顧客に正確に伝わる 魅力的なポジショニングを考えていても、それをきちんと伝えるコミュニケーションの努力がなければ、顧客の頭の中に像は結ばれない。 (3) 顧客が共感できる 意図を正確に伝えるだけでなく、売り手の独りよがりにならず、製品を購入する顧客にとって意味がある重要なポジショニングでなければ、成功しない。 (4) 企業全体のポジショニングと整合している 製品のポジショニングが、売り手企業自体や既存製品のそれと整合していないと、顧客に混乱した印象を与えるだけではなく、既存製品の売上や企業全体のイメージにもダメージを与える可能性がある。 関連記事 マネジメント・ブック要約 第一部 第一部「経営戦略」要約 前編 第一部「経営戦略」要約 後編","link":"/articles/summarize-globis-mba-management-book-part2-vol1/"},{"title":"Docker Compose RestartでMySQLを初期化する方法","text":"Docker Compose で MySQL コンテナを取り扱っている時に、compose.yml ファイルにひと手間を加えて、Restart コマンドで初期化させる方法をご紹介します。 この記事は、mediba Advent Calendar 2024 の10日目にエントリーしています。 はじめに この記事の方法は、Docker 公式の説明通りであれば、ファイルシステムの都合上、Windows がホストの時に動作しません（※注：動作確認は未検証）。 macOS などの Unix/Linux 系 OS だけでローカル環境を揃えられる時にご利用ください。 この記事は、Docker Compose を使っていて、docker compose down コマンドと docker compose up コマンドを使わずに、MySQL コンテナの docker-entrypoint-initdb.d を処理させる方法を知りたい方にオススメです（ちなみに、PostgreSQL や MongoDB のコンテナでも流用可能です）。 docker-entrypoint-initdb.d docker-entrypoint-initdb.d は、MySQL や PostgreSQL などのデータベースコンテナで、始めて起動した時に初期化を行うための機能です。 これは、ホストにあるディレクトリやファイルを、docker-entrypoint-initdb.d 自身やその配下のファイルとしてコンテナにマウントすることで、データベースにテーブルを作成したり、データ投入したりできるため、とても使い勝手が良いです。 MySQL 公式の Docker Hub ページでは、次のように説明されています（日本語訳を付けていますが、間違えている可能性もあるので、原文をきちんと読んでください）。 Initializing a fresh instance When a container is started for the first time, a new database with the specified name will be created and initialized with the provided configuration variables. Furthermore, it will execute files with extensions .sh, .sql and .sql.gz that are found in /docker-entrypoint-initdb.d. Files will be executed in alphabetical order. You can easily populate your mysql services by mounting a SQL dump into that directory and provide custom images with contributed data. SQL files will be imported by default to the database specified by the MYSQL_DATABASE variable. 新しいインスタンスの初期化 コンテナが始めて起動された時、指定された名前で新しいデータベースが作成され、指定された構成変数で初期化されます。 さらに、「docker-entrypoint-initdb.d」にある「.sh」と「.sql」、「.sql.gz」の拡張子を持つファイルも、実行されます。 ファイルは、アルファベット順に実行されます。SQL ダンプをそのディレクトリにマウントすることで、MySQL サービスの設定と、投入されたデータを含むカスタムイメージの供給が、簡単にできます。 SQLファイルは、MYSQL_DATABASE 変数によって指定されたデータベースにデフォルトでインポートされます。 出典：mysql - Official Image | Docker Hub 些末でも悩ましい問題 さて、MySQL のコンテナの便利な docker-entrypoint-initdb.d ですが、Docker Compose で取り扱う時には、ちょっとした不便もあります。それは、些末な不都合だけれども、使い続けると悩ましくなる、塵も積もれば山となる様な問題で、以下の2つがあります。 単純な再起動で初期化せず docker-entrypoint-initdb.d は、コンテナ起動時のエントリーポイントの処理で、/var/lib/mysql が存在するボリュームがマウントされていなければ、実行される仕様です（処理の詳細は、MySQL 8.0 の docker-entrypoint.sh を参照してください）。 ゆえに、docker compose down 以外の docker compose restart や docker compose create などの如何なるコマンドを駆使して頑張っても、それらのコマンドはボリュームを削除しないため、MySQL コンテナは初期化処理をしてくれません。 匿名ボリュームのボタ山 docker-entrypoint-initdb.d で、MySQL を初期化させる度に必ず付き纏う現象があります。それは、Anonymous Volume が一つ生成されることです。 そのため、docker compose up と docker compose down のコマンドを繰り返していたら、いつの間にかゴミボリュームが大量生産され、ホストのストレージを食い潰しそうになることもあります。 名前が無いからこそ、残しておきたいボリュームと区別が面倒で、お掃除する時には思わぬ苦行を課せられるわけです。全てのボリュームを消せばいいという思い切った考えで割り切ることもできますけど、SDGs 何それ美味しいの、みたいな正直イケてない仕様です。 問題の解決方法の発見 とある日、私は、docker-compose.yml から compose.yml への移行のために、Docker 公式のドキュメントで仕様を確認していました。 そこで、Services top-level elements ページにある volume 属性の Long syntax セクションを読んだ時に、docker-entrypoint-initdb.d にまつわる問題の解消方法をついに発見するに至りました。 tmpfs のマウント 今までボリューム利用やバインドマウントの簡単なものばかりだったため、volumes 属性の Short syntax だけを使っていました。そのため、Long Syntax であれば、tmpfs や npipe などのマウントや、追加オプションの指定ができることを知りませんでした。 このうち、tmpfs マウントは、前述した諸々の問題への解決策になります。 tmpfs とは何？ 「tmpfs (Temporary File System)」とは、Unix 系 OS で、ファイルを一時的にメモリ上に保持するためのファイルシステムです。Docker では、コンテナで tmpfs としてマウントしたボリュームを、ホストのメモリに一時的に保持します。 tmpfs をどう活かすか tmpfs の仕組み上、それをマウントしたコンテナを停止すると、それに含まれるファイルごとボリュームは揮発します。すなわち、実質的にボリューム自動削除と同じことができます。 この特性を利用すれば、MySQL のコンテナを再起動する度に、毎回新しいボリュームがマウントされる状態を作れるのです。 ただし、ユースケースにより、tmpfs 使用是非の判断が分かれることに注意が必要です。 例えば、少量のデータを取り扱う API などのアプリケーションの場合、tmpfs をボリュームとしてマウントして問題ありません。しかし、大量のデータを取り扱うバッチなどの場合、今までと変わらず匿名ボリュームや名前付きボリュームなどで永続化するべきです。 compose.yml を作ろう それでは、tmpfs を活用した compose.yml ファイルを作って行きましょう。 前提として、MySQL の設定ファイルは ./build/docker/database/conf ディレクトリに、初期化時に投入する SQL ファイルなどは ./build/docker/database/init ディレクトリに、それぞれ配置されているものとします。 それを踏まえて、2025年01月時点で最新版である「Amazon Aurora MySQL 3.08.0」互換で、compose.yml ファイルを作成すると、次のようになります。 compose.yml ファイル内で変数を使用するために、.env ファイルも併せて作成しています。どちらも同じディレクトリ内に配置してください。 compose.ymlservices: database: container_name: test-database image: mysql:8.0.39 # Aurora MySQL 3.08.0 互換 ports: - '3306:3306' healthcheck: test: &quot;mysqladmin status -h localhost -u ${MYSQL_USER} -p${MYSQL_PASSWORD}&quot; start_period: 120s interval: 15s timeout: 15s retries: 3 volumes: - type: tmpfs target: /var/lib/mysql - type: bind source: ./build/docker/database/conf target: /etc/mysql/conf.d read_only: true - type: bind source: ./build/docker/database/init target: /docker-entrypoint-initdb.d read_only: true .envMYSQL_PASSWORD=root MYSQL_DATABASE=test MYSQL_USER=user MYSQL_PASSWORD=pass volumes 属性の Long syntax volumes 属性の Long Syntax で記述できるフィールド（一部抜粋）は、下表の通りです。また、記載を省略しましたが、追加オプションとなるフィールドとして、bind や volume もあります。 なお、表をご覧の通り、tmpfs の追加オプションでマウントボリュームのサイズ指定できますが、どの値が良いか決めるのが面倒なので、前述の例では省略しています。 名前 設定できる値 type 「volume」 … トップレベルの volume からマウント 「bind」 … ディレクトリやファイルからマウント 「tmpfs」 … ホストのメモリへマウント source 種別に合わせたソース（「volume」の場合、ボリューム名。「bind」の場合、ディレクトリやファイルのパス。「tmpfs」の場合は、不要） target コンテナでマウントされた時のファイルパス read_only 読み取り専用フラグ（「true」に設定で有効となる。デフォルトは「false」） tmpfs.size マウントボリュームのサイズ（数値またはバイト単位） tmpfs.mode マウントボリュームの Unix ファイルパーミッションビット（8 進数）。Compose 2.14.0 以上で利用可。 おわりに この方法は、Docker Compose のコマンドや MySQL コンテナをメインにした検索ワードで中々ヒットせず、ググラビリティが低いネタのようでした。 tmpfs の側面から検索すると、答えが見つかりますが、それを既に知っている場合は答えが分かっていることになるので、検索しませんよね、という話です。 ですから、この記事で、大したことではないけれども、ちょっと悩んでいる皆さんのエンジニアライフを豊かにする助けになれば、幸いです。 参考文献 Docker Compose file reference | Docker Docs Services top-level elements | Docker Docs tmpfs mounts | Docker Docs MySQL mysql - Official Image | Docker Hub docker-library/mysql: Docker Official Image packaging for MySQL Community Server Amazon Aurora Amazon Aurora MySQL バージョン 3 のデータベースエンジンの更新 - Amazon Aurora","link":"/articles/initialize-mysql-with-docker-compose-restart/"},{"title":"天色＊アイルノーツ 全ルート詳細攻略ガイド","text":"みなさん、ちゃろー☆ ゆずソフトより2013年に発売された「天色＊アイルノーツ Amairo Islenauts」の全ルート詳細攻略ガイドを掲載します。 こちらは、「天色＊アイルノーツ Amairo Islenauts」の攻略記事です。 本作を始め、ゆずソフト作品の攻略ガイドを多数投稿しているので、興味があれば是非ご覧ください。 おすすめ攻略順 真咲まさき・ガイヤール、ティア・ホーエンヴェルフェン、火宮ひのみや 木乃香このか、白鹿しらが 愛莉あいり、天霧あまぎり 夕音ゆね、シャーリィ・ウォリックの順を推奨する。 しかし、本作は、他作品と比べるとネタバレ偏りが比較的少ないことから、上記に厳格に従う必要はなく、プレイヤーの好みの順番で攻略して構わない（※ティア・ホーエンヴェルフェン及び火宮 木乃香は、二人目以降に攻略可）。 ちなみに、メインヒロインのルートは、ストーリーが長尺のため（最短は、白鹿 愛莉）、まとまった時間が取れる時にプレイすることをオススメしたい。 ルート分岐データ 本セクションを始め、以降の「共通ルート詳細データ」と「個別ルート詳細データ」に記載のシーン名は、説明の便宜上名付けた非公式のものであるため、取り扱いにご注意ください。 分岐確定条件 下表の条件を満せば、他の選択肢の選択内容に関わらず、そのヒロインの個別ルートに確定で分岐するようになっている。 ピンポイントで攻略したいヒロインがいる場合、参考にすると良いだろう。 名前 条件 シャーリィ・ウォリック 自習の監視場所で彼女に会いに行き、弁当はキャラ弁にして、湖を監督する場所を移動せずに留まる。 天霧 夕音 自習の監視場所を適当に回り、あーんで食べさせてあげて、湖で料理を準備する。 白鹿 愛莉 自習の監視場所に教室の中を選び、弁当は彩り豊かな弁当にして、湖でもうしばらく探す。 真咲・ガイヤール 自習の監視場所に教室の中を選び、弁当は茶色い弁当にして、湖に近づいた後に正直に見えたと言う。 ティア・ホーエンヴェルフェン (1) シャーリィ・夕音・愛莉・真咲のうちだれか一人のエピローグを見終える。 (2) シャーリィ・夕音・愛莉・真咲の分岐条件を満たさず、湖で水着を流れで褒める。 火宮 木乃香 (1) シャーリィ・夕音・愛莉・真咲のうちだれか一人のエピローグを見終える。 (2) シャーリィ・夕音・愛莉・真咲の分岐条件を満たさず、三刀屋に頼む。 要約フローチャート 本作は、最初の選択肢で攻略するヒロインを絞ってしまう仕様のため、他作品と違い効率的な攻略フローチャートを作ることはできない。そのため、要約フローチャートの掲載は差し控える。 前述のおすすめ攻略順に従う場合は、共通ルート詳細データなどを参考にしながら、下記の順番でプレイすること。 「自習の監視場所は？」でセーブ（セーブ01） 「どの大きさが好み？」でセーブ（セーブ02） 「監督する場所は？」でセーブ（セーブ03） 真咲ルートをクリア セーブ02「どの大きさが好み？」をロードし、ティアルートをクリア セーブ03「監督する場所は？」をロードし、木乃香ルートをクリア セーブ01「自習の監視場所は？」をロードし、愛莉ルートをクリア セーブ01「自習の監視場所は？」をロードし、夕音ルートをクリア セーブ01「自習の監視場所は？」をロードし、シャーリィルートをクリア 共通ルート詳細データ Chapter 1 選択肢なし Chapter 2 選択肢なし Chapter 3 自習の監視場所は？ 【重要】メインヒロインのうち誰を選ぶかを問われる。選ばなかったヒロインは、攻略対象外となる。 選択肢 前提条件 結果 ウォリックさんを見に行く なし シャーリィの評価+1、シャーリィルートフラグ=ON 教室の中の子に話を聞く なし 愛莉の評価+1、真咲の評価+1、愛莉ルートフラグ=ON、真咲ルートフラグ=ON 適当に回る なし 夕音の評価+1、夕音ルートフラグ=ON どの弁当にする？ 選択肢 前提条件 結果 茶色い弁当 なし 真咲の評価+1 彩り豊かな弁当 なし 愛莉の評価+1 キャラ弁 なし シャーリィの評価+1 Chapter 4 食べさせて 選択肢 前提条件 結果 ……仕方ない なし 夕音の評価+1 いや、ここは強固な態度で なし なし Chapter 5 どの大きさが好み？ どれを選んでも効果のない選択肢。しかし、次の選択肢である「水着を褒める？」は、条件を満たさないと表示されないため、セーブポイントの役割を果たす選択肢となる。 選択肢 前提条件 結果 巨乳 なし なし 美乳 なし なし 貧乳 なし なし どれでも なし なし 水着を褒める？ アフターストーリーのプレイアブル人数が 0 人（＝一度もエピローグを見終えていない状態）の時は、選択肢は表示されず、「しない」を選択した扱いとなる。 選択肢 前提条件 結果 流れで褒める Afterプレイアブル人数&gt;0 ティアの評価+1、ティアルートフラグ=ON ……まっ、いっか なし なし 監督する場所は？ 「このまま、ここに残る」と「先に料理の準備を――」の選択肢は、前提条件を満たした時にのみ表示される。ただし、これらの選択肢を同時に表示させる条件は満たせない。 選択肢 前提条件 結果 このまま、ここに残る シャーリィルートフラグ=ON AND シャーリィの評価=2 シャーリィの評価+1 先に料理の準備を―― 夕音ルートフラグ=ON AND 夕音の評価=2 夕音の評価+1 愛莉ちゃんを探しに行く なし 「このまま探す？」発生 もう少し湖に近づく なし 「見えた？」発生 このまま探す？ 選択肢 前提条件 結果 一度、キャンプ地に戻る 「監督する場所は？」で「愛莉ちゃんを探しに行く」を選択 なし もうしばらく探してみる 愛莉の評価+1 見えた？ 選択肢 前提条件 結果 誤魔化す 「監督する場所は？」で「もう少し湖に近づく」を選択 なし 正直に言う 真咲の評価+1 Chapter 6 三刀屋に…… アフターストーリーのプレイアブル人数が 0 人（＝一度もエピローグを見終えていない状態）の時は、選択肢は表示されず、「頼まない」を選択した扱いとなる。 選択肢 前提条件 結果 三刀屋に頼む Afterプレイアブル人数&gt;0 木乃香の評価+1、木乃香ルートフラグ=ON 三刀屋に頼まない なし なし また来週 各個別ルートへの分岐優先度は、シャーリィ＝夕音＝愛莉＝真咲＞ティア＞木乃香の順である。ただし、全てのメインヒロインで分岐条件を同時に満たすことはできない。 後続シーン 前提条件 備考 最近の悩み シャーリィルートフラグ=ON AND シャーリィの評価=3 シャーリィルート分岐 笑顔の下 夕音ルートフラグ=ON AND 夕音の評価=3 夕音ルート分岐 現実は非情 愛莉ルートフラグ=ON AND 愛莉の評価=3 愛莉ルート分岐 特上スマイル 真咲ルートフラグ=ON AND 真咲の評価=3 真咲ルート分岐 決意と望み ティアルートフラグ=ON AND ティアの評価=1 ティアルート分岐 感謝の気持ち 木乃香ルートフラグ=ON AND 木乃香の評価=1 木乃香ルート分岐 頑張るぞ それ以外 ノーマルEND 個別ルート詳細データ クリア報酬 アフターストーリーのプレイアブル人数が 1 人以上（＝誰か一人のエピローグを見終えた）になった時に、タイトル画面に AFTER と EXTRA のモードが追加される。 以降は、新しくエピローグを見終える度に、そのヒロインの AFTER と EXTRA のデータが追加される。 そして、全ヒロインのエピローグを見終える（※CG を全回収していない状態でも可）と、EXTRA の立ち絵鑑賞機能が解禁となる。 シャーリィ・愛莉・真咲・木乃香 シャーリィ・愛莉・真咲・木乃香ルートは、選択肢によって分岐が発生しないので、選択肢があるチャプターだけをリストにまとめた。 CG を全回収する場合は、セーブ＆ロード、選択肢ジャンプ、バックログのジャンプ等の機能を使用して、全ての選択肢を選ぼう。 ちなみに、システム設定の「Hシーン選択肢固定」を ON にしていると選択肢が出現しないので、回収する時は OFF にしておこう。 シャーリィルート Chapter 11-5 Chapter 12-6 Chapter 14-3 Chapter 14-3 続き 愛莉ルート Chapter 9-8 Chapter 10-7 Chapter 12-2 Chapter 12-3 真咲ルート Chapter 12-8 Chapter 12-8 続き Chapter 13-6 エピローグ 木乃香ルート Chapter 9-8 Chapter 10-4 Chapter 10-5 夕音 夕音ルートは、H シーンの選択肢で CG 差分が発生するため、詳細データを別途掲載する。 Chapter 13-5 以外 Chapter 12-6 Chapter 13-4 Chapter 14-6 Chapter 14-7 Chapter 13-5 パンツを下げる？ 選択肢 前提条件 結果 これ以上は、一秒も我慢できない なし パンツ下げフラグ=OFF 数秒くらいなら我慢できる なし パンツ下げフラグ=ON 続き 選択肢 前提条件 結果 このまま中で パンツ下げフラグ=ON パンツ下げありCG パンツ下げフラグ=OFF パンツ下げなしCG お尻にかける パンツ下げフラグ=ON パンツ下げありCG パンツ下げフラグ=OFF パンツ下げなしCG ティア ティアルートは、攻略途中の選択肢によって眼鏡有無の CG 差分及び立ち絵差分が発生するため、詳細データを別途掲載する。 ちなみに、CG 回収効率を重視するなら、ストーリーを二周以上プレイする（＝セーブ＆ロードやジャンプ機能を使う）よりも、シーン回想モードで眼鏡有無を選択する方が良いだろう。 Chapter 7-8 選択肢 前提条件 結果 似合うからそのままで なし 眼鏡フラグ=ON メガネはちょっと…… なし 眼鏡フラグ=OFF Chapter 8-7 選択肢 前提条件 結果 中で射精したい 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 外で射精したい 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG Chapter 9-5 選択肢 前提条件 結果 最も深い所に最後の一滴まで注ぎ込む 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG 白いお尻をもっと白くデコレートする 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG アフターストーリー アフターストーリーも選択肢があり、CG 全回収には必要なので、忘れずにプレイしよう。 全員攻略後にひと息でプレイするも良し、攻略するごとにプレイするも良し。個人の裁量に任せたい。 ここでは、ティアのみ眼鏡有無の CG 及び立ち絵差分が発生するため、詳細データを別途掲載する。 ティア アフターストーリー 開始時 選択肢 前提条件 結果 似合うからそのままで なし 眼鏡フラグ=ON メガネはちょっと…… なし 眼鏡フラグ=OFF おしっこ出ちゃいます 選択肢 前提条件 結果 このまましてもらう 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG さすがにかわいそう 眼鏡フラグ=OFF 眼鏡なしCG 眼鏡フラグ=ON 眼鏡ありCG","link":"/articles/guide-amairo-islenauts/"},{"title":"Goのinterfaceをnilとして取り扱う時に注意すべきこと","text":"Go の interface は取り扱い方によって、nil 判定の結果が想定通りにならないことがあります。その問題についての解説と対処方法をご紹介します。 この記事は、mediba Advent Calendar 2024 と Go Advent Calendar 2024 の24日目にエントリーしています。 はじめに interface の理解度確認 さて、本題に入る前に、Go の interface と nil の仕様をどの程度理解しているか、画面の前で読んでいるみなさんに3つ質問です。 問1「interface の戻り値」 以下のコードでは、error インターフェイス型の戻り値を持つ関数 Action1 で、MyError 構造体ポインタ型の nil を値として返却しています。 struct を interface として返した場合type MyError struct { error } func main() { if err := Action1(false); err != nil { fmt.Printf(&quot;Action1 return value is not nil, err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;Action1 return value is nil.&quot;) } } func Action1(hasError bool) error { var err *MyError if hasError { err = new(MyError) } return err } このとき、main 関数を実行して表示出力される内容は、以下のうちどれでしょうか？（複数選択不可） Action1 return value is not nil, err is &amp;main.MyError{error:error(nil)}. Action1 return value is not nil, err is (*main.MyError)(nil). Action1 return value is nil. 問2「interface への代入」 以下のコードでは、関数 Action2 で MyError 構造体ポインタ型の nil を返し、それを main 関数で宣言した error インターフェイス型の変数 err に代入します。 interface に struct を代入する場合type MyError struct { error } func main() { var err error if err = Action2(false); err != nil { fmt.Printf(&quot;Action2 return value is not nil, err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;Action2 return value is nil.&quot;) } } func Action2(hasError bool) *MyError { if hasError { return new(MyError) } return nil } このとき、main 関数を実行して表示出力される内容は、以下のうちどれでしょうか？（複数選択不可） Action2 return value is not nil, err is &amp;main.MyError{error:error(nil)}. Action2 return value is not nil, err is (*main.MyError)(nil). Action2 return value is nil. 問3「interface の引数」 以下のコードでは、問1と問2で登場した関数 Action1 及び Action2 と、error インターフェイス型の引数を持つ Action3 関数があります。 引数を interface として受け取る場合type MyError struct { error } func main() { Action3(Action1(false)) Action3(Action2(false)) } func Action1(hasError bool) error { var err *MyError if hasError { err = new(MyError) } return err } func Action2(hasError bool) *MyError { if hasError { return new(MyError) } return nil } func Action3(err error) { if err != nil { fmt.Printf(&quot;err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;err is nil.&quot;) } } この Action3 関数を実行して表示出力される内容は、次のうちどれかになります。 A. err is &amp;main.MyError{error:error(nil)}. B. err is (*main.MyError)(nil). C. err is nil. 以上より、関数 Action1 及び Action2 の戻り値を、関数 Action3 の引数にそれぞれ渡した時、表示出力される内容の組み合わせとして正しいものはどれでしょうか？（組み合わせの順番は前後可） AとA AとB AとC BとB BとC CとC 問題の答え 正解は、問1が「2」、問2が「2」、問3が「4」です。みなさんは、全問正解できましたか？ Go は、このようなインターフェイスの取り扱い方をすると、「nil」として扱いません。次のセクションでは、このような不都合な問題が発生する理由について解説します。 直感に反する Typed-nil 言語利用者の直感に反する不都合なこの問題は、「Typed-nil」と呼ばれます。これは、Go のインターフェイスの実装と比較処理によって発生します。 このセクションでは、それぞれの仕様を、ざっくりと要約した内容で説明します。 interface の実装 まずは、interface 実装（リンク先は Go 1.23.3）です。 インターフェイスを表す構造体type iface struct { tab *itab data unsafe.Pointer } インターフェイスの実装は、tab と data の2つのフィールドを持つ iface 構造体です。それぞれのフィールドでは、tab に型情報を、data に値を保持します。ここからインターフェイスは、「型情報と値のペアでデータを保持する」仕様であることが読み取れます。よって、インターフェイスへ構造体ポインタのゼロ値を代入すれば、型情報を持ち値が「nil」の状態を作り出せる、ということも分かります。 interface の比較処理 次に、実装を前提として、interface の比較処理（リンク先は Go 1.23.3）を見ていきます。 インターフェイスの比較処理func interequal(p, q unsafe.Pointer) bool { x := *(*iface)(p) y := *(*iface)(q) return x.tab == y.tab &amp;&amp; ifaceeq(x.tab, x.data, y.data) } func ifaceeq(tab *itab, x, y unsafe.Pointer) bool { if tab == nil { return true } t := tab.Type eq := t.Equal if eq == nil { panic(errorString(&quot;comparing uncomparable type &quot; + toRType(t).string())) } if isDirectIface(t) { // See comment in efaceeq. return x == y } return eq(x, y) } 比較処理は、2ステップで行われます。まずは、interequal 関数で型情報の一致を確認します。次に、ifaceeq 関数で値の一致を確認します。 ではここで、構造体ポインタのゼロ値を代入した error インターフェイスと、「nil」の比較について考えてみましょう。「nil」は、見方を変えると、型情報と値のどちらも「nil」であるインターフェイスです。一方の error インターフェイスの方は、型情報を持ち値が「nil」の状態です。 ゆえに、1ステップ目にこれらの型情報を比較した時点で、「不一致（false）」が確定します。そのため、理解度確認の全ての問におけるerr != nilの判定は、必ず true です。 したがって、前述の実装とこの比較処理によって、不都合な問題が発生しています。 問題回避のための処方箋 インターフェイスで「Typed-nil」問題が発生する要因が分かりました。このセクションでは、それを解決または回避するための方法を提示します。 関数の戻り値の場合 インターフェイスを関数の戻り値にする時は、「nil」の場合と「nil」ではない場合のそれぞれに分岐させて return する必要があります。 問1は「Action1」関数を改修すると想定通りに動作するfunc Action1(hasError bool) error { if hasError { return new(MyError) } // nil として明示的に return することで、型情報と値の両方を nil にする return nil } 変数代入の場合 変数の場合、代入元と代入先は同じ型に揃えましょう。そう覚えておくとミスを減らせます。 問2は「main」関数を改修すると想定通りに動作するfunc main() { // 変数 err の型を、error インターフェイスではなく、MyError 構造体ポインタに変える var err *MyError if err = Action2(false); err != nil { fmt.Printf(&quot;Action2 return value is not nil, err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;Action2 return value is nil.&quot;) } } なお、if ステートメントのスコープで限定的に変数を使えるのであれば、変数 err 宣言を削除して、if err := Action2(false); err != nil {に書き換えることでも正しく動作します。 関数の引数の場合 関数の引数でインターフェイスを使いたい場合、問題の発生を回避するためには、型アサーション・リフレクション・Typed-nil 判定のうちいずれか1つと、nil 判定を組み合わせます。 (1) 型アサーション A Tour of Go にも載っている「型アサーション」と組み合わせる正統派な方法です。 ただし、引数になる全ての構造体を知っている必要があります。また、場合により別パッケージとの依存関係を作るデメリットもあります。 問3の「Action3」を改修するfunc Action3(err error) { // err を MyError 構造体ポインタであるとアサーションしてから nil 判定する myErr, isMyError := err.(*MyError) if isMyError &amp;&amp; myErr != nil { fmt.Printf(&quot;err is %#v.\\n&quot;, myErr) } else { fmt.Println(&quot;err is nil.&quot;) } } なお、型アサーションの一種である「Type switches」を使いたい場合は、次のようにします。 ただし、これは型の判定しかしないので、case ステートメントのスコープごとに、値の nil 判定処理を追加する必要があります。コーディングにかかるコストを考えると、前述の if ステートメントで判定する方法を用いるべきでしょう。 問3の「Action3」を改修する（「Type switches」版）func Action3(err error) { switch myErr := err.(type) { case *MyError: // 型は MyError 構造体ポインタと断定できるが、値については nil 判定処理が必要 if myErr != nil { fmt.Printf(&quot;err is %#v.\\n&quot;, myErr) return } } fmt.Println(&quot;err is nil.&quot;) } (2) リフレクション リフレクションと組み合わせる万能な方法です。シンプルで、reflect パッケージ以外の依存関係も増やしません。しかし、リフレクションを使いたくない人には、デメリットでしょう。 問3の「Action3」を改修するfunc Action3(err error) { // err が、完全な nil ではない、かつ、Typed-nil ではないことを条件にする if err != nil &amp;&amp; !reflect.ValueOf(err).IsNil() { fmt.Printf(&quot;err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;err is nil.&quot;) } } (3) Typed-nil 判定 インターフェイスの比較処理を逆手に取った非推奨な方法です。これは、型アサーションの完全下位互換となるアプローチです。前述の方法と比較して、未知の構造体で正しく判定できないデメリットがあるため、利用は控えましょう。 問3の「Action3」を改修するfunc Action3(err error) { // err が、完全な nil ではない、かつ、MyError 構造体ポインタの nil と一致しないことを条件とする if err != nil &amp;&amp; err != (*MyError)(nil) { fmt.Printf(&quot;err is %#v.\\n&quot;, err) } else { fmt.Println(&quot;err is nil.&quot;) } } おわりに インターフェイスの nil 判定に関する仕様は、デベロッパーフレンドリーとは言えません。 これを知った方の中には、型や値の詳細確認はリフレクションの役割で、nil 判定は型は無視して値が nil であれば true で良いのでは？と、考えた人も少なからずいるかと思います。 とはいえ、言語の根本仕様の変更は今更しないでしょうから（Go が v2 になる時は一縷の望みに縋っても良さそうですが）、そういうものだと覚えるしかなさそうです。 参考文献 Tour of Go Type assertions Type switches interface の実装と判定処理 go/src/runtime/runtime2.go at go1.23.3 · golang/go go/src/runtime/alg.go at go1.23.3 · golang/go interface の仕様説明 Chapter II: Interfaces GoのInterfaceについて #Go - Qiita","link":"/articles/describe-typed-nil-interface-of-go/"},{"title":"癖が強すぎるGitHub Actionsのon.pushの解説","text":"GitHub Actions の on.push は、多用するイベントトリガーの一つですが、とても癖のある仕様です。 本記事では、使いこなすための解説します。 はじめに on.push の理解度確認テスト まずは、この記事を画面の前で読んでいるみなさんに質問です。 下記のように、ワークフローのイベントトリガーを書いた場合、GitHub Actions が処理を行うのは、次の選択肢のうちどれでしょうか？（複数回答可） 理解度確認テストon: push: branches: - 'feature/**' tags: - 'api-**' paths: - 'src/**' 「feature/foobar」ブランチで、「dst/foobar.txt」のみのコミットをプッシュした時。 「feature/foobar」ブランチで、「src/foobar.txt」のみのコミットをプッシュした時。 「hot-fix/bug-foobar」ブランチで、「src/foobar.txt」のみのコミットをプッシュした時。 「dst/foobar.txt」のみのコミットに、「api-foobar」タグを付けてプッシュした時。 「src/foobar.txt」のみのコミットに、「api-foobar」タグを付けてプッシュした時。 答え 正解は、「2」と「4」と「5」になります。 さて、みなさんは正解できましたか？ 次のセクションでは、on.push の仕様をおさらいします。 on.push の仕様をおさらい GitHubの公式ドキュメントの「Workflow syntax for GitHub Actions」のページを使って、仕様をおさらいします。 このページは、日本語翻訳されていた記憶があるのですが、今（※2024年04月22日時点）は原文に戻っていて、癖のある仕様でこれを読まないといけないのは、Actions に不慣れな人にとっては苦行ですね。閑話休題。 イベントフィルタ on.push イベントのフィルタは、次の3種類で、計6つあります。 「branches」と「branches-ignore」 「tags」と「tags-ignore」 「paths」と「paths-ignore」 次以降のセクションでは、上記3種類のフィルタの解説を行います。 (1) branches (branches-ignore) 特定のブランチのプッシュイベントに対して、ワークフローを実行したい時に設定します。 対象とするブランチのホワイトリストとして「branches」フィルタを、対象としないブランチのブラックリストとして「branches-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 では、対象ブランチと対象外ブランチの両方を指定したいユースケースがあった場合、どのように設定すればよいのでしょうか？ 答えは、『「branches」フィルタで、対象外ブランチの前に否定演算子!を付けて記述する』です。 加えて、このユースケースの場合、次の制限事項があることを留意して使用しなければいけません。 対象ブランチとなる定義も併せて必要です。すなわち、「branches」フィルタのリストは、最低でも2件定義することになります。 フィルタのリストは上から順番に全て評価します。よって、否定演算子付き定義でブランチを対象外にした後に、別定義でそのブランチが対象に含まれる可能性があります。 (2) tags (tags-ignore) 特定のタグのプッシュイベントに対して、ワークフローを実行したい時に設定します。 こちらも「branches」フィルタと同様の仕様で、ホワイトリストとして「tags」フィルタを、ブラックリストとして「tags-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 そのため、対象タグと対象外タグの両方を指定したい場合は、「tag」フィルタで、対象外タグの前に否定演算子!を付けて記述します。 また、「branches」フィルタと同じ制限事項があります。 (3) paths (paths-ignore) 特定のパスを含むコミットまたはタグのプッシュイベントに対して、ワークフローを実行したい時に設定します。 「branches」フィルタや「tags」フィルタと同様の仕様で、ホワイトリストとして「paths」フィルタを、ブラックリストとして「paths-ignore」フィルタを使用します。 これら二つのフィルタは、同じイベントトリガーで同時に使用することはできません。 よって、対象及び対象外となるパスを同時に指定したい場合は、「paths」フィルタで、対象外パスの前に否定演算子!を付けて記述します。 こちらも、「branches」フィルタや「tags」フィルタと同じ制限事項があります。 フィルタ併用時の挙動 branches＆paths 「branches（branches-ignore）」フィルタと「paths（paths-ignore）」フィルタを併用した場合、イベントの発動条件が変わります。 なぜなら、論理和条件（OR）ではなく、論理積条件（AND）として作用するからです。 ゆえに、論理和条件で想定した安易なリファクタリングにより、ブランチフィルタのワークフローとパスフィルタのワークフローを一つに統合すると、想定外の動作で痛い目を見ることになるでしょう。 では、どうしてこれらのフィルタを併用すると、論理積条件として作用するのでしょうか？ それは、どちらのフィルタも「コミットのプッシュイベントを対象とするから」だと考えています。 tags＆paths 一方で、「tags（tags-ignore）」フィルタと「paths（paths-ignore）」フィルタの併用は、無効な組み合わせになります。 セットで書いたとしても、それぞれが別のフィルタとして独立する論理和条件（OR）となります。 そのため、前述のルールが適用されると勘違いして、「paths（paths-ignore）」フィルタと併用すれば論理積条件（AND）になる、という安易な覚え方をしてしまうと、非常に危険です。 とはいえ、「tags（tags-ignore）」フィルタは、単独だと両方のプッシュイベントを対象にするわけですから、「paths（paths-ignore）」フィルタとの組み合わせが論理積条件にならないことに大いに不満があります。 理解度確認テストの解説 さて、これまでの説明で、理解度テストの解答の理由は、お分かりいただけたでしょうか？ 前述の通り、ブランチとパスのフィルタは論理積条件で、タグのフィルタは論理和条件です。 そのため、ブランチとパスの両方の条件を満たすのは「2」で、タグの条件を満たすのは「4」及び「5」になるということです。 on.push を使いこなす タグ＆パスの論理積 on.push は、「tags（tags-ignore）」フィルタと「paths（paths-ignore）」フィルタの組み合わせが論理積条件にならないことは、先に述べました。 しかし、下記のようにワークフローを作ると、タグとパスの組み合わせで論理積条件にできます。 ただし、この方法は、Billable Time（請求可能時間）が計上される機会が増えるため、かかるコストを意識して使わなければいけません。 タグ＆パスの論理積on: push: tags: - 'api-**' jobs: branches_and_paths_or_tags_and_paths: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 2 - name: Check event trigger enabled id: event_trigger env: PATHS: 'src/' run: | git checkout HEAD^ --quiet files=$(jq -n '$ARGS.positional' --args -- $(git show --pretty='' --name-only &quot;${{ github.sha }}&quot;)) if &quot;$(jq -n -r --argjson files &quot;${files}&quot; --arg filter &quot;${{ env.PATHS }}&quot; 'isempty($files[]|select(startswith($filter)))')&quot;; then echo &quot;enabled=false&quot; &gt;&gt; $GITHUB_OUTPUT exit 0 fi echo &quot;enabled=true&quot; &gt;&gt; $GITHUB_OUTPUT - name: Tags and Paths event id: tags_and_paths if: steps.event_trigger.outputs.enabled == 'true' run: | echo &quot;Tags and Paths event&quot; 解説 下記の順番で、イベントをフィルタリングしています。 HEAD コミットをチェックアウトし、コミットの含まれるファイルの一覧を取得します。 ファイルパスフィルタとなる環境変数「PATHS」を用いて、1で取得したファイルの一覧に絞り込みをかけます。 ブランチ＆パスとタグ＆パスの論理和 先ほどのサンプルコードにブランチフィルタを追加して下記のようにすると、ブランチとパスの論理積条件とタグとパスの論理積条件の論理和条件にできます。 これは、日本語だとわかりにくいので式にして書くと、「（ブランチ条件 AND パス条件）OR（タグ条件 AND パス条件）」という意味になります。 また、こちらの方法でも同様に Billable Time（請求可能時間）に気を付けてください。 ブランチ＆パス・タグ＆パスの論理和on: push: branches: - 'feature/**' tags: - 'api-**' jobs: branches_and_paths_or_tags_and_paths: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 2 - name: Check event trigger enabled id: event_trigger env: PATHS: 'src/' run: | git checkout HEAD^ --quiet files=$(jq -n '$ARGS.positional' --args -- $(git show --pretty='' --name-only &quot;${{ github.sha }}&quot;)) if &quot;$(jq -n -r --argjson files &quot;${files}&quot; --arg filter &quot;${{ env.PATHS }}&quot; 'isempty($files[]|select(startswith($filter)))')&quot;; then echo &quot;enabled=false&quot; &gt;&gt; $GITHUB_OUTPUT exit 0 fi echo &quot;enabled=true&quot; &gt;&gt; $GITHUB_OUTPUT case &quot;${{ github.ref_type }}&quot; in &quot;branch&quot;) echo &quot;name=branches_and_paths&quot; &gt;&gt; $GITHUB_OUTPUT ;; &quot;tag&quot;) echo &quot;name=tags_and_paths&quot; &gt;&gt; $GITHUB_OUTPUT ;; esac - name: Branches and Paths event id: branches_and_paths if: steps.event_trigger.outputs.enabled == 'true' &amp;&amp; steps.event_trigger.outputs.name == 'branches_and_paths' run: | echo &quot;Branches and Paths event&quot; - name: Tags and Paths event id: tags_and_paths if: steps.event_trigger.outputs.enabled == 'true' &amp;&amp; steps.event_trigger.outputs.name == 'tags_and_paths' run: | echo &quot;Tags and Paths event&quot; 解説 「ブランチとパス」と「タグとパス」のどちらの組み合わせのフィルタか、判定するために、「github.ref_type」の値を参照しています。 この値が「branch」であれば、「ブランチとパス」条件を満たしていて、「tag」であれば、「タグとパス」条件を満たしているということになります。 おわりに on.push について、イベントフィルタの仕様をおさらいして、タグ＆パスの論理積条件を実現したワークフローを例示しました。 このイベントトリガーを始めとして、GitHub Actions には癖のある仕様のものが多いです。 場合によっては、公式ドキュメントに説明がない仕様がある等、取り扱いがなかなかに大変です。 本記事を、みなさんの最良な CI/CD の仕組みを作るために役立ててもらえれば嬉しいです。 参考文献 GitHub 公式ドキュメント 「Workflow syntax for GitHub Actions」","link":"/articles/describe-github-actions-on-push/"},{"title":"硫黄によって生まれた「雲上の楽園」の栄枯盛衰を偲ぶ","text":"岩手県八幡平市には、東洋一の硫黄鉱山で「雲上の楽園」と言われた、松尾鉱山がありました。かの鉱山の栄枯盛衰を偲びながら、硫黄が齎す功罪を述べていきます。 はじめに 松尾鉱山は、時代の変化に伴って事業環境が大幅に変化し、花形産業の製品が急激に衰退期になった時、事業ポートフォリオが一つしかない企業がどうなるかを示す実例です。 これは、松尾鉱山の盛衰の歴史と、硫黄が齎した功罪を、第三者視点から見る記事です。 松尾鉱山の盛衰 前史 1883年、旧松尾村の佐々木兄弟が、硫黄の大露頭を発見。1888年7月、鉱山試掘願を役所に提出し、同年8月15日に鉱業権取得。しかし、当時の八幡平地域は密林地帯で、佐々木兄弟の力では鉱山開発どころか、密林を切り開くことすらままならず、鉱業権を仲間に売却されたり、他の競争者が現れたりと、ほぼ未開のまま鉱業権は転々としました。 それから時は流れ1907年頃、鉱業権は押野常松氏に渡り、代理で小貫養三氏に鉱山が任されます。小貫氏は、松尾地区畑集落への輸送路設置を進めていき、鉱石が人力運搬可能になったことで採掘が始まり、鉱山が開かれました。 栄光への道のり 松尾鉱業株式会社の誕生 本格的に鉱山が開かれたものの、精錬窯故障や冬期操業見込みを上回る出費、賃金不払いによる鉱山労働者出奔等、廃山危機に直面します。 当時、鉱業権を持っていた永井久太郎氏は、教え子で、横浜の貿易商で増田屋を営む中村房次郎氏に、資金援助を依頼。1914年、その経営改革と鉱山開発をするために、彼は松尾鉱業株式会社を設立して、初代社長に就任しました。 本格的な生産体制の確立 中村氏は、応用地質学の第一人者であった巨智部こちべ博士に地質や鉱床の調査を依頼。その結果、硫黄鉱石埋蔵量は、最低でも61万トンに上ることが明らかになります。これは、1911年の1ヶ月の生産計画量が120トンであったことから、420年以上採掘できる計算です。当鉱山の優秀性を確信した彼は、さっそく開発に乗り出しました。 標高900メートルの元山に、事務所・倉庫・荷造場・住宅等を建設し、麓の屋敷台との間に道路を切り開き、ハリジー式架空索道を新設。本格的な鉱石輸送路を整備したことで、生産が軌道に乗り出しました。 引用：広報はちまんたい 令和3年9月号 世界恐慌の余波 中村氏が整備を進めて生産体制を軌道に乗せたものの、硫黄鉱山開発の道のりは厳しいものになります。 1920年、世界恐慌の影響で、松尾鉱業株式会社の親会社である増田屋が倒産し、担保の松尾鉱山は取引銀行に差し押さえられ、閉山の危機に陥ります。さらに、アメリカ発の採掘製錬技術「フラッシュ法」が世界を席巻したことで、日本にある多くの鉱山が閉山に追い込まれることになり、松尾鉱山の経営も同様に厳しくなりました。 東洋一の硫黄鉱山へ 中村氏の尽力で、債務整理後に松尾鉱山は無事返還されましたが、1921年に彼は社長を退任。その後、社長空席のまま厳しい経営状況の下で、松尾鉱業株式会社は自立再建を目指しました。手始めに、会社運営機構や職制等を刷新し、経理事務の近代化と、需要のある硫化鉄鉱販売にも着手。販路を広げて生産拡大し、経営立て直しを図りました。また、亜硫酸ガス煙害問題解決のため、硫黄実収率が底上げされた石炭火力の改良型焼取製錬窯に置き換えて、新生産体制を築きました。 この頃、硫黄を素材とする国内の化学繊維鉱業や製紙工業が急速発展したことで、硫黄の供給先が安定したため、さらに生産を拡大させました。そして、1925年には、硫黄生産量約2万トン、従業員約600人を数える日本一の硫黄鉱山となりました。 黄金期の理想郷 最先端設備のアパート群 第二次世界大戦後の混乱が落ち着いた頃、硫黄需要が再燃して労働者確保が急務となり、福利厚生施設を充実させることになります。そのため、1951年から翌年にかけて、当時最先端だった水洗トイレ・セントラルヒーティング完備の鉄筋コンクリート造集合住宅「緑ヶ丘アパート」群が竣工されました。 現在の緑ヶ丘アパートの姿 山のデパート「用度」 1914年の松尾鉱山株式会社創設時から、「用度ようど」と呼ばれる会社直営の生活物資販売所が、鉱山事務所付近と他三ヶ所に設けられました。 当初は、当時の市町村から商品を仕入れていましたが、少しずつ販売営業を専門業者に委託することで取り扱い品目が充実。その商品も仕入れ値で販売する大盤振る舞いです。1956年に、全売り場がデパート形式に改装・近代化されました。 引用：広報はちまんたい 令和5年7月号 有名芸能人が公演する劇場 1951年に、暖房・照明設備・防音装置を完備し、座席数800を有する鉄筋コンクリート造の劇場「老松会館」を建設。さらに翌年、鉱山の麓にも、バルコニー付きで当時の近代設備完備の座席数450を有する劇場「友愛ホール」を建設。どちらの劇場でも、映画上映・劇・音楽会等が催され、当時の有名芸能人も次々と公演し、多くの人を楽しませました。 引用：広報はちまんたい 令和5年3月号 近代的医療が処置できる病院 1953年に、地上3階地下1階建てのコンクリート造の総合病院「松尾鉱山病院」を建築。地下の厨房室から3階の病室までの食事運搬用リフトが配備され、患者用ベッドをエレベーターでそのまま3階病室まで搬入でき、最新式断層写真が撮れるレントゲンもある等、当時の近代設備を完備。松尾鉱山病院には、他と比べて最新の設備があり、優秀な先生も多かったため、盛岡から診察を受けに来た人もいたそうです。 引用：広報はちまんたい 令和5年5月号 栄華の終焉 エネルギー革命 1950年代に、中東やアフリカで相次いで大油田が発見され、世界的に潤沢に石油が供給されていました。戦後の日本では外貨割当制度により輸入規制がありましたが、1962年に原油輸入が自由化。同年、政府は石炭から石油中心のエネルギー政策に舵を切り、主なエネルギーとして供給されていくようになります。 止めを刺した「回収硫黄」 硫黄等の不純物を含んだままの原油を利用したことで有害な亜硫酸ガスが発生し、四日市喘息の原因となりました。結果、1967年に公害対策基本法が施行され、原油から硫黄を取り除くことが義務付けられました。この対策で、安価で大量の回収硫黄が市場に流通し、硫黄鉱石の需要は完全に消滅しました。 松尾鉱山もその影響を受けて経営が悪化し、1969年に会社更生法を申請して倒産。その後、1972年に鉱業権が放棄され、完全な閉山となりました。 硫黄が齎した功罪 硫黄は、火山周辺等に存在し、単体では無臭の黄色い結晶を作る元素で、ヒトの身体を構成するアミノ酸にも含まれています。 硫黄の価値と用途 明治初期までは、マッチのようなつけ木や薬品に限られた用途でしたが、20世紀初頭に化学産業が盛んになると、化学繊維や製紙用パルプ等の原料用途となり、生産量も飛躍的に増えました。硫黄化合物には色々と用途があり、抗菌作用を持つ亜硫酸ガスであれば、食品保存料や漂白剤等に使用され、硫酸は洗剤等の界面活性剤・金属精錬の電解液・過リン酸石灰・硫安等の生成に使用される、重要な資源です。 水質汚染と財政負担 大量の強酸性水が、松尾鉱山から北上川の支川である赤川に流出し続け、暫定対策として中和剤を直接投入する処理も行われました。しかし、北上川の汚濁問題は継続し、大きな社会問題になったため、1976年に各省庁が対策検討した結果、水質改善用大規模中和施設の建設が決定します。 施設は、1982年から現在まで24時間365日稼働し続け、毎分約17トンの中和処理を行っています。建設と同時期に、坑内水・浸透水を減少させる発生源対策工事も実施。これにより、北上川の水質は改善されました。しかしながら、年々処理原水の水質改善が進み運用コストが減少し続けていますが、今も変わらず年間処理費用の負担が発生しています。 引用：JOGMEC公式ウェブサイト おわりに 石炭から石油へのエネルギーシフトで四日市喘息が流行し、その公害対策で生まれた回収硫黄の流通で、松尾鉱山は消滅するに至りました。これは、バタフライ効果や「風が吹けば桶屋が儲かる」の実例と言えます。このような影響に巻き込まれないように、世界情勢の変化に注視していきたいものです。 参考文献 広報はちまんたい - 八幡平市ホームページ 【日本のエネルギー、150年の歴史③】エネルギー革命の時代。主役は石炭から石油へ交代し、原子力発電やLPガスも｜エネこれ｜資源エネルギー庁 旧松尾鉱山新中和処理施設の運営管理 : 鉱害防止支援 | 独立行政法人エネルギー・金属鉱物資源機構［JOGMEC］ 北上川の歴史｜岩手河川国道事務所","link":"/articles/reminisce-paradise-above-the-clouds/"}],"tags":[{"name":"ブログ作成","slug":"ブログ作成","link":"/tags/%E3%83%96%E3%83%AD%E3%82%B0%E4%BD%9C%E6%88%90/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"npm","slug":"npm","link":"/tags/npm/"},{"name":"Advent Calendar","slug":"Advent-Calendar","link":"/tags/Advent-Calendar/"},{"name":"ゆずソフトレビュー","slug":"ゆずソフトレビュー","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"},{"name":"レビュー","slug":"レビュー","link":"/tags/%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/"},{"name":"PCゲーム","slug":"PCゲーム","link":"/tags/PC%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"美少女ゲーム","slug":"美少女ゲーム","link":"/tags/%E7%BE%8E%E5%B0%91%E5%A5%B3%E3%82%B2%E3%83%BC%E3%83%A0/"},{"name":"ゆずソフト","slug":"ゆずソフト","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88/"},{"name":"自作Hexoプラグイン","slug":"自作Hexoプラグイン","link":"/tags/%E8%87%AA%E4%BD%9CHexo%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"GitHub Pages","slug":"GitHub-Pages","link":"/tags/GitHub-Pages/"},{"name":"Google Search Console","slug":"Google-Search-Console","link":"/tags/Google-Search-Console/"},{"name":"鉄道","slug":"鉄道","link":"/tags/%E9%89%84%E9%81%93/"},{"name":"小ネタ","slug":"小ネタ","link":"/tags/%E5%B0%8F%E3%83%8D%E3%82%BF/"},{"name":"歴史","slug":"歴史","link":"/tags/%E6%AD%B4%E5%8F%B2/"},{"name":"解説","slug":"解説","link":"/tags/%E8%A7%A3%E8%AA%AC/"},{"name":"ゆずソフト攻略","slug":"ゆずソフト攻略","link":"/tags/%E3%82%86%E3%81%9A%E3%82%BD%E3%83%95%E3%83%88%E6%94%BB%E7%95%A5/"},{"name":"攻略","slug":"攻略","link":"/tags/%E6%94%BB%E7%95%A5/"},{"name":"災害対策","slug":"災害対策","link":"/tags/%E7%81%BD%E5%AE%B3%E5%AF%BE%E7%AD%96/"},{"name":"防災","slug":"防災","link":"/tags/%E9%98%B2%E7%81%BD/"},{"name":"液状化","slug":"液状化","link":"/tags/%E6%B6%B2%E7%8A%B6%E5%8C%96/"},{"name":"地震","slug":"地震","link":"/tags/%E5%9C%B0%E9%9C%87/"},{"name":"技術解説","slug":"技術解説","link":"/tags/%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC/"},{"name":"プログラミング","slug":"プログラミング","link":"/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"},{"name":"Go言語","slug":"Go言語","link":"/tags/Go%E8%A8%80%E8%AA%9E/"},{"name":"ブログ改良","slug":"ブログ改良","link":"/tags/%E3%83%96%E3%83%AD%E3%82%B0%E6%94%B9%E8%89%AF/"},{"name":"サイトスピード改善","slug":"サイトスピード改善","link":"/tags/%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E6%94%B9%E5%96%84/"},{"name":"PageSpeed Insights","slug":"PageSpeed-Insights","link":"/tags/PageSpeed-Insights/"},{"name":"WebP","slug":"WebP","link":"/tags/WebP/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"民法","slug":"民法","link":"/tags/%E6%B0%91%E6%B3%95/"},{"name":"親族法","slug":"親族法","link":"/tags/%E8%A6%AA%E6%97%8F%E6%B3%95/"},{"name":"結婚","slug":"結婚","link":"/tags/%E7%B5%90%E5%A9%9A/"},{"name":"書籍要約","slug":"書籍要約","link":"/tags/%E6%9B%B8%E7%B1%8D%E8%A6%81%E7%B4%84/"},{"name":"グロービスMBA","slug":"グロービスMBA","link":"/tags/%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%93%E3%82%B9MBA/"},{"name":"経営戦略","slug":"経営戦略","link":"/tags/%E7%B5%8C%E5%96%B6%E6%88%A6%E7%95%A5/"},{"name":"全社戦略","slug":"全社戦略","link":"/tags/%E5%85%A8%E7%A4%BE%E6%88%A6%E7%95%A5/"},{"name":"事業ポートフォリオ","slug":"事業ポートフォリオ","link":"/tags/%E4%BA%8B%E6%A5%AD%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AA%E3%82%AA/"},{"name":"机上調査","slug":"机上調査","link":"/tags/%E6%9C%BA%E4%B8%8A%E8%AA%BF%E6%9F%BB/"},{"name":"終電","slug":"終電","link":"/tags/%E7%B5%82%E9%9B%BB/"},{"name":"深夜チェックイン","slug":"深夜チェックイン","link":"/tags/%E6%B7%B1%E5%A4%9C%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3/"},{"name":"CI&#x2F;CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"GitHub Actions","slug":"GitHub-Actions","link":"/tags/GitHub-Actions/"},{"name":"事業戦略","slug":"事業戦略","link":"/tags/%E4%BA%8B%E6%A5%AD%E6%88%A6%E7%95%A5/"},{"name":"バリューチェーン","slug":"バリューチェーン","link":"/tags/%E3%83%90%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3/"},{"name":"競争上の地位","slug":"競争上の地位","link":"/tags/%E7%AB%B6%E4%BA%89%E4%B8%8A%E3%81%AE%E5%9C%B0%E4%BD%8D/"},{"name":"マーケティング","slug":"マーケティング","link":"/tags/%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/"},{"name":"環境分析","slug":"環境分析","link":"/tags/%E7%92%B0%E5%A2%83%E5%88%86%E6%9E%90/"},{"name":"市場戦略","slug":"市場戦略","link":"/tags/%E5%B8%82%E5%A0%B4%E6%88%A6%E7%95%A5/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"公害","slug":"公害","link":"/tags/%E5%85%AC%E5%AE%B3/"},{"name":"鉱毒","slug":"鉱毒","link":"/tags/%E9%89%B1%E6%AF%92/"}],"categories":[{"name":"Technology","slug":"Technology","link":"/categories/Technology/"},{"name":"Game","slug":"Game","link":"/categories/Game/"},{"name":"Frontend","slug":"Technology/Frontend","link":"/categories/Technology/Frontend/"},{"name":"Review","slug":"Game/Review","link":"/categories/Game/Review/"},{"name":"Miscellany","slug":"Miscellany","link":"/categories/Miscellany/"},{"name":"Guide","slug":"Game/Guide","link":"/categories/Game/Guide/"},{"name":"Backend","slug":"Technology/Backend","link":"/categories/Technology/Backend/"},{"name":"Business","slug":"Business","link":"/categories/Business/"},{"name":"DevOps","slug":"Technology/DevOps","link":"/categories/Technology/DevOps/"},{"name":"Infrastructure","slug":"Technology/Infrastructure","link":"/categories/Technology/Infrastructure/"}],"pages":[]}